(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/index.ls":[function(require,module,exports){
var readout, Game;
readout = require('./readout');
Game = require('./game');
readout.install();
Game.start();
},{"./game":"/Users/lakmeer/Projects/cave-story/src/game.ls","./readout":"/Users/lakmeer/Projects/cave-story/src/readout.ls"}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Func.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var apply, curry, flip, fix, over;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/List.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(function(){
    return not$(p.apply(this, arguments));
  }, xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function not$(x){ return !x; }
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Num.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Obj.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, results$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    results$[key] = values[i];
  }
  return results$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
    results$[k] = f(x);
  }
  return results$;
});
compact = function(object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (x) {
      results$[k] = x;
    }
  }
  return results$;
};
filter = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
reject = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (!f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Str.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/index.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.1';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Func.js","./List.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/List.js","./Num.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Num.js","./Obj.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Obj.js","./Str.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Str.js"}],"/Users/lakmeer/Projects/cave-story/src/backdrop.ls":[function(require,module,exports){
var std, SDL, units, config, kScreenWidth, kScreenHeight, kBackgroundSize, FixedBackdrop, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
units = require('./units');
config = require('./config');
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight;
kBackgroundSize = 4;
out$.FixedBackdrop = FixedBackdrop = (function(){
  FixedBackdrop.displayName = 'FixedBackdrop';
  var prototype = FixedBackdrop.prototype, constructor = FixedBackdrop;
  function FixedBackdrop(path, graphics){
    this.surface = graphics.loadImage(path);
  }
  prototype.draw = function(graphics){
    var i$, step$, to$, x, lresult$, j$, step1$, to1$, y, destRect, results$ = [];
    for (i$ = 0, to$ = units.tileToPx(kScreenWidth + kBackgroundSize), step$ = units.tileToPx(kBackgroundSize); step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      x = i$;
      lresult$ = [];
      for (j$ = 0, to1$ = units.tileToPx(kScreenHeight + kBackgroundSize), step1$ = units.tileToPx(kBackgroundSize); step1$ < 0 ? j$ >= to1$ : j$ <= to1$; j$ += step1$) {
        y = j$;
        destRect = new SDL.Rect(x, y, units.tileToPx(kBackgroundSize), units.tileToPx(kBackgroundSize));
        lresult$.push(graphics.blitSurface(this.surface, null, destRect));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  return FixedBackdrop;
}());
},{"./config":"/Users/lakmeer/Projects/cave-story/src/config.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/config.ls":[function(require,module,exports){
var kScreenWidth, kScreenHeight, kFps, kMaxFrameTime, kDebugMode, kGraphicsQuality, out$ = typeof exports != 'undefined' && exports || this;
out$.kScreenWidth = kScreenWidth = 20;
out$.kScreenHeight = kScreenHeight = 15;
out$.kFps = kFps = 60;
out$.kMaxFrameTime = kMaxFrameTime = 5 * 1000 / kFps;
out$.kDebugMode = kDebugMode = true;
out$.kGraphicsQuality = kGraphicsQuality = 16;
},{}],"/Users/lakmeer/Projects/cave-story/src/first-cave-bat.ls":[function(require,module,exports){
var std, units, tileToPx, tileToGame, kHalfTile, kTilePx, Rect, ref$, Sprite, AnimatedSprite, RIGHT, LEFT, kAngularVelocity, kFlyFps, kNumFlyFrames, SpriteState, FirstCaveBat, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
tileToPx = units.tileToPx, tileToGame = units.tileToGame, kHalfTile = units.kHalfTile, kTilePx = units.kTilePx;
Rect = require('./rectangle').Rectangle;
ref$ = require('./sprite'), Sprite = ref$.Sprite, AnimatedSprite = ref$.AnimatedSprite;
RIGHT = "R";
LEFT = "L";
kAngularVelocity = 120 / 1000;
kFlyFps = 15;
kNumFlyFrames = 3;
SpriteState = function(){
  var args;
  args = slice$.call(arguments);
  return String(args.join('-'));
};
out$.FirstCaveBat = FirstCaveBat = (function(){
  FirstCaveBat.displayName = 'FirstCaveBat';
  var prototype = FirstCaveBat.prototype, constructor = FirstCaveBat;
  function FirstCaveBat(graphics, x, centerY){
    this.x = x;
    this.centerY = centerY;
    this.flightAngle = 0;
    this.angularVelocity = kAngularVelocity;
    this.horizontalFacing = RIGHT;
    this.sprites = this.initialiseSprites(graphics);
    this.y = this.centerY;
  }
  prototype.getSpriteState = function(){
    return SpriteState(this.horizontalFacing);
  };
  prototype.initialiseSprite = function(graphics, facing){
    var facingOffset;
    facingOffset = facing === RIGHT ? 1 : 0;
    return new AnimatedSprite(graphics, 'data/16x16/Npc/NpcCemet.bmp', tileToPx(2), tileToPx(2 + facingOffset), kTilePx, kTilePx, kFlyFps, kNumFlyFrames);
  };
  prototype.initialiseSprites = function(graphics, spriteMap){
    var i$, ref$, len$, facing;
    spriteMap == null && (spriteMap = {});
    for (i$ = 0, len$ = (ref$ = [LEFT, RIGHT]).length; i$ < len$; ++i$) {
      facing = ref$[i$];
      spriteMap[SpriteState(facing)] = this.initialiseSprite(graphics, facing);
    }
    return spriteMap;
  };
  prototype.update = function(elapsedTime, playerX){
    this.horizontalFacing = playerX < this.x ? LEFT : RIGHT;
    this.flightAngle += this.angularVelocity * elapsedTime;
    this.y = this.centerY + units.tileToGame(5) / 2 * std.sin(units.degToRad(this.flightAngle));
    return this.sprites[this.getSpriteState()].update(elapsedTime);
  };
  prototype.draw = function(graphics){
    return this.sprites[this.getSpriteState()].draw(graphics, this.x, this.y);
  };
  prototype.damageCollision = function(){
    return new Rect(this.x + kHalfTile, this.y + kHalfTile, 1, 1);
  };
  return FirstCaveBat;
}());
},{"./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/game.ls":[function(require,module,exports){
var std, SDL, input, units, config, readout, graphics, Map, tileToGame, Player, FirstCaveBat, FixedBackdrop, Rectangle, NumberSprite, kScreenWidth, kScreenHeight, kFps, kMaxFrameTime, kDebugMode, running, player, bat, map, lastFrameTime, anyKeysPressed, eventLoop, update, draw, createTestWorld, start, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
input = require('./input');
units = require('./units');
config = require('./config');
readout = require('./readout');
graphics = require('./graphics');
Map = require('./map');
tileToGame = units.tileToGame;
Player = require('./player').Player;
FirstCaveBat = require('./first-cave-bat').FirstCaveBat;
FixedBackdrop = require('./backdrop').FixedBackdrop;
Rectangle = require('./rectangle').Rectangle;
NumberSprite = require('./sprite').NumberSprite;
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight, kFps = config.kFps, kMaxFrameTime = config.kMaxFrameTime, kDebugMode = config.kDebugMode;
running = true;
player = null;
bat = null;
map = null;
lastFrameTime = 0;
anyKeysPressed = false;
eventLoop = function(){
  var startTime, event, Δt, elapsedTime;
  startTime = SDL.getTicks();
  input.beginNewFrame();
  while (event = SDL.pollEvent()) {
    anyKeysPressed = true;
    readout.update('willstop', false);
    switch (event.type) {
    case SDL.KEYDOWN:
      input.keyDownEvent(event);
      break;
    case SDL.KEYUP:
      input.keyUpEvent(event);
      break;
    default:
      throw new Error({
        message: "Unknown event type: " + event
      });
    }
  }
  if (input.wasKeyPressed(SDL.KEY.ESCAPE)) {
    running = false;
  }
  if (input.isKeyHeld(SDL.KEY.LEFT) && input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.stopMoving();
  } else if (input.isKeyHeld(SDL.KEY.LEFT)) {
    player.startMovingLeft();
  } else if (input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.startMovingRight();
  } else {
    player.stopMoving();
  }
  if (input.wasKeyPressed(SDL.KEY.Z)) {
    player.startJump();
  } else if (input.wasKeyReleased(SDL.KEY.Z)) {
    player.stopJump();
  }
  if (input.isKeyHeld(SDL.KEY.UP) && input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookHorizontal();
  } else if (input.isKeyHeld(SDL.KEY.UP)) {
    player.lookUp();
  } else if (input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookDown();
  } else {
    player.lookHorizontal();
  }
  Δt = std.min(SDL.getTicks() - lastFrameTime, kMaxFrameTime);
  update(Δt);
  draw();
  if (running) {
    lastFrameTime = SDL.getTicks();
    elapsedTime = lastFrameTime - startTime;
    readout.update('frametime', std.floor(1000 / Δt));
    readout.update('drawtime', elapsedTime);
    return SDL.delay(1000 / kFps - elapsedTime, eventLoop);
  } else {
    return std.log('Game stopped.');
  }
};
update = function(elapsedTime){
  player.update(elapsedTime, map);
  bat.update(elapsedTime, player.x);
  if (bat.damageCollision().collidesWith(player.damageCollision())) {
    readout.update('collided', true);
    return player.takeDamage();
  } else {
    return readout.update('collided', false);
  }
};
draw = function(){
  graphics.clear();
  map.drawBackground(graphics);
  bat.draw(graphics);
  player.draw(graphics);
  map.draw(graphics);
  return player.drawHud(graphics);
};
createTestWorld = function(){
  map = Map.createTestMap(graphics);
  player = new Player(graphics, units.tileToGame(kScreenWidth / 2), units.tileToGame(kScreenHeight / 2));
  return bat = new FirstCaveBat(graphics, units.tileToGame(7), units.tileToGame(8));
};
out$.start = start = function(){
  SDL.init(SDL.INIT_EVERYTHING);
  readout.addReader('frametime', 'Frame time');
  readout.addReader('drawtime', 'Draw time');
  readout.addReader('willstop', 'Will stop', true);
  readout.addReader('collided', 'Collision?', false);
  createTestWorld();
  eventLoop();
  player.startMovingLeft();
  return std.delay(5000, function(){
    if (!anyKeysPressed) {
      return running = false;
    } else {
      return std.log("Game being interacted with. Don't shut down");
    }
  });
};
},{"./backdrop":"/Users/lakmeer/Projects/cave-story/src/backdrop.ls","./config":"/Users/lakmeer/Projects/cave-story/src/config.ls","./first-cave-bat":"/Users/lakmeer/Projects/cave-story/src/first-cave-bat.ls","./graphics":"/Users/lakmeer/Projects/cave-story/src/graphics.ls","./input":"/Users/lakmeer/Projects/cave-story/src/input.ls","./map":"/Users/lakmeer/Projects/cave-story/src/map.ls","./player":"/Users/lakmeer/Projects/cave-story/src/player.ls","./readout":"/Users/lakmeer/Projects/cave-story/src/readout.ls","./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/graphics.ls":[function(require,module,exports){
var std, SDL, config, units, kScreenWidth, kScreenHeight, kTransparentColor, kScreenScaleFactor, spritesheets, screen, loadImage, blitSurface, visualiseRect, clear, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
config = require('./config');
units = require('./units');
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight;
kTransparentColor = [0, 0, 0];
kScreenScaleFactor = 2;
spritesheets = {};
screen = SDL.setVideoMode(units.tileToPx(kScreenWidth), units.tileToPx(kScreenHeight), kScreenScaleFactor);
out$.loadImage = loadImage = function(path, useTransparency){
  useTransparency == null && (useTransparency = false);
  if (spritesheets[path] == null) {
    spritesheets[path] = SDL.loadImage(path);
    if (useTransparency) {
      SDL.setColorKey(spritesheets[path], kTransparentColor);
    }
    if (config.kDebugMode) {
      document.body.appendChild(spritesheets[path].canvas);
    }
  }
  return spritesheets[path];
};
out$.blitSurface = blitSurface = function(source, srcRect, destRect){
  return SDL.blitSurface(source, srcRect, screen, destRect);
};
out$.visualiseRect = visualiseRect = function(rect, fill){
  var paintRect;
  paintRect = new SDL.Rect(units.gameToPx(rect.left), units.gameToPx(rect.top), units.gameToPx(rect.w), units.gameToPx(rect.h));
  if (fill) {
    return screen.drawRect(paintRect, 'red');
  } else {
    return screen.drawBox(paintRect, 'red');
  }
};
out$.clear = clear = function(){
  return screen.clear();
};
},{"./config":"/Users/lakmeer/Projects/cave-story/src/config.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/health.ls":[function(require,module,exports){
var std, units, div, kHalfTile, tileToPx, pxToGame, tileToGame, ref$, Sprite, NumberSprite, VaryingWidthSprite, kHealthBarX, kHealthBarY, kHealthFillX, kHealthFillY, kHealthNumX, kHealthNumY, kMaxFillPx, kDamageTime, Health, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
div = std.div;
kHalfTile = units.kHalfTile, tileToPx = units.tileToPx, pxToGame = units.pxToGame, tileToGame = units.tileToGame;
ref$ = require('./sprite'), Sprite = ref$.Sprite, NumberSprite = ref$.NumberSprite, VaryingWidthSprite = ref$.VaryingWidthSprite;
kHealthBarX = tileToGame(1);
kHealthBarY = tileToGame(2);
kHealthFillX = tileToGame(2.5);
kHealthFillY = tileToGame(2);
kHealthNumX = tileToGame(1.5);
kHealthNumY = tileToGame(2);
kMaxFillPx = tileToPx(2.5) - 1;
kDamageTime = 1500;
out$.Health = Health = (function(){
  Health.displayName = 'Health';
  var prototype = Health.prototype, constructor = Health;
  function Health(graphics, maxHealth){
    this.maxHealth = maxHealth != null ? maxHealth : 6;
    this.currentHealth = this.maxHealth;
    this.damage = 0;
    this.damageTime = 0;
    this.healthBarSprite = new Sprite(graphics, 'data/16x16/TextBox.bmp', 0, tileToPx(2.5), tileToPx(4), tileToPx(0.5));
    this.healthFillSprite = new VaryingWidthSprite(graphics, 'data/16x16/TextBox.bmp', 0, tileToPx(1.5), kMaxFillPx, tileToPx(0.5));
    this.damageFillSprite = new VaryingWidthSprite(graphics, 'data/16x16/TextBox.bmp', 0, tileToPx(2.0), kMaxFillPx, tileToPx(0.5));
  }
  prototype.takeDamage = function(damage){
    if (this.currentHealth === 0) {
      return;
    }
    this.damage = damage;
    this.damageTime = 0;
    this.healthFillSprite.setWidth(this.fillOffset(this.currentHealth - damage));
    this.damageFillSprite.setWidth(this.fillOffset(damage));
    return this.currentHealth - damage <= 0;
  };
  prototype.update = function(elapsedTime){
    if (this.damage) {
      this.damageTime += elapsedTime;
      if (this.damageTime >= kDamageTime) {
        this.currentHealth = std.max(0, this.currentHealth - this.damage);
        return this.damage = 0;
      }
    }
  };
  prototype.fillOffset = function(health){
    return kMaxFillPx * (health / this.maxHealth);
  };
  prototype.draw = function(graphics){
    var x;
    this.healthBarSprite.draw(graphics, kHealthBarX, kHealthBarY);
    if (this.currentHealth !== 0) {
      this.healthFillSprite.draw(graphics, kHealthFillX, kHealthFillY);
      if (this.damage) {
        x = kHealthFillX + pxToGame(this.fillOffset(this.currentHealth - this.damage));
        this.damageFillSprite.draw(graphics, x, kHealthFillY);
      }
    }
    return new NumberSprite.HUDNumber(graphics, this.currentHealth, 2).draw(graphics, kHealthNumX, kHealthNumY);
  };
  return Health;
}());
},{"./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/input.ls":[function(require,module,exports){
var std, Input;
std = require('std');
Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.heldKeys = {};
    this.pressedKeys = {};
    this.releasedKeys = {};
  }
  prototype.beginNewFrame = function(){
    this.pressedKeys = {};
    return this.releasedKeys = {};
  };
  prototype.keyDownEvent = function(event){
    this.pressedKeys[event.key] = true;
    return this.heldKeys[event.key] = true;
  };
  prototype.keyUpEvent = function(event){
    this.releasedKeys[event.key] = true;
    return this.heldKeys[event.key] = false;
  };
  prototype.wasKeyPressed = function(key){
    return this.pressedKeys[key];
  };
  prototype.wasKeyReleased = function(key){
    return this.releasedKeys[key];
  };
  prototype.isKeyHeld = function(key){
    return this.heldKeys[key];
  };
  return Input;
}());
module.exports = new Input;
},{"std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/map.ls":[function(require,module,exports){
var std, units, div, Sprite, FixedBackdrop, Rect, ref$, AIR_TILE, WALL_TILE, Tile, CollisionTile, Map;
std = require('std');
units = require('./units');
div = std.div;
Sprite = require('./sprite').Sprite;
FixedBackdrop = require('./backdrop').FixedBackdrop;
Rect = require('./rectangle').Rectangle;
ref$ = std['enum'], AIR_TILE = ref$[0], WALL_TILE = ref$[1];
Tile = (function(){
  Tile.displayName = 'Tile';
  var prototype = Tile.prototype, constructor = Tile;
  function Tile(type, sprite){
    this.type = type != null ? type : AIR_TILE;
    this.sprite = sprite;
  }
  return Tile;
}());
CollisionTile = (function(){
  CollisionTile.displayName = 'CollisionTile';
  var prototype = CollisionTile.prototype, constructor = CollisionTile;
  function CollisionTile(row, col, type){
    this.row = row;
    this.col = col;
    this.type = type;
  }
  return CollisionTile;
}());
module.exports = Map = (function(){
  Map.displayName = 'Map';
  var prototype = Map.prototype, constructor = Map;
  function Map(){
    this.backdrop = null;
    this.tiles = Map.createMatrix(new Tile, 20, 15);
    this.bgTiles = Map.createMatrix(null, 20, 15);
  }
  prototype.update = function(elapsedTime){
    var i$, ref$, len$, row, lresult$, j$, len1$, tile, ref1$, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.tiles).length; i$ < len$; ++i$) {
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        tile = row[j$];
        lresult$.push((ref1$ = tile.sprite) != null ? ref1$.update(elapsedTime) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.draw = function(graphics){
    var i$, ref$, len$, y, row, lresult$, j$, len1$, x, tile, ref1$, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.tiles).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        tile = row[j$];
        lresult$.push((ref1$ = tile.sprite) != null ? ref1$.draw(graphics, units.tileToGame(x), units.tileToGame(y)) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.drawBackground = function(graphics){
    var i$, ref$, len$, y, row, lresult$, j$, len1$, x, sprite, results$ = [];
    this.backdrop.draw(graphics);
    for (i$ = 0, len$ = (ref$ = this.bgTiles).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        sprite = row[j$];
        lresult$.push(sprite != null ? sprite.draw(graphics, units.tileToGame(x), units.tileToGame(y)) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.getCollidingTiles = function(rect){
    var firstRow, lastRow, firstCol, lastCol, collisionTiles, i$, row, j$, col;
    firstRow = div(units.gameToPx(rect.top), units.tileToPx(1));
    lastRow = div(units.gameToPx(rect.bottom), units.tileToPx(1));
    firstCol = div(units.gameToPx(rect.left), units.tileToPx(1));
    lastCol = div(units.gameToPx(rect.right), units.tileToPx(1));
    collisionTiles = [];
    for (i$ = firstRow; i$ <= lastRow; ++i$) {
      row = i$;
      for (j$ = firstCol; j$ <= lastCol; ++j$) {
        col = j$;
        collisionTiles.push(new CollisionTile(row, col, this.tiles[row][col].type));
      }
    }
    return collisionTiles;
  };
  Map.createTestMap = function(graphics){
    var map, numRows, numCols, row, tile, i$, col, chainTop, chainMid, chainBtm;
    map = new Map;
    map.backdrop = new FixedBackdrop('data/16x16/bkBlue.bmp', graphics);
    numRows = 15;
    numCols = 20;
    row = 11;
    tile = new Tile(WALL_TILE, new Sprite(graphics, 'data/16x16/Stage/PrtCave.bmp', units.tileToPx(1), 0, units.tileToPx(1), units.tileToPx(1)));
    for (i$ = 0; i$ <= numCols; ++i$) {
      col = i$;
      map.tiles[row][col] = tile;
    }
    map.tiles[10][5] = tile;
    map.tiles[9][4] = tile;
    map.tiles[8][3] = tile;
    map.tiles[7][2] = tile;
    map.tiles[10][3] = tile;
    chainTop = new Sprite(graphics, 'data/16x16/Stage/PrtCave.bmp', units.tileToPx(11), units.tileToPx(2), units.tileToPx(1), units.tileToPx(1));
    chainMid = new Sprite(graphics, 'data/16x16/Stage/PrtCave.bmp', units.tileToPx(12), units.tileToPx(2), units.tileToPx(1), units.tileToPx(1));
    chainBtm = new Sprite(graphics, 'data/16x16/Stage/PrtCave.bmp', units.tileToPx(13), units.tileToPx(2), units.tileToPx(1), units.tileToPx(1));
    map.bgTiles[8][2] = chainTop;
    map.bgTiles[9][2] = chainMid;
    map.bgTiles[10][2] = chainBtm;
    return map;
  };
  Map.createMatrix = function(value, cols, rows){
    var i$, y, lresult$, j$, z, results$ = [];
    for (i$ = 0; i$ <= rows; ++i$) {
      y = i$;
      lresult$ = [];
      for (j$ = 0; j$ <= cols; ++j$) {
        z = j$;
        lresult$.push(value);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  Map.WALL_TILE = WALL_TILE;
  Map.AIR_TILE = AIR_TILE;
  return Map;
}());
},{"./backdrop":"/Users/lakmeer/Projects/cave-story/src/backdrop.ls","./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/player.ls":[function(require,module,exports){
var std, units, config, readout, kHalfTile, tileToGame, tileToPx, WALL_TILE, Rect, Health, ref$, Sprite, AnimatedSprite, NumberSprite, kCharacterFrame, kWalkFrame, kStandFrame, kJumpFrame, kFallFrame, kUpFrameOffset, kDownFrame, kBackFrame, kWalkFps, kFriction, kGravity, kWalkingAcceleration, kAirAcceleration, kMaxSpeedX, kMaxSpeedY, kJumpSpeed, kShortJumpSpeed, kJumpGravity, kInvincibleTime, kInvincibleFlashTime, kCollisionX, kCollisionY, STANDING, WALKING, JUMPING, FALLING, INTERACTING, LEFT, RIGHT, UP, DOWN, HORIZONTAL, SpriteState, Player, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
config = require('./config');
readout = require('./readout');
kHalfTile = units.kHalfTile, tileToGame = units.tileToGame, tileToPx = units.tileToPx;
WALL_TILE = require('./map').WALL_TILE;
Rect = require('./rectangle').Rectangle;
Health = require('./health').Health;
ref$ = require('./sprite'), Sprite = ref$.Sprite, AnimatedSprite = ref$.AnimatedSprite, NumberSprite = ref$.NumberSprite;
kCharacterFrame = 0;
kWalkFrame = 0;
kStandFrame = 0;
kJumpFrame = 1;
kFallFrame = 2;
kUpFrameOffset = 3;
kDownFrame = 6;
kBackFrame = 7;
kWalkFps = 15;
kFriction = 0.00049804687;
kGravity = 0.00078125;
kWalkingAcceleration = 0.00083007812;
kAirAcceleration = 0.0003125;
kMaxSpeedX = 0.15859375;
kMaxSpeedY = 0.2998046875;
kJumpSpeed = 0.25;
kShortJumpSpeed = 0.25 / 1.5;
kJumpGravity = 0.0003125;
kInvincibleTime = 3000;
kInvincibleFlashTime = 50;
kCollisionX = new Rect(6, 10, 20, 12);
kCollisionY = new Rect(10, 2, 12, 30);
ref$ = ['S', 'W', 'J', 'F', 'I'], STANDING = ref$[0], WALKING = ref$[1], JUMPING = ref$[2], FALLING = ref$[3], INTERACTING = ref$[4];
ref$ = ['L', 'R'], LEFT = ref$[0], RIGHT = ref$[1];
ref$ = ['U', 'D', 'H'], UP = ref$[0], DOWN = ref$[1], HORIZONTAL = ref$[2];
SpriteState = (function(){
  SpriteState.displayName = 'SpriteState';
  var prototype = SpriteState.prototype, constructor = SpriteState;
  function SpriteState(motionType, horizontalFacing, verticalFacing){
    this.motionType = motionType != null ? motionType : STANDING;
    this.horizontalFacing = horizontalFacing != null ? horizontalFacing : LEFT;
    this.verticalFacing = verticalFacing != null ? verticalFacing : HORIZONTAL;
  }
  prototype.key = function(){
    return this.motionType + "-" + this.horizontalFacing + "-" + this.verticalFacing;
  };
  SpriteState.key = function(){
    var args;
    args = slice$.call(arguments);
    return args.join('-');
  };
  return SpriteState;
}());
out$.Player = Player = (function(){
  Player.displayName = 'Player';
  var prototype = Player.prototype, constructor = Player;
  function Player(graphics, x, y){
    this.x = x;
    this.y = y;
    this.velocityY = 0;
    this.velocityX = 0;
    this.accelerationX = 0;
    this.horizontalFacing = LEFT;
    this.verticalFacing = HORIZONTAL;
    this.onGround = false;
    this.jumpActive = false;
    this.interacting = false;
    this.invincible = false;
    this.invincibleTime = 0;
    this.health = new Health(graphics);
    this.sprites = this.initialiseSprites(graphics);
    if (config.kDebugMode) {
      readout.addReader('spritestate', 'SpriteState');
    }
  }
  prototype.initialiseSprite = function(graphics, motion, hfacing, vfacing){
    var tileX, tileY, sourceX;
    tileX = (function(){
      switch (motion) {
      case WALKING:
        return kWalkFrame;
      case STANDING:
        return kStandFrame;
      case JUMPING:
        return kJumpFrame;
      case FALLING:
        return kFallFrame;
      case INTERACTING:
        return kBackFrame;
      }
    }());
    tileX += vfacing === UP ? kUpFrameOffset : 0;
    tileY = kCharacterFrame + (hfacing === LEFT ? 0 : 1);
    if (motion === WALKING) {
      return new AnimatedSprite(graphics, 'data/16x16/MyChar.bmp', units.tileToPx(tileX), units.tileToPx(tileY), units.tileToPx(1), units.tileToPx(1), kWalkFps, 3);
    } else {
      if (vfacing === DOWN && (motion === JUMPING || motion === FALLING)) {
        sourceX = kDownFrame;
      }
      return new Sprite(graphics, 'data/16x16/MyChar.bmp', units.tileToPx(tileX), units.tileToPx(tileY), units.tileToPx(1), units.tileToPx(1));
    }
  };
  prototype.initialiseSprites = function(graphics, spriteMap){
    var i$, ref$, len$, motion, j$, ref1$, len1$, hfacing, k$, ref2$, len2$, vfacing;
    spriteMap == null && (spriteMap = {});
    for (i$ = 0, len$ = (ref$ = [STANDING, WALKING, JUMPING, FALLING, INTERACTING]).length; i$ < len$; ++i$) {
      motion = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = [LEFT, RIGHT]).length; j$ < len1$; ++j$) {
        hfacing = ref1$[j$];
        for (k$ = 0, len2$ = (ref2$ = [UP, DOWN, HORIZONTAL]).length; k$ < len2$; ++k$) {
          vfacing = ref2$[k$];
          spriteMap[SpriteState.key(motion, hfacing, vfacing)] = this.initialiseSprite(graphics, motion, hfacing, vfacing);
        }
      }
    }
    return spriteMap;
  };
  prototype.update = function(elapsedTime, map){
    this.sprites[this.getSpriteState()].update(elapsedTime);
    if (this.invincible) {
      this.invincibleTime += elapsedTime;
      this.invincible = this.invincibleTime < kInvincibleTime;
    }
    this.health.update(elapsedTime);
    this.updateX(elapsedTime, map);
    return this.updateY(elapsedTime, map);
  };
  prototype.updateX = function(elapsedTime, map){
    var accX, Δx;
    accX = this.onGround ? kWalkingAcceleration : kAirAcceleration;
    this.velocityX += this.accelerationX * accX * elapsedTime;
    if (this.accelerationX < 0) {
      this.velocityX = std.max(this.velocityX, -kMaxSpeedX);
    } else if (this.accelerationX > 0) {
      this.velocityX = std.min(this.velocityX, kMaxSpeedX);
    } else if (this.onGround) {
      this.velocityX = this.velocityX > 0
        ? std.max(0, this.velocityX - kFriction * elapsedTime)
        : std.min(0, this.velocityX + kFriction * elapsedTime);
    }
    Δx = this.velocityX * elapsedTime;
    if (Δx > 0) {
      this.onWallCollision(map, this.rightCollision(Δx), function(tile){
        if (tile) {
          this.x = units.tileToGame(tile.col) - kCollisionX.right;
          return this.velocityX = 0;
        } else {
          return this.x += Δx;
        }
      });
      return this.onWallCollision(map, this.leftCollision(0), function(tile){
        if (tile) {
          return this.x = units.tileToGame(tile.col) + kCollisionX.right;
        }
      });
    } else {
      this.onWallCollision(map, this.leftCollision(Δx), function(tile){
        if (tile) {
          this.x = units.tileToGame(tile.col) + kCollisionX.right;
          return this.velocityX = 0;
        } else {
          return this.x += Δx;
        }
      });
      return this.onWallCollision(map, this.rightCollision(0), function(tile){
        if (tile) {
          return this.x = units.tileToGame(tile.col) - kCollisionX.right;
        }
      });
    }
  };
  prototype.updateY = function(elapsedTime, map){
    var gravity, Δy;
    gravity = this.jumpActive && this.velocityY < 0 ? kJumpGravity : kGravity;
    this.velocityY = std.min(this.velocityY + gravity * elapsedTime, kMaxSpeedY);
    Δy = this.velocityY * elapsedTime;
    if (Δy > 0) {
      this.onWallCollision(map, this.bottomCollision(Δy), function(tile){
        if (tile) {
          this.y = units.tileToGame(tile.row) - kCollisionY.bottom;
          this.velocityY = 0;
          return this.onGround = true;
        } else {
          this.y += Δy;
          return this.onGround = false;
        }
      });
      return this.onWallCollision(map, this.topCollision(0), function(tile){
        if (tile) {
          return this.y = units.tileToGame(tile.row) + kCollisionY.h;
        }
      });
    } else {
      this.onWallCollision(map, this.topCollision(Δy), function(tile){
        if (tile) {
          this.y = units.tileToGame(tile.row) + kCollisionY.h;
          return this.velocityY = 0;
        } else {
          this.y += Δy;
          return this.onGround = false;
        }
      });
      return this.onWallCollision(map, this.bottomCollision(0), function(tile){
        if (tile) {
          this.y = units.tileToGame(tile.row) - kCollisionY.bottom;
          return this.onGround = true;
        }
      });
    }
  };
  prototype.takeDamage = function(damage){
    if (!this.invincible) {
      this.health.takeDamage(2);
      this.velocityY = std.min(-kShortJumpSpeed, this.velocityY);
      this.invincible = true;
      return this.invincibleTime = 0;
    }
  };
  prototype.spriteIsVisible = function(){
    return !(this.invincible && std.div(this.invincibleTime, kInvincibleFlashTime) % 2 === 0);
  };
  prototype.drawHud = function(graphics){
    if (!this.spriteIsVisible()) {
      return;
    }
    return this.health.draw(graphics);
  };
  prototype.draw = function(graphics){
    if (!this.spriteIsVisible()) {
      return;
    }
    return this.sprites[this.getSpriteState()].draw(graphics, this.x, this.y);
  };
  prototype.getSpriteState = function(){
    var motionType, key;
    motionType = this.interacting
      ? INTERACTING
      : this.onGround
        ? this.accelerationX === 0 ? STANDING : WALKING
        : this.velocityY < 0 ? JUMPING : FALLING;
    key = SpriteState.key(motionType, this.horizontalFacing, this.verticalFacing);
    readout.update('spritestate', key);
    return key;
  };
  prototype.leftCollision = function(Δ){
    return new Rect(this.x + kCollisionX.left + Δ, this.y + kCollisionX.top, kCollisionX.w / 2 - Δ, kCollisionX.h);
  };
  prototype.rightCollision = function(Δ){
    return new Rect(this.x + kCollisionX.left + kCollisionX.w / 2, this.y + kCollisionX.top, kCollisionX.w / 2 + Δ, kCollisionX.h);
  };
  prototype.topCollision = function(Δ){
    return new Rect(this.x + kCollisionY.left, this.y + kCollisionY.top + Δ, kCollisionY.w, kCollisionY.h / 2 - Δ);
  };
  prototype.bottomCollision = function(Δ){
    return new Rect(this.x + kCollisionY.left, this.y + kCollisionY.top + kCollisionY.h / 2 + Δ, kCollisionY.w, kCollisionY.h / 2 + Δ);
  };
  prototype.damageCollision = function(){
    return new Rect(this.x + kCollisionX.left, this.y + kCollisionY.top, kCollisionX.w, kCollisionY.h);
  };
  prototype.onWallCollision = function(map, rect, λ){
    var i$, ref$, len$, tile;
    for (i$ = 0, len$ = (ref$ = map.getCollidingTiles(rect)).length; i$ < len$; ++i$) {
      tile = ref$[i$];
      if (tile.type === WALL_TILE) {
        return λ.call(this, tile);
      }
    }
    return λ.call(this);
  };
  prototype.startMovingLeft = function(){
    this.horizontalFacing = LEFT;
    this.accelerationX = -1;
    return this.interacting = false;
  };
  prototype.startMovingRight = function(){
    this.horizontalFacing = RIGHT;
    this.accelerationX = 1;
    return this.interacting = false;
  };
  prototype.stopMoving = function(){
    return this.accelerationX = 0;
  };
  prototype.startJump = function(){
    this.jumpActive = true;
    this.interacting = false;
    if (this.onGround) {
      return this.velocityY = -kJumpSpeed;
    }
  };
  prototype.stopJump = function(){
    return this.jumpActive = false;
  };
  prototype.lookUp = function(){
    this.verticalFacing = UP;
    return this.interacting = false;
  };
  prototype.lookDown = function(){
    if (this.verticalFacing === DOWN) {
      return;
    }
    this.verticalFacing = DOWN;
    return this.interacting = this.onGround;
  };
  prototype.lookHorizontal = function(){
    return this.verticalFacing = HORIZONTAL;
  };
  return Player;
}());
},{"./config":"/Users/lakmeer/Projects/cave-story/src/config.ls","./health":"/Users/lakmeer/Projects/cave-story/src/health.ls","./map":"/Users/lakmeer/Projects/cave-story/src/map.ls","./readout":"/Users/lakmeer/Projects/cave-story/src/readout.ls","./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/readout.ls":[function(require,module,exports){
var elm, applyStyles, Reader, host, readers, install, addReader, update, removeReader, out$ = typeof exports != 'undefined' && exports || this;
elm = bind$(document, 'createElement');
applyStyles = function(el, styles){
  var k, v, results$ = [];
  for (k in styles) {
    v = styles[k];
    results$.push(el.style[k] = v);
  }
  return results$;
};
Reader = (function(){
  Reader.displayName = 'Reader';
  var prototype = Reader.prototype, constructor = Reader;
  function Reader(name, labelText, value){
    var that;
    this.name = name;
    this.labelText = labelText;
    this.value = value;
    this.dom = elm('tr');
    this.label = elm('td');
    this.output = elm('td');
    this.dom.appendChild(this.label);
    this.dom.appendChild(this.output);
    this.label.innerHTML = this.labelText;
    if (that = this.value) {
      this.output.innerHTML = that;
    }
  }
  prototype.update = function(value){
    this.value = value;
    return this.output.innerHTML = this.value;
  };
  prototype.hide = function(){
    return this.dom.styles.display = 'none';
  };
  prototype.show = function(){
    return this.dom.styles.display = 'block';
  };
  prototype.install = function(host){
    return host.appendChild(this.dom);
  };
  prototype['delete'] = function(){
    return this.dom.parentNode.removeChild(this.dom);
  };
  return Reader;
}());
host = elm('table');
readers = {};
applyStyles(host, {
  fontFamily: 'monospace',
  width: '100%',
  paddingLeft: '10px',
  color: 'lightgrey',
  borderWidth: "3px 1px"
});
out$.install = install = function(){
  return document.body.appendChild(host);
};
out$.addReader = addReader = function(name, label, value){
  readers[name] = new Reader(name, label, value);
  return readers[name].install(host);
};
out$.update = update = function(readerName, value){
  var ref$;
  return (ref$ = readers[readerName]) != null ? ref$.update(value) : void 8;
};
out$.removeReader = removeReader = function(name){
  var ref$;
  readers[name]['delete']();
  return ref$ = readers[name], delete readers[name], ref$;
};
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{}],"/Users/lakmeer/Projects/cave-story/src/rectangle.ls":[function(require,module,exports){
var Rectangle, out$ = typeof exports != 'undefined' && exports || this;
out$.Rectangle = Rectangle = (function(){
  Rectangle.displayName = 'Rectangle';
  var prototype = Rectangle.prototype, constructor = Rectangle;
  function Rectangle(x, y, w, h, m){
    m == null && (m = 1);
    this.x = x * m;
    this.y = y * m;
    this.w = w * m;
    this.h = h * m;
    this.top = this.y;
    this.left = this.x;
    this.right = this.x + this.w;
    this.bottom = this.y + this.h;
  }
  prototype.collidesWith = function(other){
    return this.right >= other.left && this.left <= other.right && this.top <= other.bottom && this.bottom >= other.top;
  };
  return Rectangle;
}());
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/delay.ls":[function(require,module,exports){
var raf, out$ = typeof exports != 'undefined' && exports || this;
raf = requestAnimationFrame;
import$(out$, {
  delay: function(time, λ){
    return raf(λ);
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls":[function(require,module,exports){
var std, queue, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = [];
import$(out$, {
  pushEvent: function(event){
    return queue.push(event);
  },
  pollEvent: function(){
    if (queue.length) {
      return queue.shift();
    }
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls":[function(require,module,exports){
var std, delay, timer, screen, keyboard, eventQueue, Rect, Surface, ref$, INIT_EVERYTHING, FULLSCREEN, init, KEY, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
delay = require('./delay');
timer = require('./timer');
screen = require('./screen');
keyboard = require('./keyboard');
eventQueue = require('./event-queue');
out$.Rect = Rect = require('./rect');
out$.Surface = Surface = require('./surface');
ref$ = std['enum'], INIT_EVERYTHING = ref$[0], FULLSCREEN = ref$[1];
out$.init = init = function(mode){
  std.log("SDL::Init - with mode:", mode);
  timer.init();
  return keyboard.init();
};
out$.INIT_EVERYTHING = INIT_EVERYTHING;
out$.FULLSCREEN = FULLSCREEN;
out$.KEYDOWN = keyboard.KEYDOWN;
out$.KEYUP = keyboard.KEYUP;
out$.KEY = KEY = keyboard.KEYCODES;
out$.delay = delay.delay;
out$.getTicks = timer.getTicks;
out$.pollEvent = eventQueue.pollEvent;
out$.setVideoMode = screen.setVideoMode;
out$.blitSurface = Surface.blitSurface;
out$.setColorKey = Surface.setColorKey;
out$.loadImage = Surface.loadImage;
},{"./delay":"/Users/lakmeer/Projects/cave-story/src/sdl/delay.ls","./event-queue":"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls","./keyboard":"/Users/lakmeer/Projects/cave-story/src/sdl/keyboard.ls","./rect":"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls","./screen":"/Users/lakmeer/Projects/cave-story/src/sdl/screen.ls","./surface":"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls","./timer":"/Users/lakmeer/Projects/cave-story/src/sdl/timer.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/keyboard.ls":[function(require,module,exports){
var std, queue, ref$, KEYDOWN, KEYUP, KEYCODES, monitorKeys, init, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = require('./event-queue');
ref$ = std['enum'], KEYDOWN = ref$[0], KEYUP = ref$[1];
out$.KEYCODES = KEYCODES = {
  ESCAPE: 27,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  A: 65,
  Q: 81,
  S: 83,
  W: 87,
  X: 88,
  Z: 90
};
monitorKeys = function(){
  document.addEventListener('keydown', function(event){
    var which;
    which = event.which;
    queue.pushEvent({
      type: KEYDOWN,
      key: which
    });
    return event.preventDefault();
  });
  return document.addEventListener('keyup', function(event){
    var which;
    which = event.which;
    queue.pushEvent({
      type: KEYUP,
      key: which
    });
    return event.preventDefault();
  });
};
out$.init = init = function(){
  std.log("SDL::Keyboard - Monitoring key input");
  return monitorKeys();
};
out$.KEYDOWN = KEYDOWN;
out$.KEYUP = KEYUP;
},{"./event-queue":"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls":[function(require,module,exports){
var Rect;
module.exports = Rect = (function(){
  Rect.displayName = 'Rect';
  var prototype = Rect.prototype, constructor = Rect;
  function Rect(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  return Rect;
}());
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/screen.ls":[function(require,module,exports){
var std, Surface, applyScaleStyles, createNewScreen, setVideoMode, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
Surface = require('./surface');
applyScaleStyles = function(canvas, scaleFactor){
  if (scaleFactor !== 0) {
    return canvas.style.width = canvas.width * scaleFactor + 'px';
  }
};
createNewScreen = function(w, h, scaleFactor){
  var screen;
  screen = new Surface(null, w, h);
  document.body.appendChild(screen.canvas);
  applyScaleStyles(screen.canvas, scaleFactor);
  return screen;
};
out$.setVideoMode = setVideoMode = function(width, height, scaleFactor){
  scaleFactor == null && (scaleFactor = 1);
  return createNewScreen(width, height, scaleFactor);
};
},{"./surface":"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls":[function(require,module,exports){
var std, Rect, makeTransparent, Surface;
std = require('std');
Rect = require('./rect');
makeTransparent = function(data, color){
  var canvas, context, pixels, i$, to$, i;
  canvas = document.createElement('canvas');
  canvas.width = data.width;
  canvas.height = data.height;
  context = canvas.getContext('2d');
  context.drawImage(data, 0, 0);
  pixels = context.getImageData(0, 0, canvas.width, canvas.height);
  for (i$ = 0, to$ = pixels.data.length; i$ <= to$; i$ += 4) {
    i = i$;
    if (pixels.data[i + 0] === color[0] && pixels.data[i + 1] === color[1] && pixels.data[i + 2] === color[2]) {
      pixels.data[i + 3] = 0;
    }
  }
  context.putImageData(pixels, 0, 0);
  return canvas;
};
module.exports = Surface = (function(){
  Surface.displayName = 'Surface';
  var prototype = Surface.prototype, constructor = Surface;
  function Surface(src, width, height){
    this.width = width;
    this.height = height;
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.ready = false;
    this.colorKey = null;
    this.resetCanvasSize();
    this.ctx.fillStyle = 'red';
    this.ctx.fillRect(0, 0, this.width, this.height);
    if (typeof src === 'string') {
      this.loadImageData(src);
    } else if (src != null) {
      this.saveImageData(src);
    } else {}
  }
  prototype.resetCanvasSize = function(){
    this.canvas.width = this.width;
    return this.canvas.height = this.height;
  };
  prototype.inheritSizeFromImage = function(data){
    if (this.width == null && this.height == null) {
      this.width = data.naturalWidth;
      this.height = data.naturalHeight;
      return this.resetCanvasSize();
    }
  };
  prototype.loadImageData = function(path){
    var data, this$ = this;
    data = new Image;
    data.onload = function(){
      this$.inheritSizeFromImage(data);
      return this$.saveImageData(data);
    };
    data.onerror = function(){
      std.log("Cant load:", path);
      return this$.ctx.fillRect(0, 0, this$.width, this$.height);
    };
    return data.src = path;
  };
  prototype.saveImageData = function(data){
    this.data = this.colorKey ? makeTransparent(data, this.colorKey) : data;
    this.ready = true;
    this.ctx.clearRect(0, 0, this.width, this.height);
    return this.ctx.drawImage(this.data, 0, 0, this.width, this.height);
  };
  prototype.setColorKey = function(color){
    this.colorKey = color;
    if (this.ready) {
      return this.saveImageData(this.data);
    }
  };
  prototype.drawRect = function(rect, color){
    color == null && (color = 'black');
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h);
  };
  prototype.drawBox = function(rect, color){
    color == null && (color = 'black');
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(0.5 + rect.x, 0.5 + rect.y);
    this.ctx.lineTo(0.5 + rect.x, -0.5 + rect.y + rect.h);
    this.ctx.lineTo(-0.5 + rect.x + rect.w, -0.5 + rect.y + rect.h);
    this.ctx.lineTo(-0.5 + rect.x + rect.w, 0.5 + rect.y);
    this.ctx.lineTo(0.5 + rect.x, 0.5 + rect.y);
    this.ctx.stroke();
    return this.ctx.closePath();
  };
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.width, this.height);
  };
  Surface.setColorKey = function(surface, color){
    return surface.setColorKey(color);
  };
  Surface.blitSurface = function(source, srcRect, dest, destRect){
    if (srcRect) {
      return dest.ctx.drawImage(source.canvas, srcRect.x, srcRect.y, srcRect.w, srcRect.h, destRect.x, destRect.y, destRect.w, destRect.h);
    } else {
      return dest.ctx.drawImage(source.canvas, destRect.x, destRect.y, destRect.w, destRect.h);
    }
  };
  Surface.loadImage = function(path){
    return new Surface(path);
  };
  return Surface;
}());
},{"./rect":"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/timer.ls":[function(require,module,exports){
var startTime, out$ = typeof exports != 'undefined' && exports || this;
startTime = 0;
import$(out$, {
  init: function(){
    return startTime = Date.now();
  },
  getTicks: function(){
    return Date.now() - startTime;
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],"/Users/lakmeer/Projects/cave-story/src/sprite.ls":[function(require,module,exports){
var SDL, std, units, div, kHalfTile, tileToPx, gameToPx, Sprite, AnimatedSprite, NumberSprite, VaryingWidthSprite, out$ = typeof exports != 'undefined' && exports || this;
SDL = require('SDL');
std = require('std');
units = require('./units');
div = std.div;
kHalfTile = units.kHalfTile, tileToPx = units.tileToPx, gameToPx = units.gameToPx;
out$.Sprite = Sprite = (function(){
  Sprite.displayName = 'Sprite';
  var prototype = Sprite.prototype, constructor = Sprite;
  function Sprite(graphics, path, sourceX, sourceY, width, height){
    this.width = width;
    this.height = height;
    this.sourceRect = new SDL.Rect(sourceX, sourceY, width, height);
    this.spriteSheet = graphics.loadImage(path, true);
  }
  prototype.update = function(){};
  prototype.draw = function(graphics, x, y){
    var destRect;
    destRect = new SDL.Rect(units.gameToPx(x), units.gameToPx(y), this.width, this.height);
    return graphics.blitSurface(this.spriteSheet, this.sourceRect, destRect);
  };
  return Sprite;
}());
out$.AnimatedSprite = AnimatedSprite = (function(superclass){
  var prototype = extend$((import$(AnimatedSprite, superclass).displayName = 'AnimatedSprite', AnimatedSprite), superclass).prototype, constructor = AnimatedSprite;
  function AnimatedSprite(graphics, path, sourceX, sourceY, width, height, fps, numFrames){
    this.width = width;
    this.height = height;
    this.fps = fps;
    this.numFrames = numFrames;
    AnimatedSprite.superclass.apply(this, arguments);
    this.frameTime = 1000 / this.fps;
    this.currentFrame = 0;
    this.elapsedTime = 0;
  }
  prototype.update = function(elapsedTime){
    this.elapsedTime += elapsedTime;
    if (this.elapsedTime > this.frameTime) {
      this.currentFrame += 1;
      this.elapsedTime = 0;
      if (this.currentFrame < this.numFrames) {
        return this.sourceRect.x += this.sourceRect.w;
      } else {
        this.sourceRect.x -= this.sourceRect.w * (this.numFrames - 1);
        return this.currentFrame = 0;
      }
    }
  };
  return AnimatedSprite;
}(Sprite));
out$.NumberSprite = NumberSprite = (function(){
  NumberSprite.displayName = 'NumberSprite';
  var kDigitSrcY, kDigitSrcWidth, kDigitSrcHeight, kOpPlusSrcX, kOpMinusSrcX, kOpSrcY, kDigitSize, kRadix, ref$, WHITE, RED, PLUS, MINUS, NONE, prototype = NumberSprite.prototype, constructor = NumberSprite;
  kDigitSrcY = tileToPx(3.5);
  kDigitSrcWidth = tileToPx(0.5);
  kDigitSrcHeight = tileToPx(0.5);
  kOpPlusSrcX = tileToPx(2);
  kOpMinusSrcX = tileToPx(2.5);
  kOpSrcY = tileToPx(3);
  kDigitSize = units.kHalfTile;
  kRadix = 10;
  ref$ = std['enum'], WHITE = ref$[0], RED = ref$[1];
  ref$ = std['enum'], PLUS = ref$[0], MINUS = ref$[1], NONE = ref$[2];
  function NumberSprite(graphics, num, len, color, op){
    var srcY;
    this.num = num;
    this.len = len;
    this.color = color;
    this.op = op;
    this.digits = NumberSprite.seperateDigits(this.num);
    this.numDigits = this.digits.length;
    this.padding = this.len === 0
      ? 0
      : kDigitSize * (this.len - this.numDigits);
    srcY = this.color === WHITE
      ? kDigitSrcY
      : kDigitSrcY + gameToPx(kHalfTile);
    this.glyphs = this.digits.map(function(it){
      return new Sprite(graphics, 'data/16x16/TextBox.bmp', tileToPx(0.5 * it), srcY, kDigitSrcWidth, kDigitSrcHeight);
    });
    if (this.op === PLUS) {
      this.glyphs.push(new Sprite(graphics, 'data/16x16/TextBox.bmp', kOpPlusSrcX, kOpSrcY, kDigitSrcWidth, kDigitSrcHeight));
    }
    if (this.op === MINUS) {
      this.glyphs.push(new Sprite(graphics, 'data/16x16/TextBox.bmp', kOpMinusSrcX, kOpSrcY, kDigitSrcWidth, kDigitSrcHeight));
    }
    this.width = kHalfTile * this.glyphs.length;
    this.height = kHalfTile;
  }
  prototype.draw = function(graphics, x, y, centered){
    var i$, ref$, len$, i, glyph, offset, results$ = [];
    centered == null && (centered = false);
    if (centered) {
      for (i$ = 0, len$ = (ref$ = this.glyphs).length; i$ < len$; ++i$) {
        i = i$;
        glyph = ref$[i$];
        offset = kDigitSize * (this.digits.length - 1 - i);
        results$.push(glyph.draw(graphics, x + this.padding + offset - this.width / 2, y - this.height / 2));
      }
      return results$;
    } else {
      for (i$ = 0, len$ = (ref$ = this.glyphs).length; i$ < len$; ++i$) {
        i = i$;
        glyph = ref$[i$];
        offset = kDigitSize * (this.digits.length - 1 - i);
        results$.push(glyph.draw(graphics, x + this.padding + offset, y));
      }
      return results$;
    }
  };
  NumberSprite.seperateDigits = function(num){
    var digit, results$ = [];
    if (num === 0) {
      return [0];
    } else {
      while (num !== 0) {
        digit = num % kRadix;
        num = div(num, kRadix);
        results$.push(digit);
      }
      return results$;
    }
  };
  NumberSprite.HUDNumber = function(graphics, num, len){
    this.num = num;
    this.len = len;
    return new NumberSprite(graphics, this.num, this.len, WHITE, NONE);
  };
  NumberSprite.DamageNumber = function(graphics, num){
    this.num = num;
    return new NumberSprite(graphics, this.num, 0, RED, MINUS);
  };
  NumberSprite.ExperienceNumber = function(graphics, num){
    this.num = num;
    return new NumberSprite(graphics, this.num, 0, WHITE, PLUS);
  };
  return NumberSprite;
}());
out$.VaryingWidthSprite = VaryingWidthSprite = (function(superclass){
  var prototype = extend$((import$(VaryingWidthSprite, superclass).displayName = 'VaryingWidthSprite', VaryingWidthSprite), superclass).prototype, constructor = VaryingWidthSprite;
  function VaryingWidthSprite(graphics, path, sourceX, sourceY, initialWidth, height){
    this.initialWidth = initialWidth;
    this.height = height;
    VaryingWidthSprite.superclass.apply(this, arguments);
    this.width = this.initialWidth;
  }
  prototype.setWidth = function(width){
    return this.width = width;
  };
  return VaryingWidthSprite;
}(Sprite));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./units":"/Users/lakmeer/Projects/cave-story/src/units.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/std/index.ls":[function(require,module,exports){
var ref$, id, map, filter, any, div, log, info, objMap, flip, delay, round, floor, abs, max, min, sin, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('prelude-ls'), id = ref$.id, map = ref$.map, filter = ref$.filter, any = ref$.any, div = ref$.div;
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.info = info = function(){
  console.info.apply(console, arguments);
  return arguments[0];
};
out$.objMap = objMap = curry$(function(λ, o){
  var k, v, results$ = [];
  for (k in o) {
    v = o[k];
    results$.push(λ(k, v));
  }
  return results$;
});
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.round = round = Math.round;
out$.floor = floor = Math.floor;
out$.abs = abs = Math.abs;
out$.max = max = Math.max;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
ref$ = out$;
ref$.id = id;
ref$.any = any;
ref$.map = map;
ref$.filter = filter;
ref$.div = div;
ref$['enum'] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"prelude-ls":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/index.js"}],"/Users/lakmeer/Projects/cave-story/src/units.ls":[function(require,module,exports){
var std, config, kPi, kGameUnitsPerTile, kPixelScaleFactor, Game, Pixel, Tile, Degrees, FPS, MS, Velocity, Acceleration, HP, gameToPx, gameToTile, tileToGame, tileToPx, degToRad, pxToGame, kOneTile, kHalfTile, kTilePx, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
config = require('./config');
kPi = Math.PI;
kGameUnitsPerTile = 32;
kPixelScaleFactor = kGameUnitsPerTile / config.kGraphicsQuality;
out$.Game = Game = std.id;
out$.Pixel = Pixel = std.floor;
out$.Tile = Tile = function(){
  return std.abs(std.floor.apply(this, arguments));
};
out$.Degrees = Degrees = std.id;
out$.FPS = FPS = std.id;
out$.MS = MS = std.id;
out$.Velocity = Velocity = std.id;
out$.Acceleration = Acceleration = std.id;
out$.HP = HP = std.floor;
out$.gameToPx = gameToPx = function(){
  return Pixel((function(it){
    return it / kPixelScaleFactor;
  }).apply(this, arguments));
};
out$.gameToTile = gameToTile = function(){
  return Tile((function(it){
    return it / kGameUnitsPerTile;
  }).apply(this, arguments));
};
out$.tileToGame = tileToGame = (function(it){
  return it * kGameUnitsPerTile;
});
out$.tileToPx = tileToPx = function(){
  return gameToPx(tileToGame.apply(this, arguments));
};
out$.degToRad = degToRad = (function(it){
  return it * kPi / 180;
});
out$.pxToGame = pxToGame = (function(it){
  return it * kPixelScaleFactor;
});
out$.kOneTile = kOneTile = tileToGame(1);
out$.kHalfTile = kHalfTile = tileToGame(0.5);
out$.kTilePx = kTilePx = tileToPx(1);
},{"./config":"/Users/lakmeer/Projects/cave-story/src/config.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}]},{},["./src/index.ls"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi4vc3JjL2luZGV4LmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvY2F2ZS1zdG9yeS9ub2RlX21vZHVsZXMvcHJlbHVkZS1scy9saWIvRnVuYy5qcyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvbm9kZV9tb2R1bGVzL3ByZWx1ZGUtbHMvbGliL0xpc3QuanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9OdW0uanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9PYmouanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9TdHIuanMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L25vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL2xpYi9pbmRleC5qcyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL2JhY2tkcm9wLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvY2F2ZS1zdG9yeS9zcmMvY29uZmlnLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvY2F2ZS1zdG9yeS9zcmMvZmlyc3QtY2F2ZS1iYXQubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9nYW1lLmxzIiwiL1VzZXJzL2xha21lZXIvUHJvamVjdHMvY2F2ZS1zdG9yeS9zcmMvZ3JhcGhpY3MubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9oZWFsdGgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9pbnB1dC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL21hcC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3BsYXllci5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3JlYWRvdXQubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9yZWN0YW5nbGUubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwvZGVsYXkubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwvZXZlbnQtcXVldWUubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwvaW5kZXgubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwva2V5Ym9hcmQubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwvcmVjdC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3NkbC9zY3JlZW4ubHMiLCIvVXNlcnMvbGFrbWVlci9Qcm9qZWN0cy9jYXZlLXN0b3J5L3NyYy9zZGwvc3VyZmFjZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3NkbC90aW1lci5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3Nwcml0ZS5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3N0ZC9pbmRleC5scyIsIi9Vc2Vycy9sYWttZWVyL1Byb2plY3RzL2NhdmUtc3Rvcnkvc3JjL3VuaXRzLmxzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcHFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDblRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciByZWFkb3V0LCBHYW1lO1xucmVhZG91dCA9IHJlcXVpcmUoJy4vcmVhZG91dCcpO1xuR2FtZSA9IHJlcXVpcmUoJy4vZ2FtZScpO1xucmVhZG91dC5pbnN0YWxsKCk7XG5HYW1lLnN0YXJ0KCk7IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS4yLjBcbnZhciBhcHBseSwgY3VycnksIGZsaXAsIGZpeCwgb3ZlcjtcbmFwcGx5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIGxpc3Qpe1xuICByZXR1cm4gZi5hcHBseShudWxsLCBsaXN0KTtcbn0pO1xuY3VycnkgPSBmdW5jdGlvbihmKXtcbiAgcmV0dXJuIGN1cnJ5JChmKTtcbn07XG5mbGlwID0gY3VycnkkKGZ1bmN0aW9uKGYsIHgsIHkpe1xuICByZXR1cm4gZih5LCB4KTtcbn0pO1xuZml4ID0gZnVuY3Rpb24oZil7XG4gIHJldHVybiBmdW5jdGlvbihnKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBmKGcoZykpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfShmdW5jdGlvbihnKXtcbiAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBmKGcoZykpLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfSk7XG59O1xub3ZlciA9IGN1cnJ5JChmdW5jdGlvbihmLCBnLCB4LCB5KXtcbiAgcmV0dXJuIGYoZyh4KSwgZyh5KSk7XG59KTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBjdXJyeTogY3VycnksXG4gIGZsaXA6IGZsaXAsXG4gIGZpeDogZml4LFxuICBhcHBseTogYXBwbHksXG4gIG92ZXI6IG92ZXJcbn07XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjIuMFxudmFyIGVhY2gsIG1hcCwgY29tcGFjdCwgZmlsdGVyLCByZWplY3QsIHBhcnRpdGlvbiwgZmluZCwgaGVhZCwgZmlyc3QsIHRhaWwsIGxhc3QsIGluaXRpYWwsIGVtcHR5LCByZXZlcnNlLCB1bmlxdWUsIHVuaXF1ZUJ5LCBmb2xkLCBmb2xkbCwgZm9sZDEsIGZvbGRsMSwgZm9sZHIsIGZvbGRyMSwgdW5mb2xkciwgY29uY2F0LCBjb25jYXRNYXAsIGZsYXR0ZW4sIGRpZmZlcmVuY2UsIGludGVyc2VjdGlvbiwgdW5pb24sIGNvdW50QnksIGdyb3VwQnksIGFuZExpc3QsIG9yTGlzdCwgYW55LCBhbGwsIHNvcnQsIHNvcnRXaXRoLCBzb3J0QnksIHN1bSwgcHJvZHVjdCwgbWVhbiwgYXZlcmFnZSwgbWF4aW11bSwgbWluaW11bSwgbWF4aW11bUJ5LCBtaW5pbXVtQnksIHNjYW4sIHNjYW5sLCBzY2FuMSwgc2NhbmwxLCBzY2Fuciwgc2NhbnIxLCBzbGljZSwgdGFrZSwgZHJvcCwgc3BsaXRBdCwgdGFrZVdoaWxlLCBkcm9wV2hpbGUsIHNwYW4sIGJyZWFrTGlzdCwgemlwLCB6aXBXaXRoLCB6aXBBbGwsIHppcEFsbFdpdGgsIGF0LCBlbGVtSW5kZXgsIGVsZW1JbmRpY2VzLCBmaW5kSW5kZXgsIGZpbmRJbmRpY2VzLCB0b1N0cmluZyQgPSB7fS50b1N0cmluZywgc2xpY2UkID0gW10uc2xpY2U7XG5lYWNoID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBmKHgpO1xuICB9XG4gIHJldHVybiB4cztcbn0pO1xubWFwID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHRzJC5wdXNoKGYoeCkpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xuY29tcGFjdCA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoeCkge1xuICAgICAgcmVzdWx0cyQucHVzaCh4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbmZpbHRlciA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgeCwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xucmVqZWN0ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoIWYoeCkpIHtcbiAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xucGFydGl0aW9uID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHBhc3NlZCwgZmFpbGVkLCBpJCwgbGVuJCwgeDtcbiAgcGFzc2VkID0gW107XG4gIGZhaWxlZCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICAoZih4KSA/IHBhc3NlZCA6IGZhaWxlZCkucHVzaCh4KTtcbiAgfVxuICByZXR1cm4gW3Bhc3NlZCwgZmFpbGVkXTtcbn0pO1xuZmluZCA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgeDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGYoeCkpIHtcbiAgICAgIHJldHVybiB4O1xuICAgIH1cbiAgfVxufSk7XG5oZWFkID0gZmlyc3QgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4c1swXTtcbn07XG50YWlsID0gZnVuY3Rpb24oeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4geHMuc2xpY2UoMSk7XG59O1xubGFzdCA9IGZ1bmN0aW9uKHhzKXtcbiAgcmV0dXJuIHhzW3hzLmxlbmd0aCAtIDFdO1xufTtcbmluaXRpYWwgPSBmdW5jdGlvbih4cyl7XG4gIGlmICgheHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHJldHVybiB4cy5zbGljZSgwLCAtMSk7XG59O1xuZW1wdHkgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiAheHMubGVuZ3RoO1xufTtcbnJldmVyc2UgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5yZXZlcnNlKCk7XG59O1xudW5pcXVlID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgcmVzdWx0LCBpJCwgbGVuJCwgeDtcbiAgcmVzdWx0ID0gW107XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmICghaW4kKHgsIHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnVuaXF1ZUJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHNlZW4sIGkkLCBsZW4kLCB4LCB2YWwsIHJlc3VsdHMkID0gW107XG4gIHNlZW4gPSBbXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgdmFsID0gZih4KTtcbiAgICBpZiAoaW4kKHZhbCwgc2VlbikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBzZWVuLnB1c2godmFsKTtcbiAgICByZXN1bHRzJC5wdXNoKHgpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xuZm9sZCA9IGZvbGRsID0gY3VycnkkKGZ1bmN0aW9uKGYsIG1lbW8sIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBtZW1vID0gZihtZW1vLCB4KTtcbiAgfVxuICByZXR1cm4gbWVtbztcbn0pO1xuZm9sZDEgPSBmb2xkbDEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICByZXR1cm4gZm9sZChmLCB4c1swXSwgeHMuc2xpY2UoMSkpO1xufSk7XG5mb2xkciA9IGN1cnJ5JChmdW5jdGlvbihmLCBtZW1vLCB4cyl7XG4gIHZhciBpJCwgeDtcbiAgZm9yIChpJCA9IHhzLmxlbmd0aCAtIDE7IGkkID49IDA7IC0taSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIG1lbW8gPSBmKHgsIG1lbW8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufSk7XG5mb2xkcjEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICByZXR1cm4gZm9sZHIoZiwgeHNbeHMubGVuZ3RoIC0gMV0sIHhzLnNsaWNlKDAsIC0xKSk7XG59KTtcbnVuZm9sZHIgPSBjdXJyeSQoZnVuY3Rpb24oZiwgYil7XG4gIHZhciByZXN1bHQsIHgsIHRoYXQ7XG4gIHJlc3VsdCA9IFtdO1xuICB4ID0gYjtcbiAgd2hpbGUgKCh0aGF0ID0gZih4KSkgIT0gbnVsbCkge1xuICAgIHJlc3VsdC5wdXNoKHRoYXRbMF0pO1xuICAgIHggPSB0aGF0WzFdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59KTtcbmNvbmNhdCA9IGZ1bmN0aW9uKHhzcyl7XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIHhzcyk7XG59O1xuY29uY2F0TWFwID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHg7XG4gIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIChmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB4ID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKGYoeCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH0oKSkpO1xufSk7XG5mbGF0dGVuID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgeDtcbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB4cykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHggPSByZWYkW2kkXTtcbiAgICAgIGlmICh0b1N0cmluZyQuY2FsbCh4KS5zbGljZSg4LCAtMSkgPT09ICdBcnJheScpIHtcbiAgICAgICAgcmVzdWx0cyQucHVzaChmbGF0dGVuKHgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMkLnB1c2goeCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfSgpKSk7XG59O1xuZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIHlzcywgcmVzdWx0cywgaSQsIGxlbiQsIHgsIGokLCBsZW4xJCwgeXM7XG4gIHlzcyA9IHNsaWNlJC5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHJlc3VsdHMgPSBbXTtcbiAgb3V0ZXI6IGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHlzcy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgIHlzID0geXNzW2okXTtcbiAgICAgIGlmIChpbiQoeCwgeXMpKSB7XG4gICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRzLnB1c2goeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuaW50ZXJzZWN0aW9uID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgeXNzLCByZXN1bHRzLCBpJCwgbGVuJCwgeCwgaiQsIGxlbjEkLCB5cztcbiAgeXNzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgcmVzdWx0cyA9IFtdO1xuICBvdXRlcjogZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgZm9yIChqJCA9IDAsIGxlbjEkID0geXNzLmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgeXMgPSB5c3NbaiRdO1xuICAgICAgaWYgKCFpbiQoeCwgeXMpKSB7XG4gICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHRzLnB1c2goeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xudW5pb24gPSBmdW5jdGlvbigpe1xuICB2YXIgeHNzLCByZXN1bHRzLCBpJCwgbGVuJCwgeHMsIGokLCBsZW4xJCwgeDtcbiAgeHNzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzKTtcbiAgcmVzdWx0cyA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHhzID0geHNzW2kkXTtcbiAgICBmb3IgKGokID0gMCwgbGVuMSQgPSB4cy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgIHggPSB4c1tqJF07XG4gICAgICBpZiAoIWluJCh4LCByZXN1bHRzKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcbmNvdW50QnkgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICB2YXIgcmVzdWx0cywgaSQsIGxlbiQsIHgsIGtleTtcbiAgcmVzdWx0cyA9IHt9O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBrZXkgPSBmKHgpO1xuICAgIGlmIChrZXkgaW4gcmVzdWx0cykge1xuICAgICAgcmVzdWx0c1trZXldICs9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHNba2V5XSA9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufSk7XG5ncm91cEJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIHJlc3VsdHMsIGkkLCBsZW4kLCB4LCBrZXk7XG4gIHJlc3VsdHMgPSB7fTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAga2V5ID0gZih4KTtcbiAgICBpZiAoa2V5IGluIHJlc3VsdHMpIHtcbiAgICAgIHJlc3VsdHNba2V5XS5wdXNoKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzW2tleV0gPSBbeF07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufSk7XG5hbmRMaXN0ID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgaSQsIGxlbiQsIHg7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmICgheCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5vckxpc3QgPSBmdW5jdGlvbih4cyl7XG4gIHZhciBpJCwgbGVuJCwgeDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKHgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuYW55ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoZih4KSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0pO1xuYWxsID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoIWYoeCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59KTtcbnNvcnQgPSBmdW5jdGlvbih4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5zb3J0KGZ1bmN0aW9uKHgsIHkpe1xuICAgIGlmICh4ID4geSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmICh4IDwgeSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0pO1xufTtcbnNvcnRXaXRoID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgcmV0dXJuIHhzLmNvbmNhdCgpLnNvcnQoZik7XG59KTtcbnNvcnRCeSA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHJldHVybiB4cy5jb25jYXQoKS5zb3J0KGZ1bmN0aW9uKHgsIHkpe1xuICAgIGlmIChmKHgpID4gZih5KSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChmKHgpIDwgZih5KSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH0pO1xufSk7XG5zdW0gPSBmdW5jdGlvbih4cyl7XG4gIHZhciByZXN1bHQsIGkkLCBsZW4kLCB4O1xuICByZXN1bHQgPSAwO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHQgKz0geDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbnByb2R1Y3QgPSBmdW5jdGlvbih4cyl7XG4gIHZhciByZXN1bHQsIGkkLCBsZW4kLCB4O1xuICByZXN1bHQgPSAxO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHhzW2kkXTtcbiAgICByZXN1bHQgKj0geDtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbm1lYW4gPSBhdmVyYWdlID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgc3VtLCBpJCwgbGVuJCwgeDtcbiAgc3VtID0gMDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSB4c1tpJF07XG4gICAgc3VtICs9IHg7XG4gIH1cbiAgcmV0dXJuIHN1bSAvIHhzLmxlbmd0aDtcbn07XG5tYXhpbXVtID0gZnVuY3Rpb24oeHMpe1xuICB2YXIgbWF4LCBpJCwgcmVmJCwgbGVuJCwgeDtcbiAgbWF4ID0geHNbMF07XG4gIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB4cy5zbGljZSgxKSkubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0gcmVmJFtpJF07XG4gICAgaWYgKHggPiBtYXgpIHtcbiAgICAgIG1heCA9IHg7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59O1xubWluaW11bSA9IGZ1bmN0aW9uKHhzKXtcbiAgdmFyIG1pbiwgaSQsIHJlZiQsIGxlbiQsIHg7XG4gIG1pbiA9IHhzWzBdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMuc2xpY2UoMSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHJlZiRbaSRdO1xuICAgIGlmICh4IDwgbWluKSB7XG4gICAgICBtaW4gPSB4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufTtcbm1heGltdW1CeSA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBtYXgsIGkkLCByZWYkLCBsZW4kLCB4O1xuICBtYXggPSB4c1swXTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHhzLnNsaWNlKDEpKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHggPSByZWYkW2kkXTtcbiAgICBpZiAoZih4KSA+IGYobWF4KSkge1xuICAgICAgbWF4ID0geDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heDtcbn0pO1xubWluaW11bUJ5ID0gY3VycnkkKGZ1bmN0aW9uKGYsIHhzKXtcbiAgdmFyIG1pbiwgaSQsIHJlZiQsIGxlbiQsIHg7XG4gIG1pbiA9IHhzWzBdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMuc2xpY2UoMSkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeCA9IHJlZiRbaSRdO1xuICAgIGlmIChmKHgpIDwgZihtaW4pKSB7XG4gICAgICBtaW4gPSB4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWluO1xufSk7XG5zY2FuID0gc2NhbmwgPSBjdXJyeSQoZnVuY3Rpb24oZiwgbWVtbywgeHMpe1xuICB2YXIgbGFzdCwgeDtcbiAgbGFzdCA9IG1lbW87XG4gIHJldHVybiBbbWVtb10uY29uY2F0KChmdW5jdGlvbigpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0geHMpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB4ID0gcmVmJFtpJF07XG4gICAgICByZXN1bHRzJC5wdXNoKGxhc3QgPSBmKGxhc3QsIHgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHMkO1xuICB9KCkpKTtcbn0pO1xuc2NhbjEgPSBzY2FubDEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICByZXR1cm4gc2NhbihmLCB4c1swXSwgeHMuc2xpY2UoMSkpO1xufSk7XG5zY2FuciA9IGN1cnJ5JChmdW5jdGlvbihmLCBtZW1vLCB4cyl7XG4gIHhzID0geHMuY29uY2F0KCkucmV2ZXJzZSgpO1xuICByZXR1cm4gc2NhbihmLCBtZW1vLCB4cykucmV2ZXJzZSgpO1xufSk7XG5zY2FucjEgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICBpZiAoIXhzLmxlbmd0aCkge1xuICAgIHJldHVybjtcbiAgfVxuICB4cyA9IHhzLmNvbmNhdCgpLnJldmVyc2UoKTtcbiAgcmV0dXJuIHNjYW4oZiwgeHNbMF0sIHhzLnNsaWNlKDEpKS5yZXZlcnNlKCk7XG59KTtcbnNsaWNlID0gY3VycnkkKGZ1bmN0aW9uKHgsIHksIHhzKXtcbiAgcmV0dXJuIHhzLnNsaWNlKHgsIHkpO1xufSk7XG50YWtlID0gY3VycnkkKGZ1bmN0aW9uKG4sIHhzKXtcbiAgaWYgKG4gPD0gMCkge1xuICAgIHJldHVybiB4cy5zbGljZSgwLCAwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geHMuc2xpY2UoMCwgbik7XG4gIH1cbn0pO1xuZHJvcCA9IGN1cnJ5JChmdW5jdGlvbihuLCB4cyl7XG4gIGlmIChuIDw9IDApIHtcbiAgICByZXR1cm4geHM7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHhzLnNsaWNlKG4pO1xuICB9XG59KTtcbnNwbGl0QXQgPSBjdXJyeSQoZnVuY3Rpb24obiwgeHMpe1xuICByZXR1cm4gW3Rha2UobiwgeHMpLCBkcm9wKG4sIHhzKV07XG59KTtcbnRha2VXaGlsZSA9IGN1cnJ5JChmdW5jdGlvbihwLCB4cyl7XG4gIHZhciBsZW4sIGk7XG4gIGxlbiA9IHhzLmxlbmd0aDtcbiAgaWYgKCFsZW4pIHtcbiAgICByZXR1cm4geHM7XG4gIH1cbiAgaSA9IDA7XG4gIHdoaWxlIChpIDwgbGVuICYmIHAoeHNbaV0pKSB7XG4gICAgaSArPSAxO1xuICB9XG4gIHJldHVybiB4cy5zbGljZSgwLCBpKTtcbn0pO1xuZHJvcFdoaWxlID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgdmFyIGxlbiwgaTtcbiAgbGVuID0geHMubGVuZ3RoO1xuICBpZiAoIWxlbikge1xuICAgIHJldHVybiB4cztcbiAgfVxuICBpID0gMDtcbiAgd2hpbGUgKGkgPCBsZW4gJiYgcCh4c1tpXSkpIHtcbiAgICBpICs9IDE7XG4gIH1cbiAgcmV0dXJuIHhzLnNsaWNlKGkpO1xufSk7XG5zcGFuID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgcmV0dXJuIFt0YWtlV2hpbGUocCwgeHMpLCBkcm9wV2hpbGUocCwgeHMpXTtcbn0pO1xuYnJlYWtMaXN0ID0gY3VycnkkKGZ1bmN0aW9uKHAsIHhzKXtcbiAgcmV0dXJuIHNwYW4oZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbm90JChwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9LCB4cyk7XG59KTtcbnppcCA9IGN1cnJ5JChmdW5jdGlvbih4cywgeXMpe1xuICB2YXIgcmVzdWx0LCBsZW4sIGkkLCBsZW4kLCBpLCB4O1xuICByZXN1bHQgPSBbXTtcbiAgbGVuID0geXMubGVuZ3RoO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKGkgPT09IGxlbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKFt4LCB5c1tpXV0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59KTtcbnppcFdpdGggPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMsIHlzKXtcbiAgdmFyIHJlc3VsdCwgbGVuLCBpJCwgbGVuJCwgaSwgeDtcbiAgcmVzdWx0ID0gW107XG4gIGxlbiA9IHlzLmxlbmd0aDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmIChpID09PSBsZW4pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXN1bHQucHVzaChmKHgsIHlzW2ldKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuemlwQWxsID0gZnVuY3Rpb24oKXtcbiAgdmFyIHhzcywgbWluTGVuZ3RoLCBpJCwgbGVuJCwgeHMsIHJlZiQsIGksIGxyZXN1bHQkLCBqJCwgcmVzdWx0cyQgPSBbXTtcbiAgeHNzID0gc2xpY2UkLmNhbGwoYXJndW1lbnRzKTtcbiAgbWluTGVuZ3RoID0gOWU5O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzcy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIHhzID0geHNzW2kkXTtcbiAgICBtaW5MZW5ndGggPD0gKHJlZiQgPSB4cy5sZW5ndGgpIHx8IChtaW5MZW5ndGggPSByZWYkKTtcbiAgfVxuICBmb3IgKGkkID0gMDsgaSQgPCBtaW5MZW5ndGg7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAgbHJlc3VsdCQgPSBbXTtcbiAgICBmb3IgKGokID0gMCwgbGVuJCA9IHhzcy5sZW5ndGg7IGokIDwgbGVuJDsgKytqJCkge1xuICAgICAgeHMgPSB4c3NbaiRdO1xuICAgICAgbHJlc3VsdCQucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn07XG56aXBBbGxXaXRoID0gZnVuY3Rpb24oZil7XG4gIHZhciB4c3MsIG1pbkxlbmd0aCwgaSQsIGxlbiQsIHhzLCByZWYkLCBpLCByZXN1bHRzJCA9IFtdO1xuICB4c3MgPSBzbGljZSQuY2FsbChhcmd1bWVudHMsIDEpO1xuICBtaW5MZW5ndGggPSA5ZTk7XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHNzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgeHMgPSB4c3NbaSRdO1xuICAgIG1pbkxlbmd0aCA8PSAocmVmJCA9IHhzLmxlbmd0aCkgfHwgKG1pbkxlbmd0aCA9IHJlZiQpO1xuICB9XG4gIGZvciAoaSQgPSAwOyBpJCA8IG1pbkxlbmd0aDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICByZXN1bHRzJC5wdXNoKGYuYXBwbHkobnVsbCwgKGZuJCgpKSkpO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbiAgZnVuY3Rpb24gZm4kKCl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB4c3MpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB4cyA9IHJlZiRbaSRdO1xuICAgICAgcmVzdWx0cyQucHVzaCh4c1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfVxufTtcbmF0ID0gY3VycnkkKGZ1bmN0aW9uKG4sIHhzKXtcbiAgaWYgKG4gPCAwKSB7XG4gICAgcmV0dXJuIHhzW3hzLmxlbmd0aCArIG5dO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4c1tuXTtcbiAgfVxufSk7XG5lbGVtSW5kZXggPSBjdXJyeSQoZnVuY3Rpb24oZWwsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCBpLCB4O1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKHggPT09IGVsKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn0pO1xuZWxlbUluZGljZXMgPSBjdXJyeSQoZnVuY3Rpb24oZWwsIHhzKXtcbiAgdmFyIGkkLCBsZW4kLCBpLCB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMCwgbGVuJCA9IHhzLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgaSA9IGkkO1xuICAgIHggPSB4c1tpJF07XG4gICAgaWYgKHggPT09IGVsKSB7XG4gICAgICByZXN1bHRzJC5wdXNoKGkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KTtcbmZpbmRJbmRleCA9IGN1cnJ5JChmdW5jdGlvbihmLCB4cyl7XG4gIHZhciBpJCwgbGVuJCwgaSwgeDtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSB4cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICB4ID0geHNbaSRdO1xuICAgIGlmIChmKHgpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbn0pO1xuZmluZEluZGljZXMgPSBjdXJyeSQoZnVuY3Rpb24oZiwgeHMpe1xuICB2YXIgaSQsIGxlbiQsIGksIHgsIHJlc3VsdHMkID0gW107XG4gIGZvciAoaSQgPSAwLCBsZW4kID0geHMubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICBpID0gaSQ7XG4gICAgeCA9IHhzW2kkXTtcbiAgICBpZiAoZih4KSkge1xuICAgICAgcmVzdWx0cyQucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWFjaDogZWFjaCxcbiAgbWFwOiBtYXAsXG4gIGZpbHRlcjogZmlsdGVyLFxuICBjb21wYWN0OiBjb21wYWN0LFxuICByZWplY3Q6IHJlamVjdCxcbiAgcGFydGl0aW9uOiBwYXJ0aXRpb24sXG4gIGZpbmQ6IGZpbmQsXG4gIGhlYWQ6IGhlYWQsXG4gIGZpcnN0OiBmaXJzdCxcbiAgdGFpbDogdGFpbCxcbiAgbGFzdDogbGFzdCxcbiAgaW5pdGlhbDogaW5pdGlhbCxcbiAgZW1wdHk6IGVtcHR5LFxuICByZXZlcnNlOiByZXZlcnNlLFxuICBkaWZmZXJlbmNlOiBkaWZmZXJlbmNlLFxuICBpbnRlcnNlY3Rpb246IGludGVyc2VjdGlvbixcbiAgdW5pb246IHVuaW9uLFxuICBjb3VudEJ5OiBjb3VudEJ5LFxuICBncm91cEJ5OiBncm91cEJ5LFxuICBmb2xkOiBmb2xkLFxuICBmb2xkMTogZm9sZDEsXG4gIGZvbGRsOiBmb2xkbCxcbiAgZm9sZGwxOiBmb2xkbDEsXG4gIGZvbGRyOiBmb2xkcixcbiAgZm9sZHIxOiBmb2xkcjEsXG4gIHVuZm9sZHI6IHVuZm9sZHIsXG4gIGFuZExpc3Q6IGFuZExpc3QsXG4gIG9yTGlzdDogb3JMaXN0LFxuICBhbnk6IGFueSxcbiAgYWxsOiBhbGwsXG4gIHVuaXF1ZTogdW5pcXVlLFxuICB1bmlxdWVCeTogdW5pcXVlQnksXG4gIHNvcnQ6IHNvcnQsXG4gIHNvcnRXaXRoOiBzb3J0V2l0aCxcbiAgc29ydEJ5OiBzb3J0QnksXG4gIHN1bTogc3VtLFxuICBwcm9kdWN0OiBwcm9kdWN0LFxuICBtZWFuOiBtZWFuLFxuICBhdmVyYWdlOiBhdmVyYWdlLFxuICBjb25jYXQ6IGNvbmNhdCxcbiAgY29uY2F0TWFwOiBjb25jYXRNYXAsXG4gIGZsYXR0ZW46IGZsYXR0ZW4sXG4gIG1heGltdW06IG1heGltdW0sXG4gIG1pbmltdW06IG1pbmltdW0sXG4gIG1heGltdW1CeTogbWF4aW11bUJ5LFxuICBtaW5pbXVtQnk6IG1pbmltdW1CeSxcbiAgc2Nhbjogc2NhbixcbiAgc2NhbjE6IHNjYW4xLFxuICBzY2FubDogc2NhbmwsXG4gIHNjYW5sMTogc2NhbmwxLFxuICBzY2Fucjogc2NhbnIsXG4gIHNjYW5yMTogc2NhbnIxLFxuICBzbGljZTogc2xpY2UsXG4gIHRha2U6IHRha2UsXG4gIGRyb3A6IGRyb3AsXG4gIHNwbGl0QXQ6IHNwbGl0QXQsXG4gIHRha2VXaGlsZTogdGFrZVdoaWxlLFxuICBkcm9wV2hpbGU6IGRyb3BXaGlsZSxcbiAgc3Bhbjogc3BhbixcbiAgYnJlYWtMaXN0OiBicmVha0xpc3QsXG4gIHppcDogemlwLFxuICB6aXBXaXRoOiB6aXBXaXRoLFxuICB6aXBBbGw6IHppcEFsbCxcbiAgemlwQWxsV2l0aDogemlwQWxsV2l0aCxcbiAgYXQ6IGF0LFxuICBlbGVtSW5kZXg6IGVsZW1JbmRleCxcbiAgZWxlbUluZGljZXM6IGVsZW1JbmRpY2VzLFxuICBmaW5kSW5kZXg6IGZpbmRJbmRleCxcbiAgZmluZEluZGljZXM6IGZpbmRJbmRpY2VzXG59O1xuZnVuY3Rpb24gY3VycnkkKGYsIGJvdW5kKXtcbiAgdmFyIGNvbnRleHQsXG4gIF9jdXJyeSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gZi5sZW5ndGggPiAxID8gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmdzID8gYXJncy5jb25jYXQoKSA6IFtdO1xuICAgICAgY29udGV4dCA9IGJvdW5kID8gY29udGV4dCB8fCB0aGlzIDogdGhpcztcbiAgICAgIHJldHVybiBwYXJhbXMucHVzaC5hcHBseShwYXJhbXMsIGFyZ3VtZW50cykgPFxuICAgICAgICAgIGYubGVuZ3RoICYmIGFyZ3VtZW50cy5sZW5ndGggP1xuICAgICAgICBfY3VycnkuY2FsbChjb250ZXh0LCBwYXJhbXMpIDogZi5hcHBseShjb250ZXh0LCBwYXJhbXMpO1xuICAgIH0gOiBmO1xuICB9O1xuICByZXR1cm4gX2N1cnJ5KCk7XG59XG5mdW5jdGlvbiBpbiQoeCwgeHMpe1xuICB2YXIgaSA9IC0xLCBsID0geHMubGVuZ3RoID4+PiAwO1xuICB3aGlsZSAoKytpIDwgbCkgaWYgKHggPT09IHhzW2ldKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gbm90JCh4KXsgcmV0dXJuICF4OyB9IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS4yLjBcbnZhciBtYXgsIG1pbiwgbmVnYXRlLCBhYnMsIHNpZ251bSwgcXVvdCwgcmVtLCBkaXYsIG1vZCwgcmVjaXAsIHBpLCB0YXUsIGV4cCwgc3FydCwgbG4sIHBvdywgc2luLCB0YW4sIGNvcywgYXNpbiwgYWNvcywgYXRhbiwgYXRhbjIsIHRydW5jYXRlLCByb3VuZCwgY2VpbGluZywgZmxvb3IsIGlzSXROYU4sIGV2ZW4sIG9kZCwgZ2NkLCBsY207XG5tYXggPSBjdXJyeSQoZnVuY3Rpb24oeCQsIHkkKXtcbiAgcmV0dXJuIHgkID4geSQgPyB4JCA6IHkkO1xufSk7XG5taW4gPSBjdXJyeSQoZnVuY3Rpb24oeCQsIHkkKXtcbiAgcmV0dXJuIHgkIDwgeSQgPyB4JCA6IHkkO1xufSk7XG5uZWdhdGUgPSBmdW5jdGlvbih4KXtcbiAgcmV0dXJuIC14O1xufTtcbmFicyA9IE1hdGguYWJzO1xuc2lnbnVtID0gZnVuY3Rpb24oeCl7XG4gIGlmICh4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmICh4ID4gMCkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xucXVvdCA9IGN1cnJ5JChmdW5jdGlvbih4LCB5KXtcbiAgcmV0dXJuIH5+KHggLyB5KTtcbn0pO1xucmVtID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHJldHVybiB4JCAlIHkkO1xufSk7XG5kaXYgPSBjdXJyeSQoZnVuY3Rpb24oeCwgeSl7XG4gIHJldHVybiBNYXRoLmZsb29yKHggLyB5KTtcbn0pO1xubW9kID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHZhciByZWYkO1xuICByZXR1cm4gKCh4JCkgJSAocmVmJCA9IHkkKSArIHJlZiQpICUgcmVmJDtcbn0pO1xucmVjaXAgPSAoZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gMSAvIGl0O1xufSk7XG5waSA9IE1hdGguUEk7XG50YXUgPSBwaSAqIDI7XG5leHAgPSBNYXRoLmV4cDtcbnNxcnQgPSBNYXRoLnNxcnQ7XG5sbiA9IE1hdGgubG9nO1xucG93ID0gY3VycnkkKGZ1bmN0aW9uKHgkLCB5JCl7XG4gIHJldHVybiBNYXRoLnBvdyh4JCwgeSQpO1xufSk7XG5zaW4gPSBNYXRoLnNpbjtcbnRhbiA9IE1hdGgudGFuO1xuY29zID0gTWF0aC5jb3M7XG5hc2luID0gTWF0aC5hc2luO1xuYWNvcyA9IE1hdGguYWNvcztcbmF0YW4gPSBNYXRoLmF0YW47XG5hdGFuMiA9IGN1cnJ5JChmdW5jdGlvbih4LCB5KXtcbiAgcmV0dXJuIE1hdGguYXRhbjIoeCwgeSk7XG59KTtcbnRydW5jYXRlID0gZnVuY3Rpb24oeCl7XG4gIHJldHVybiB+fng7XG59O1xucm91bmQgPSBNYXRoLnJvdW5kO1xuY2VpbGluZyA9IE1hdGguY2VpbDtcbmZsb29yID0gTWF0aC5mbG9vcjtcbmlzSXROYU4gPSBmdW5jdGlvbih4KXtcbiAgcmV0dXJuIHggIT09IHg7XG59O1xuZXZlbiA9IGZ1bmN0aW9uKHgpe1xuICByZXR1cm4geCAlIDIgPT09IDA7XG59O1xub2RkID0gZnVuY3Rpb24oeCl7XG4gIHJldHVybiB4ICUgMiAhPT0gMDtcbn07XG5nY2QgPSBjdXJyeSQoZnVuY3Rpb24oeCwgeSl7XG4gIHZhciB6O1xuICB4ID0gTWF0aC5hYnMoeCk7XG4gIHkgPSBNYXRoLmFicyh5KTtcbiAgd2hpbGUgKHkgIT09IDApIHtcbiAgICB6ID0geCAlIHk7XG4gICAgeCA9IHk7XG4gICAgeSA9IHo7XG4gIH1cbiAgcmV0dXJuIHg7XG59KTtcbmxjbSA9IGN1cnJ5JChmdW5jdGlvbih4LCB5KXtcbiAgcmV0dXJuIE1hdGguYWJzKE1hdGguZmxvb3IoeCAvIGdjZCh4LCB5KSAqIHkpKTtcbn0pO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1heDogbWF4LFxuICBtaW46IG1pbixcbiAgbmVnYXRlOiBuZWdhdGUsXG4gIGFiczogYWJzLFxuICBzaWdudW06IHNpZ251bSxcbiAgcXVvdDogcXVvdCxcbiAgcmVtOiByZW0sXG4gIGRpdjogZGl2LFxuICBtb2Q6IG1vZCxcbiAgcmVjaXA6IHJlY2lwLFxuICBwaTogcGksXG4gIHRhdTogdGF1LFxuICBleHA6IGV4cCxcbiAgc3FydDogc3FydCxcbiAgbG46IGxuLFxuICBwb3c6IHBvdyxcbiAgc2luOiBzaW4sXG4gIHRhbjogdGFuLFxuICBjb3M6IGNvcyxcbiAgYWNvczogYWNvcyxcbiAgYXNpbjogYXNpbixcbiAgYXRhbjogYXRhbixcbiAgYXRhbjI6IGF0YW4yLFxuICB0cnVuY2F0ZTogdHJ1bmNhdGUsXG4gIHJvdW5kOiByb3VuZCxcbiAgY2VpbGluZzogY2VpbGluZyxcbiAgZmxvb3I6IGZsb29yLFxuICBpc0l0TmFOOiBpc0l0TmFOLFxuICBldmVuOiBldmVuLFxuICBvZGQ6IG9kZCxcbiAgZ2NkOiBnY2QsXG4gIGxjbTogbGNtXG59O1xuZnVuY3Rpb24gY3VycnkkKGYsIGJvdW5kKXtcbiAgdmFyIGNvbnRleHQsXG4gIF9jdXJyeSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gZi5sZW5ndGggPiAxID8gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmdzID8gYXJncy5jb25jYXQoKSA6IFtdO1xuICAgICAgY29udGV4dCA9IGJvdW5kID8gY29udGV4dCB8fCB0aGlzIDogdGhpcztcbiAgICAgIHJldHVybiBwYXJhbXMucHVzaC5hcHBseShwYXJhbXMsIGFyZ3VtZW50cykgPFxuICAgICAgICAgIGYubGVuZ3RoICYmIGFyZ3VtZW50cy5sZW5ndGggP1xuICAgICAgICBfY3VycnkuY2FsbChjb250ZXh0LCBwYXJhbXMpIDogZi5hcHBseShjb250ZXh0LCBwYXJhbXMpO1xuICAgIH0gOiBmO1xuICB9O1xuICByZXR1cm4gX2N1cnJ5KCk7XG59IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS4yLjBcbnZhciB2YWx1ZXMsIGtleXMsIHBhaXJzVG9PYmosIG9ialRvUGFpcnMsIGxpc3RzVG9PYmosIG9ialRvTGlzdHMsIGVtcHR5LCBlYWNoLCBtYXAsIGNvbXBhY3QsIGZpbHRlciwgcmVqZWN0LCBwYXJ0aXRpb24sIGZpbmQ7XG52YWx1ZXMgPSBmdW5jdGlvbihvYmplY3Qpe1xuICB2YXIgaSQsIHgsIHJlc3VsdHMkID0gW107XG4gIGZvciAoaSQgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtpJF07XG4gICAgcmVzdWx0cyQucHVzaCh4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59O1xua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciB4LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKHggaW4gb2JqZWN0KSB7XG4gICAgcmVzdWx0cyQucHVzaCh4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59O1xucGFpcnNUb09iaiA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciBpJCwgbGVuJCwgeCwgcmVzdWx0cyQgPSB7fTtcbiAgZm9yIChpJCA9IDAsIGxlbiQgPSBvYmplY3QubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICB4ID0gb2JqZWN0W2kkXTtcbiAgICByZXN1bHRzJFt4WzBdXSA9IHhbMV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbm9ialRvUGFpcnMgPSBmdW5jdGlvbihvYmplY3Qpe1xuICB2YXIga2V5LCB2YWx1ZSwgcmVzdWx0cyQgPSBbXTtcbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICByZXN1bHRzJC5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbmxpc3RzVG9PYmogPSBjdXJyeSQoZnVuY3Rpb24oa2V5cywgdmFsdWVzKXtcbiAgdmFyIGkkLCBsZW4kLCBpLCBrZXksIHJlc3VsdHMkID0ge307XG4gIGZvciAoaSQgPSAwLCBsZW4kID0ga2V5cy5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgIGkgPSBpJDtcbiAgICBrZXkgPSBrZXlzW2kkXTtcbiAgICByZXN1bHRzJFtrZXldID0gdmFsdWVzW2ldO1xuICB9XG4gIHJldHVybiByZXN1bHRzJDtcbn0pO1xub2JqVG9MaXN0cyA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciBrZXlzLCB2YWx1ZXMsIGtleSwgdmFsdWU7XG4gIGtleXMgPSBbXTtcbiAgdmFsdWVzID0gW107XG4gIGZvciAoa2V5IGluIG9iamVjdCkge1xuICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICB9XG4gIHJldHVybiBba2V5cywgdmFsdWVzXTtcbn07XG5lbXB0eSA9IGZ1bmN0aW9uKG9iamVjdCl7XG4gIHZhciB4O1xuICBmb3IgKHggaW4gb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbmVhY2ggPSBjdXJyeSQoZnVuY3Rpb24oZiwgb2JqZWN0KXtcbiAgdmFyIGkkLCB4O1xuICBmb3IgKGkkIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3RbaSRdO1xuICAgIGYoeCk7XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn0pO1xubWFwID0gY3VycnkkKGZ1bmN0aW9uKGYsIG9iamVjdCl7XG4gIHZhciBrLCB4LCByZXN1bHRzJCA9IHt9O1xuICBmb3IgKGsgaW4gb2JqZWN0KSB7XG4gICAgeCA9IG9iamVjdFtrXTtcbiAgICByZXN1bHRzJFtrXSA9IGYoeCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5jb21wYWN0ID0gZnVuY3Rpb24ob2JqZWN0KXtcbiAgdmFyIGssIHgsIHJlc3VsdHMkID0ge307XG4gIGZvciAoayBpbiBvYmplY3QpIHtcbiAgICB4ID0gb2JqZWN0W2tdO1xuaWYgKHgpIHtcbiAgICAgIHJlc3VsdHMkW2tdID0geDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcbmZpbHRlciA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgaywgeCwgcmVzdWx0cyQgPSB7fTtcbiAgZm9yIChrIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3Rba107XG5pZiAoZih4KSkge1xuICAgICAgcmVzdWx0cyRba10gPSB4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KTtcbnJlamVjdCA9IGN1cnJ5JChmdW5jdGlvbihmLCBvYmplY3Qpe1xuICB2YXIgaywgeCwgcmVzdWx0cyQgPSB7fTtcbiAgZm9yIChrIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3Rba107XG5pZiAoIWYoeCkpIHtcbiAgICAgIHJlc3VsdHMkW2tdID0geDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5wYXJ0aXRpb24gPSBjdXJyeSQoZnVuY3Rpb24oZiwgb2JqZWN0KXtcbiAgdmFyIHBhc3NlZCwgZmFpbGVkLCBrLCB4O1xuICBwYXNzZWQgPSB7fTtcbiAgZmFpbGVkID0ge307XG4gIGZvciAoayBpbiBvYmplY3QpIHtcbiAgICB4ID0gb2JqZWN0W2tdO1xuICAgIChmKHgpID8gcGFzc2VkIDogZmFpbGVkKVtrXSA9IHg7XG4gIH1cbiAgcmV0dXJuIFtwYXNzZWQsIGZhaWxlZF07XG59KTtcbmZpbmQgPSBjdXJyeSQoZnVuY3Rpb24oZiwgb2JqZWN0KXtcbiAgdmFyIGkkLCB4O1xuICBmb3IgKGkkIGluIG9iamVjdCkge1xuICAgIHggPSBvYmplY3RbaSRdO1xuICAgIGlmIChmKHgpKSB7XG4gICAgICByZXR1cm4geDtcbiAgICB9XG4gIH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbHVlczogdmFsdWVzLFxuICBrZXlzOiBrZXlzLFxuICBwYWlyc1RvT2JqOiBwYWlyc1RvT2JqLFxuICBvYmpUb1BhaXJzOiBvYmpUb1BhaXJzLFxuICBsaXN0c1RvT2JqOiBsaXN0c1RvT2JqLFxuICBvYmpUb0xpc3RzOiBvYmpUb0xpc3RzLFxuICBlbXB0eTogZW1wdHksXG4gIGVhY2g6IGVhY2gsXG4gIG1hcDogbWFwLFxuICBmaWx0ZXI6IGZpbHRlcixcbiAgY29tcGFjdDogY29tcGFjdCxcbiAgcmVqZWN0OiByZWplY3QsXG4gIHBhcnRpdGlvbjogcGFydGl0aW9uLFxuICBmaW5kOiBmaW5kXG59O1xuZnVuY3Rpb24gY3VycnkkKGYsIGJvdW5kKXtcbiAgdmFyIGNvbnRleHQsXG4gIF9jdXJyeSA9IGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICByZXR1cm4gZi5sZW5ndGggPiAxID8gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBwYXJhbXMgPSBhcmdzID8gYXJncy5jb25jYXQoKSA6IFtdO1xuICAgICAgY29udGV4dCA9IGJvdW5kID8gY29udGV4dCB8fCB0aGlzIDogdGhpcztcbiAgICAgIHJldHVybiBwYXJhbXMucHVzaC5hcHBseShwYXJhbXMsIGFyZ3VtZW50cykgPFxuICAgICAgICAgIGYubGVuZ3RoICYmIGFyZ3VtZW50cy5sZW5ndGggP1xuICAgICAgICBfY3VycnkuY2FsbChjb250ZXh0LCBwYXJhbXMpIDogZi5hcHBseShjb250ZXh0LCBwYXJhbXMpO1xuICAgIH0gOiBmO1xuICB9O1xuICByZXR1cm4gX2N1cnJ5KCk7XG59IiwiLy8gR2VuZXJhdGVkIGJ5IExpdmVTY3JpcHQgMS4yLjBcbnZhciBzcGxpdCwgam9pbiwgbGluZXMsIHVubGluZXMsIHdvcmRzLCB1bndvcmRzLCBjaGFycywgdW5jaGFycywgcmV2ZXJzZSwgcmVwZWF0LCBjYXBpdGFsaXplLCBjYW1lbGl6ZSwgZGFzaGVyaXplO1xuc3BsaXQgPSBjdXJyeSQoZnVuY3Rpb24oc2VwLCBzdHIpe1xuICByZXR1cm4gc3RyLnNwbGl0KHNlcCk7XG59KTtcbmpvaW4gPSBjdXJyeSQoZnVuY3Rpb24oc2VwLCB4cyl7XG4gIHJldHVybiB4cy5qb2luKHNlcCk7XG59KTtcbmxpbmVzID0gZnVuY3Rpb24oc3RyKXtcbiAgaWYgKCFzdHIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xufTtcbnVubGluZXMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdC5qb2luKCdcXG4nKTtcbn07XG53b3JkcyA9IGZ1bmN0aW9uKHN0cil7XG4gIGlmICghc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gc3RyLnNwbGl0KC9bIF0rLyk7XG59O1xudW53b3JkcyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LmpvaW4oJyAnKTtcbn07XG5jaGFycyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LnNwbGl0KCcnKTtcbn07XG51bmNoYXJzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQuam9pbignJyk7XG59O1xucmV2ZXJzZSA9IGZ1bmN0aW9uKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbn07XG5yZXBlYXQgPSBjdXJyeSQoZnVuY3Rpb24obiwgc3RyKXtcbiAgdmFyIHJlc3VsdCwgaSQ7XG4gIHJlc3VsdCA9ICcnO1xuICBmb3IgKGkkID0gMDsgaSQgPCBuOyArK2kkKSB7XG4gICAgcmVzdWx0ICs9IHN0cjtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufSk7XG5jYXBpdGFsaXplID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn07XG5jYW1lbGl6ZSA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0LnJlcGxhY2UoL1stX10rKC4pPy9nLCBmdW5jdGlvbihhcmckLCBjKXtcbiAgICByZXR1cm4gKGMgIT0gbnVsbCA/IGMgOiAnJykudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59O1xuZGFzaGVyaXplID0gZnVuY3Rpb24oc3RyKXtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oW14tQS1aXSkoW0EtWl0rKS9nLCBmdW5jdGlvbihhcmckLCBsb3dlciwgdXBwZXIpe1xuICAgIHJldHVybiBsb3dlciArIFwiLVwiICsgKHVwcGVyLmxlbmd0aCA+IDFcbiAgICAgID8gdXBwZXJcbiAgICAgIDogdXBwZXIudG9Mb3dlckNhc2UoKSk7XG4gIH0pLnJlcGxhY2UoL14oW0EtWl0rKS8sIGZ1bmN0aW9uKGFyZyQsIHVwcGVyKXtcbiAgICBpZiAodXBwZXIubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHVwcGVyICsgXCItXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1cHBlci50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNwbGl0OiBzcGxpdCxcbiAgam9pbjogam9pbixcbiAgbGluZXM6IGxpbmVzLFxuICB1bmxpbmVzOiB1bmxpbmVzLFxuICB3b3Jkczogd29yZHMsXG4gIHVud29yZHM6IHVud29yZHMsXG4gIGNoYXJzOiBjaGFycyxcbiAgdW5jaGFyczogdW5jaGFycyxcbiAgcmV2ZXJzZTogcmV2ZXJzZSxcbiAgcmVwZWF0OiByZXBlYXQsXG4gIGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG4gIGNhbWVsaXplOiBjYW1lbGl6ZSxcbiAgZGFzaGVyaXplOiBkYXNoZXJpemVcbn07XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCIvLyBHZW5lcmF0ZWQgYnkgTGl2ZVNjcmlwdCAxLjIuMFxudmFyIEZ1bmMsIExpc3QsIE9iaiwgU3RyLCBOdW0sIGlkLCBpc1R5cGUsIHJlcGxpY2F0ZSwgcHJlbHVkZSwgdG9TdHJpbmckID0ge30udG9TdHJpbmc7XG5GdW5jID0gcmVxdWlyZSgnLi9GdW5jLmpzJyk7XG5MaXN0ID0gcmVxdWlyZSgnLi9MaXN0LmpzJyk7XG5PYmogPSByZXF1aXJlKCcuL09iai5qcycpO1xuU3RyID0gcmVxdWlyZSgnLi9TdHIuanMnKTtcbk51bSA9IHJlcXVpcmUoJy4vTnVtLmpzJyk7XG5pZCA9IGZ1bmN0aW9uKHgpe1xuICByZXR1cm4geDtcbn07XG5pc1R5cGUgPSBjdXJyeSQoZnVuY3Rpb24odHlwZSwgeCl7XG4gIHJldHVybiB0b1N0cmluZyQuY2FsbCh4KS5zbGljZSg4LCAtMSkgPT09IHR5cGU7XG59KTtcbnJlcGxpY2F0ZSA9IGN1cnJ5JChmdW5jdGlvbihuLCB4KXtcbiAgdmFyIGkkLCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGkkID0gMDsgaSQgPCBuOyArK2kkKSB7XG4gICAgcmVzdWx0cyQucHVzaCh4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cyQ7XG59KTtcblN0ci5lbXB0eSA9IExpc3QuZW1wdHk7XG5TdHIuc2xpY2UgPSBMaXN0LnNsaWNlO1xuU3RyLnRha2UgPSBMaXN0LnRha2U7XG5TdHIuZHJvcCA9IExpc3QuZHJvcDtcblN0ci5zcGxpdEF0ID0gTGlzdC5zcGxpdEF0O1xuU3RyLnRha2VXaGlsZSA9IExpc3QudGFrZVdoaWxlO1xuU3RyLmRyb3BXaGlsZSA9IExpc3QuZHJvcFdoaWxlO1xuU3RyLnNwYW4gPSBMaXN0LnNwYW47XG5TdHIuYnJlYWtTdHIgPSBMaXN0LmJyZWFrTGlzdDtcbnByZWx1ZGUgPSB7XG4gIEZ1bmM6IEZ1bmMsXG4gIExpc3Q6IExpc3QsXG4gIE9iajogT2JqLFxuICBTdHI6IFN0cixcbiAgTnVtOiBOdW0sXG4gIGlkOiBpZCxcbiAgaXNUeXBlOiBpc1R5cGUsXG4gIHJlcGxpY2F0ZTogcmVwbGljYXRlXG59O1xucHJlbHVkZS5lYWNoID0gTGlzdC5lYWNoO1xucHJlbHVkZS5tYXAgPSBMaXN0Lm1hcDtcbnByZWx1ZGUuZmlsdGVyID0gTGlzdC5maWx0ZXI7XG5wcmVsdWRlLmNvbXBhY3QgPSBMaXN0LmNvbXBhY3Q7XG5wcmVsdWRlLnJlamVjdCA9IExpc3QucmVqZWN0O1xucHJlbHVkZS5wYXJ0aXRpb24gPSBMaXN0LnBhcnRpdGlvbjtcbnByZWx1ZGUuZmluZCA9IExpc3QuZmluZDtcbnByZWx1ZGUuaGVhZCA9IExpc3QuaGVhZDtcbnByZWx1ZGUuZmlyc3QgPSBMaXN0LmZpcnN0O1xucHJlbHVkZS50YWlsID0gTGlzdC50YWlsO1xucHJlbHVkZS5sYXN0ID0gTGlzdC5sYXN0O1xucHJlbHVkZS5pbml0aWFsID0gTGlzdC5pbml0aWFsO1xucHJlbHVkZS5lbXB0eSA9IExpc3QuZW1wdHk7XG5wcmVsdWRlLnJldmVyc2UgPSBMaXN0LnJldmVyc2U7XG5wcmVsdWRlLmRpZmZlcmVuY2UgPSBMaXN0LmRpZmZlcmVuY2U7XG5wcmVsdWRlLmludGVyc2VjdGlvbiA9IExpc3QuaW50ZXJzZWN0aW9uO1xucHJlbHVkZS51bmlvbiA9IExpc3QudW5pb247XG5wcmVsdWRlLmNvdW50QnkgPSBMaXN0LmNvdW50Qnk7XG5wcmVsdWRlLmdyb3VwQnkgPSBMaXN0Lmdyb3VwQnk7XG5wcmVsdWRlLmZvbGQgPSBMaXN0LmZvbGQ7XG5wcmVsdWRlLmZvbGRsID0gTGlzdC5mb2xkbDtcbnByZWx1ZGUuZm9sZDEgPSBMaXN0LmZvbGQxO1xucHJlbHVkZS5mb2xkbDEgPSBMaXN0LmZvbGRsMTtcbnByZWx1ZGUuZm9sZHIgPSBMaXN0LmZvbGRyO1xucHJlbHVkZS5mb2xkcjEgPSBMaXN0LmZvbGRyMTtcbnByZWx1ZGUudW5mb2xkciA9IExpc3QudW5mb2xkcjtcbnByZWx1ZGUuYW5kTGlzdCA9IExpc3QuYW5kTGlzdDtcbnByZWx1ZGUub3JMaXN0ID0gTGlzdC5vckxpc3Q7XG5wcmVsdWRlLmFueSA9IExpc3QuYW55O1xucHJlbHVkZS5hbGwgPSBMaXN0LmFsbDtcbnByZWx1ZGUudW5pcXVlID0gTGlzdC51bmlxdWU7XG5wcmVsdWRlLnVuaXF1ZUJ5ID0gTGlzdC51bmlxdWVCeTtcbnByZWx1ZGUuc29ydCA9IExpc3Quc29ydDtcbnByZWx1ZGUuc29ydFdpdGggPSBMaXN0LnNvcnRXaXRoO1xucHJlbHVkZS5zb3J0QnkgPSBMaXN0LnNvcnRCeTtcbnByZWx1ZGUuc3VtID0gTGlzdC5zdW07XG5wcmVsdWRlLnByb2R1Y3QgPSBMaXN0LnByb2R1Y3Q7XG5wcmVsdWRlLm1lYW4gPSBMaXN0Lm1lYW47XG5wcmVsdWRlLmF2ZXJhZ2UgPSBMaXN0LmF2ZXJhZ2U7XG5wcmVsdWRlLmNvbmNhdCA9IExpc3QuY29uY2F0O1xucHJlbHVkZS5jb25jYXRNYXAgPSBMaXN0LmNvbmNhdE1hcDtcbnByZWx1ZGUuZmxhdHRlbiA9IExpc3QuZmxhdHRlbjtcbnByZWx1ZGUubWF4aW11bSA9IExpc3QubWF4aW11bTtcbnByZWx1ZGUubWluaW11bSA9IExpc3QubWluaW11bTtcbnByZWx1ZGUubWF4aW11bUJ5ID0gTGlzdC5tYXhpbXVtQnk7XG5wcmVsdWRlLm1pbmltdW1CeSA9IExpc3QubWluaW11bUJ5O1xucHJlbHVkZS5zY2FuID0gTGlzdC5zY2FuO1xucHJlbHVkZS5zY2FubCA9IExpc3Quc2Nhbmw7XG5wcmVsdWRlLnNjYW4xID0gTGlzdC5zY2FuMTtcbnByZWx1ZGUuc2NhbmwxID0gTGlzdC5zY2FubDE7XG5wcmVsdWRlLnNjYW5yID0gTGlzdC5zY2FucjtcbnByZWx1ZGUuc2NhbnIxID0gTGlzdC5zY2FucjE7XG5wcmVsdWRlLnNsaWNlID0gTGlzdC5zbGljZTtcbnByZWx1ZGUudGFrZSA9IExpc3QudGFrZTtcbnByZWx1ZGUuZHJvcCA9IExpc3QuZHJvcDtcbnByZWx1ZGUuc3BsaXRBdCA9IExpc3Quc3BsaXRBdDtcbnByZWx1ZGUudGFrZVdoaWxlID0gTGlzdC50YWtlV2hpbGU7XG5wcmVsdWRlLmRyb3BXaGlsZSA9IExpc3QuZHJvcFdoaWxlO1xucHJlbHVkZS5zcGFuID0gTGlzdC5zcGFuO1xucHJlbHVkZS5icmVha0xpc3QgPSBMaXN0LmJyZWFrTGlzdDtcbnByZWx1ZGUuemlwID0gTGlzdC56aXA7XG5wcmVsdWRlLnppcFdpdGggPSBMaXN0LnppcFdpdGg7XG5wcmVsdWRlLnppcEFsbCA9IExpc3QuemlwQWxsO1xucHJlbHVkZS56aXBBbGxXaXRoID0gTGlzdC56aXBBbGxXaXRoO1xucHJlbHVkZS5hdCA9IExpc3QuYXQ7XG5wcmVsdWRlLmVsZW1JbmRleCA9IExpc3QuZWxlbUluZGV4O1xucHJlbHVkZS5lbGVtSW5kaWNlcyA9IExpc3QuZWxlbUluZGljZXM7XG5wcmVsdWRlLmZpbmRJbmRleCA9IExpc3QuZmluZEluZGV4O1xucHJlbHVkZS5maW5kSW5kaWNlcyA9IExpc3QuZmluZEluZGljZXM7XG5wcmVsdWRlLmFwcGx5ID0gRnVuYy5hcHBseTtcbnByZWx1ZGUuY3VycnkgPSBGdW5jLmN1cnJ5O1xucHJlbHVkZS5mbGlwID0gRnVuYy5mbGlwO1xucHJlbHVkZS5maXggPSBGdW5jLmZpeDtcbnByZWx1ZGUub3ZlciA9IEZ1bmMub3ZlcjtcbnByZWx1ZGUuc3BsaXQgPSBTdHIuc3BsaXQ7XG5wcmVsdWRlLmpvaW4gPSBTdHIuam9pbjtcbnByZWx1ZGUubGluZXMgPSBTdHIubGluZXM7XG5wcmVsdWRlLnVubGluZXMgPSBTdHIudW5saW5lcztcbnByZWx1ZGUud29yZHMgPSBTdHIud29yZHM7XG5wcmVsdWRlLnVud29yZHMgPSBTdHIudW53b3JkcztcbnByZWx1ZGUuY2hhcnMgPSBTdHIuY2hhcnM7XG5wcmVsdWRlLnVuY2hhcnMgPSBTdHIudW5jaGFycztcbnByZWx1ZGUucmVwZWF0ID0gU3RyLnJlcGVhdDtcbnByZWx1ZGUuY2FwaXRhbGl6ZSA9IFN0ci5jYXBpdGFsaXplO1xucHJlbHVkZS5jYW1lbGl6ZSA9IFN0ci5jYW1lbGl6ZTtcbnByZWx1ZGUuZGFzaGVyaXplID0gU3RyLmRhc2hlcml6ZTtcbnByZWx1ZGUudmFsdWVzID0gT2JqLnZhbHVlcztcbnByZWx1ZGUua2V5cyA9IE9iai5rZXlzO1xucHJlbHVkZS5wYWlyc1RvT2JqID0gT2JqLnBhaXJzVG9PYmo7XG5wcmVsdWRlLm9ialRvUGFpcnMgPSBPYmoub2JqVG9QYWlycztcbnByZWx1ZGUubGlzdHNUb09iaiA9IE9iai5saXN0c1RvT2JqO1xucHJlbHVkZS5vYmpUb0xpc3RzID0gT2JqLm9ialRvTGlzdHM7XG5wcmVsdWRlLm1heCA9IE51bS5tYXg7XG5wcmVsdWRlLm1pbiA9IE51bS5taW47XG5wcmVsdWRlLm5lZ2F0ZSA9IE51bS5uZWdhdGU7XG5wcmVsdWRlLmFicyA9IE51bS5hYnM7XG5wcmVsdWRlLnNpZ251bSA9IE51bS5zaWdudW07XG5wcmVsdWRlLnF1b3QgPSBOdW0ucXVvdDtcbnByZWx1ZGUucmVtID0gTnVtLnJlbTtcbnByZWx1ZGUuZGl2ID0gTnVtLmRpdjtcbnByZWx1ZGUubW9kID0gTnVtLm1vZDtcbnByZWx1ZGUucmVjaXAgPSBOdW0ucmVjaXA7XG5wcmVsdWRlLnBpID0gTnVtLnBpO1xucHJlbHVkZS50YXUgPSBOdW0udGF1O1xucHJlbHVkZS5leHAgPSBOdW0uZXhwO1xucHJlbHVkZS5zcXJ0ID0gTnVtLnNxcnQ7XG5wcmVsdWRlLmxuID0gTnVtLmxuO1xucHJlbHVkZS5wb3cgPSBOdW0ucG93O1xucHJlbHVkZS5zaW4gPSBOdW0uc2luO1xucHJlbHVkZS50YW4gPSBOdW0udGFuO1xucHJlbHVkZS5jb3MgPSBOdW0uY29zO1xucHJlbHVkZS5hY29zID0gTnVtLmFjb3M7XG5wcmVsdWRlLmFzaW4gPSBOdW0uYXNpbjtcbnByZWx1ZGUuYXRhbiA9IE51bS5hdGFuO1xucHJlbHVkZS5hdGFuMiA9IE51bS5hdGFuMjtcbnByZWx1ZGUudHJ1bmNhdGUgPSBOdW0udHJ1bmNhdGU7XG5wcmVsdWRlLnJvdW5kID0gTnVtLnJvdW5kO1xucHJlbHVkZS5jZWlsaW5nID0gTnVtLmNlaWxpbmc7XG5wcmVsdWRlLmZsb29yID0gTnVtLmZsb29yO1xucHJlbHVkZS5pc0l0TmFOID0gTnVtLmlzSXROYU47XG5wcmVsdWRlLmV2ZW4gPSBOdW0uZXZlbjtcbnByZWx1ZGUub2RkID0gTnVtLm9kZDtcbnByZWx1ZGUuZ2NkID0gTnVtLmdjZDtcbnByZWx1ZGUubGNtID0gTnVtLmxjbTtcbnByZWx1ZGUuVkVSU0lPTiA9ICcxLjEuMSc7XG5tb2R1bGUuZXhwb3J0cyA9IHByZWx1ZGU7XG5mdW5jdGlvbiBjdXJyeSQoZiwgYm91bmQpe1xuICB2YXIgY29udGV4dCxcbiAgX2N1cnJ5ID0gZnVuY3Rpb24oYXJncykge1xuICAgIHJldHVybiBmLmxlbmd0aCA+IDEgPyBmdW5jdGlvbigpe1xuICAgICAgdmFyIHBhcmFtcyA9IGFyZ3MgPyBhcmdzLmNvbmNhdCgpIDogW107XG4gICAgICBjb250ZXh0ID0gYm91bmQgPyBjb250ZXh0IHx8IHRoaXMgOiB0aGlzO1xuICAgICAgcmV0dXJuIHBhcmFtcy5wdXNoLmFwcGx5KHBhcmFtcywgYXJndW1lbnRzKSA8XG4gICAgICAgICAgZi5sZW5ndGggJiYgYXJndW1lbnRzLmxlbmd0aCA/XG4gICAgICAgIF9jdXJyeS5jYWxsKGNvbnRleHQsIHBhcmFtcykgOiBmLmFwcGx5KGNvbnRleHQsIHBhcmFtcyk7XG4gICAgfSA6IGY7XG4gIH07XG4gIHJldHVybiBfY3VycnkoKTtcbn0iLCJ2YXIgc3RkLCBTREwsIHVuaXRzLCBjb25maWcsIGtTY3JlZW5XaWR0aCwga1NjcmVlbkhlaWdodCwga0JhY2tncm91bmRTaXplLCBGaXhlZEJhY2tkcm9wLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xuc3RkID0gcmVxdWlyZSgnc3RkJyk7XG5TREwgPSByZXF1aXJlKCdTREwnKTtcbnVuaXRzID0gcmVxdWlyZSgnLi91bml0cycpO1xuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbmtTY3JlZW5XaWR0aCA9IGNvbmZpZy5rU2NyZWVuV2lkdGgsIGtTY3JlZW5IZWlnaHQgPSBjb25maWcua1NjcmVlbkhlaWdodDtcbmtCYWNrZ3JvdW5kU2l6ZSA9IDQ7XG5vdXQkLkZpeGVkQmFja2Ryb3AgPSBGaXhlZEJhY2tkcm9wID0gKGZ1bmN0aW9uKCl7XG4gIEZpeGVkQmFja2Ryb3AuZGlzcGxheU5hbWUgPSAnRml4ZWRCYWNrZHJvcCc7XG4gIHZhciBwcm90b3R5cGUgPSBGaXhlZEJhY2tkcm9wLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBGaXhlZEJhY2tkcm9wO1xuICBmdW5jdGlvbiBGaXhlZEJhY2tkcm9wKHBhdGgsIGdyYXBoaWNzKXtcbiAgICB0aGlzLnN1cmZhY2UgPSBncmFwaGljcy5sb2FkSW1hZ2UocGF0aCk7XG4gIH1cbiAgcHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihncmFwaGljcyl7XG4gICAgdmFyIGkkLCBzdGVwJCwgdG8kLCB4LCBscmVzdWx0JCwgaiQsIHN0ZXAxJCwgdG8xJCwgeSwgZGVzdFJlY3QsIHJlc3VsdHMkID0gW107XG4gICAgZm9yIChpJCA9IDAsIHRvJCA9IHVuaXRzLnRpbGVUb1B4KGtTY3JlZW5XaWR0aCArIGtCYWNrZ3JvdW5kU2l6ZSksIHN0ZXAkID0gdW5pdHMudGlsZVRvUHgoa0JhY2tncm91bmRTaXplKTsgc3RlcCQgPCAwID8gaSQgPj0gdG8kIDogaSQgPD0gdG8kOyBpJCArPSBzdGVwJCkge1xuICAgICAgeCA9IGkkO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCB0bzEkID0gdW5pdHMudGlsZVRvUHgoa1NjcmVlbkhlaWdodCArIGtCYWNrZ3JvdW5kU2l6ZSksIHN0ZXAxJCA9IHVuaXRzLnRpbGVUb1B4KGtCYWNrZ3JvdW5kU2l6ZSk7IHN0ZXAxJCA8IDAgPyBqJCA+PSB0bzEkIDogaiQgPD0gdG8xJDsgaiQgKz0gc3RlcDEkKSB7XG4gICAgICAgIHkgPSBqJDtcbiAgICAgICAgZGVzdFJlY3QgPSBuZXcgU0RMLlJlY3QoeCwgeSwgdW5pdHMudGlsZVRvUHgoa0JhY2tncm91bmRTaXplKSwgdW5pdHMudGlsZVRvUHgoa0JhY2tncm91bmRTaXplKSk7XG4gICAgICAgIGxyZXN1bHQkLnB1c2goZ3JhcGhpY3MuYmxpdFN1cmZhY2UodGhpcy5zdXJmYWNlLCBudWxsLCBkZXN0UmVjdCkpO1xuICAgICAgfVxuICAgICAgcmVzdWx0cyQucHVzaChscmVzdWx0JCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzJDtcbiAgfTtcbiAgcmV0dXJuIEZpeGVkQmFja2Ryb3A7XG59KCkpOyIsInZhciBrU2NyZWVuV2lkdGgsIGtTY3JlZW5IZWlnaHQsIGtGcHMsIGtNYXhGcmFtZVRpbWUsIGtEZWJ1Z01vZGUsIGtHcmFwaGljc1F1YWxpdHksIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5vdXQkLmtTY3JlZW5XaWR0aCA9IGtTY3JlZW5XaWR0aCA9IDIwO1xub3V0JC5rU2NyZWVuSGVpZ2h0ID0ga1NjcmVlbkhlaWdodCA9IDE1O1xub3V0JC5rRnBzID0ga0ZwcyA9IDYwO1xub3V0JC5rTWF4RnJhbWVUaW1lID0ga01heEZyYW1lVGltZSA9IDUgKiAxMDAwIC8ga0Zwcztcbm91dCQua0RlYnVnTW9kZSA9IGtEZWJ1Z01vZGUgPSB0cnVlO1xub3V0JC5rR3JhcGhpY3NRdWFsaXR5ID0ga0dyYXBoaWNzUXVhbGl0eSA9IDE2OyIsInZhciBzdGQsIHVuaXRzLCB0aWxlVG9QeCwgdGlsZVRvR2FtZSwga0hhbGZUaWxlLCBrVGlsZVB4LCBSZWN0LCByZWYkLCBTcHJpdGUsIEFuaW1hdGVkU3ByaXRlLCBSSUdIVCwgTEVGVCwga0FuZ3VsYXJWZWxvY2l0eSwga0ZseUZwcywga051bUZseUZyYW1lcywgU3ByaXRlU3RhdGUsIEZpcnN0Q2F2ZUJhdCwgc2xpY2UkID0gW10uc2xpY2UsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcbnVuaXRzID0gcmVxdWlyZSgnLi91bml0cycpO1xudGlsZVRvUHggPSB1bml0cy50aWxlVG9QeCwgdGlsZVRvR2FtZSA9IHVuaXRzLnRpbGVUb0dhbWUsIGtIYWxmVGlsZSA9IHVuaXRzLmtIYWxmVGlsZSwga1RpbGVQeCA9IHVuaXRzLmtUaWxlUHg7XG5SZWN0ID0gcmVxdWlyZSgnLi9yZWN0YW5nbGUnKS5SZWN0YW5nbGU7XG5yZWYkID0gcmVxdWlyZSgnLi9zcHJpdGUnKSwgU3ByaXRlID0gcmVmJC5TcHJpdGUsIEFuaW1hdGVkU3ByaXRlID0gcmVmJC5BbmltYXRlZFNwcml0ZTtcblJJR0hUID0gXCJSXCI7XG5MRUZUID0gXCJMXCI7XG5rQW5ndWxhclZlbG9jaXR5ID0gMTIwIC8gMTAwMDtcbmtGbHlGcHMgPSAxNTtcbmtOdW1GbHlGcmFtZXMgPSAzO1xuU3ByaXRlU3RhdGUgPSBmdW5jdGlvbigpe1xuICB2YXIgYXJncztcbiAgYXJncyA9IHNsaWNlJC5jYWxsKGFyZ3VtZW50cyk7XG4gIHJldHVybiBTdHJpbmcoYXJncy5qb2luKCctJykpO1xufTtcbm91dCQuRmlyc3RDYXZlQmF0ID0gRmlyc3RDYXZlQmF0ID0gKGZ1bmN0aW9uKCl7XG4gIEZpcnN0Q2F2ZUJhdC5kaXNwbGF5TmFtZSA9ICdGaXJzdENhdmVCYXQnO1xuICB2YXIgcHJvdG90eXBlID0gRmlyc3RDYXZlQmF0LnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBGaXJzdENhdmVCYXQ7XG4gIGZ1bmN0aW9uIEZpcnN0Q2F2ZUJhdChncmFwaGljcywgeCwgY2VudGVyWSl7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLmNlbnRlclkgPSBjZW50ZXJZO1xuICAgIHRoaXMuZmxpZ2h0QW5nbGUgPSAwO1xuICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0ga0FuZ3VsYXJWZWxvY2l0eTtcbiAgICB0aGlzLmhvcml6b250YWxGYWNpbmcgPSBSSUdIVDtcbiAgICB0aGlzLnNwcml0ZXMgPSB0aGlzLmluaXRpYWxpc2VTcHJpdGVzKGdyYXBoaWNzKTtcbiAgICB0aGlzLnkgPSB0aGlzLmNlbnRlclk7XG4gIH1cbiAgcHJvdG90eXBlLmdldFNwcml0ZVN0YXRlID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gU3ByaXRlU3RhdGUodGhpcy5ob3Jpem9udGFsRmFjaW5nKTtcbiAgfTtcbiAgcHJvdG90eXBlLmluaXRpYWxpc2VTcHJpdGUgPSBmdW5jdGlvbihncmFwaGljcywgZmFjaW5nKXtcbiAgICB2YXIgZmFjaW5nT2Zmc2V0O1xuICAgIGZhY2luZ09mZnNldCA9IGZhY2luZyA9PT0gUklHSFQgPyAxIDogMDtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGVkU3ByaXRlKGdyYXBoaWNzLCAnZGF0YS8xNngxNi9OcGMvTnBjQ2VtZXQuYm1wJywgdGlsZVRvUHgoMiksIHRpbGVUb1B4KDIgKyBmYWNpbmdPZmZzZXQpLCBrVGlsZVB4LCBrVGlsZVB4LCBrRmx5RnBzLCBrTnVtRmx5RnJhbWVzKTtcbiAgfTtcbiAgcHJvdG90eXBlLmluaXRpYWxpc2VTcHJpdGVzID0gZnVuY3Rpb24oZ3JhcGhpY3MsIHNwcml0ZU1hcCl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCBmYWNpbmc7XG4gICAgc3ByaXRlTWFwID09IG51bGwgJiYgKHNwcml0ZU1hcCA9IHt9KTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gW0xFRlQsIFJJR0hUXSkubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIGZhY2luZyA9IHJlZiRbaSRdO1xuICAgICAgc3ByaXRlTWFwW1Nwcml0ZVN0YXRlKGZhY2luZyldID0gdGhpcy5pbml0aWFsaXNlU3ByaXRlKGdyYXBoaWNzLCBmYWNpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gc3ByaXRlTWFwO1xuICB9O1xuICBwcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZWxhcHNlZFRpbWUsIHBsYXllclgpe1xuICAgIHRoaXMuaG9yaXpvbnRhbEZhY2luZyA9IHBsYXllclggPCB0aGlzLnggPyBMRUZUIDogUklHSFQ7XG4gICAgdGhpcy5mbGlnaHRBbmdsZSArPSB0aGlzLmFuZ3VsYXJWZWxvY2l0eSAqIGVsYXBzZWRUaW1lO1xuICAgIHRoaXMueSA9IHRoaXMuY2VudGVyWSArIHVuaXRzLnRpbGVUb0dhbWUoNSkgLyAyICogc3RkLnNpbih1bml0cy5kZWdUb1JhZCh0aGlzLmZsaWdodEFuZ2xlKSk7XG4gICAgcmV0dXJuIHRoaXMuc3ByaXRlc1t0aGlzLmdldFNwcml0ZVN0YXRlKCldLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gIH07XG4gIHByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZ3JhcGhpY3Mpe1xuICAgIHJldHVybiB0aGlzLnNwcml0ZXNbdGhpcy5nZXRTcHJpdGVTdGF0ZSgpXS5kcmF3KGdyYXBoaWNzLCB0aGlzLngsIHRoaXMueSk7XG4gIH07XG4gIHByb3RvdHlwZS5kYW1hZ2VDb2xsaXNpb24gPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgUmVjdCh0aGlzLnggKyBrSGFsZlRpbGUsIHRoaXMueSArIGtIYWxmVGlsZSwgMSwgMSk7XG4gIH07XG4gIHJldHVybiBGaXJzdENhdmVCYXQ7XG59KCkpOyIsInZhciBzdGQsIFNETCwgaW5wdXQsIHVuaXRzLCBjb25maWcsIHJlYWRvdXQsIGdyYXBoaWNzLCBNYXAsIHRpbGVUb0dhbWUsIFBsYXllciwgRmlyc3RDYXZlQmF0LCBGaXhlZEJhY2tkcm9wLCBSZWN0YW5nbGUsIE51bWJlclNwcml0ZSwga1NjcmVlbldpZHRoLCBrU2NyZWVuSGVpZ2h0LCBrRnBzLCBrTWF4RnJhbWVUaW1lLCBrRGVidWdNb2RlLCBydW5uaW5nLCBwbGF5ZXIsIGJhdCwgbWFwLCBsYXN0RnJhbWVUaW1lLCBhbnlLZXlzUHJlc3NlZCwgZXZlbnRMb29wLCB1cGRhdGUsIGRyYXcsIGNyZWF0ZVRlc3RXb3JsZCwgc3RhcnQsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcblNETCA9IHJlcXVpcmUoJ1NETCcpO1xuaW5wdXQgPSByZXF1aXJlKCcuL2lucHV0Jyk7XG51bml0cyA9IHJlcXVpcmUoJy4vdW5pdHMnKTtcbmNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5yZWFkb3V0ID0gcmVxdWlyZSgnLi9yZWFkb3V0Jyk7XG5ncmFwaGljcyA9IHJlcXVpcmUoJy4vZ3JhcGhpY3MnKTtcbk1hcCA9IHJlcXVpcmUoJy4vbWFwJyk7XG50aWxlVG9HYW1lID0gdW5pdHMudGlsZVRvR2FtZTtcblBsYXllciA9IHJlcXVpcmUoJy4vcGxheWVyJykuUGxheWVyO1xuRmlyc3RDYXZlQmF0ID0gcmVxdWlyZSgnLi9maXJzdC1jYXZlLWJhdCcpLkZpcnN0Q2F2ZUJhdDtcbkZpeGVkQmFja2Ryb3AgPSByZXF1aXJlKCcuL2JhY2tkcm9wJykuRml4ZWRCYWNrZHJvcDtcblJlY3RhbmdsZSA9IHJlcXVpcmUoJy4vcmVjdGFuZ2xlJykuUmVjdGFuZ2xlO1xuTnVtYmVyU3ByaXRlID0gcmVxdWlyZSgnLi9zcHJpdGUnKS5OdW1iZXJTcHJpdGU7XG5rU2NyZWVuV2lkdGggPSBjb25maWcua1NjcmVlbldpZHRoLCBrU2NyZWVuSGVpZ2h0ID0gY29uZmlnLmtTY3JlZW5IZWlnaHQsIGtGcHMgPSBjb25maWcua0Zwcywga01heEZyYW1lVGltZSA9IGNvbmZpZy5rTWF4RnJhbWVUaW1lLCBrRGVidWdNb2RlID0gY29uZmlnLmtEZWJ1Z01vZGU7XG5ydW5uaW5nID0gdHJ1ZTtcbnBsYXllciA9IG51bGw7XG5iYXQgPSBudWxsO1xubWFwID0gbnVsbDtcbmxhc3RGcmFtZVRpbWUgPSAwO1xuYW55S2V5c1ByZXNzZWQgPSBmYWxzZTtcbmV2ZW50TG9vcCA9IGZ1bmN0aW9uKCl7XG4gIHZhciBzdGFydFRpbWUsIGV2ZW50LCDOlHQsIGVsYXBzZWRUaW1lO1xuICBzdGFydFRpbWUgPSBTREwuZ2V0VGlja3MoKTtcbiAgaW5wdXQuYmVnaW5OZXdGcmFtZSgpO1xuICB3aGlsZSAoZXZlbnQgPSBTREwucG9sbEV2ZW50KCkpIHtcbiAgICBhbnlLZXlzUHJlc3NlZCA9IHRydWU7XG4gICAgcmVhZG91dC51cGRhdGUoJ3dpbGxzdG9wJywgZmFsc2UpO1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgIGNhc2UgU0RMLktFWURPV046XG4gICAgICBpbnB1dC5rZXlEb3duRXZlbnQoZXZlbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTREwuS0VZVVA6XG4gICAgICBpbnB1dC5rZXlVcEV2ZW50KGV2ZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3Ioe1xuICAgICAgICBtZXNzYWdlOiBcIlVua25vd24gZXZlbnQgdHlwZTogXCIgKyBldmVudFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGlmIChpbnB1dC53YXNLZXlQcmVzc2VkKFNETC5LRVkuRVNDQVBFKSkge1xuICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgfVxuICBpZiAoaW5wdXQuaXNLZXlIZWxkKFNETC5LRVkuTEVGVCkgJiYgaW5wdXQuaXNLZXlIZWxkKFNETC5LRVkuUklHSFQpKSB7XG4gICAgcGxheWVyLnN0b3BNb3ZpbmcoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5pc0tleUhlbGQoU0RMLktFWS5MRUZUKSkge1xuICAgIHBsYXllci5zdGFydE1vdmluZ0xlZnQoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5pc0tleUhlbGQoU0RMLktFWS5SSUdIVCkpIHtcbiAgICBwbGF5ZXIuc3RhcnRNb3ZpbmdSaWdodCgpO1xuICB9IGVsc2Uge1xuICAgIHBsYXllci5zdG9wTW92aW5nKCk7XG4gIH1cbiAgaWYgKGlucHV0Lndhc0tleVByZXNzZWQoU0RMLktFWS5aKSkge1xuICAgIHBsYXllci5zdGFydEp1bXAoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC53YXNLZXlSZWxlYXNlZChTREwuS0VZLlopKSB7XG4gICAgcGxheWVyLnN0b3BKdW1wKCk7XG4gIH1cbiAgaWYgKGlucHV0LmlzS2V5SGVsZChTREwuS0VZLlVQKSAmJiBpbnB1dC5pc0tleUhlbGQoU0RMLktFWS5ET1dOKSkge1xuICAgIHBsYXllci5sb29rSG9yaXpvbnRhbCgpO1xuICB9IGVsc2UgaWYgKGlucHV0LmlzS2V5SGVsZChTREwuS0VZLlVQKSkge1xuICAgIHBsYXllci5sb29rVXAoKTtcbiAgfSBlbHNlIGlmIChpbnB1dC5pc0tleUhlbGQoU0RMLktFWS5ET1dOKSkge1xuICAgIHBsYXllci5sb29rRG93bigpO1xuICB9IGVsc2Uge1xuICAgIHBsYXllci5sb29rSG9yaXpvbnRhbCgpO1xuICB9XG4gIM6UdCA9IHN0ZC5taW4oU0RMLmdldFRpY2tzKCkgLSBsYXN0RnJhbWVUaW1lLCBrTWF4RnJhbWVUaW1lKTtcbiAgdXBkYXRlKM6UdCk7XG4gIGRyYXcoKTtcbiAgaWYgKHJ1bm5pbmcpIHtcbiAgICBsYXN0RnJhbWVUaW1lID0gU0RMLmdldFRpY2tzKCk7XG4gICAgZWxhcHNlZFRpbWUgPSBsYXN0RnJhbWVUaW1lIC0gc3RhcnRUaW1lO1xuICAgIHJlYWRvdXQudXBkYXRlKCdmcmFtZXRpbWUnLCBzdGQuZmxvb3IoMTAwMCAvIM6UdCkpO1xuICAgIHJlYWRvdXQudXBkYXRlKCdkcmF3dGltZScsIGVsYXBzZWRUaW1lKTtcbiAgICByZXR1cm4gU0RMLmRlbGF5KDEwMDAgLyBrRnBzIC0gZWxhcHNlZFRpbWUsIGV2ZW50TG9vcCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0ZC5sb2coJ0dhbWUgc3RvcHBlZC4nKTtcbiAgfVxufTtcbnVwZGF0ZSA9IGZ1bmN0aW9uKGVsYXBzZWRUaW1lKXtcbiAgcGxheWVyLnVwZGF0ZShlbGFwc2VkVGltZSwgbWFwKTtcbiAgYmF0LnVwZGF0ZShlbGFwc2VkVGltZSwgcGxheWVyLngpO1xuICBpZiAoYmF0LmRhbWFnZUNvbGxpc2lvbigpLmNvbGxpZGVzV2l0aChwbGF5ZXIuZGFtYWdlQ29sbGlzaW9uKCkpKSB7XG4gICAgcmVhZG91dC51cGRhdGUoJ2NvbGxpZGVkJywgdHJ1ZSk7XG4gICAgcmV0dXJuIHBsYXllci50YWtlRGFtYWdlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlYWRvdXQudXBkYXRlKCdjb2xsaWRlZCcsIGZhbHNlKTtcbiAgfVxufTtcbmRyYXcgPSBmdW5jdGlvbigpe1xuICBncmFwaGljcy5jbGVhcigpO1xuICBtYXAuZHJhd0JhY2tncm91bmQoZ3JhcGhpY3MpO1xuICBiYXQuZHJhdyhncmFwaGljcyk7XG4gIHBsYXllci5kcmF3KGdyYXBoaWNzKTtcbiAgbWFwLmRyYXcoZ3JhcGhpY3MpO1xuICByZXR1cm4gcGxheWVyLmRyYXdIdWQoZ3JhcGhpY3MpO1xufTtcbmNyZWF0ZVRlc3RXb3JsZCA9IGZ1bmN0aW9uKCl7XG4gIG1hcCA9IE1hcC5jcmVhdGVUZXN0TWFwKGdyYXBoaWNzKTtcbiAgcGxheWVyID0gbmV3IFBsYXllcihncmFwaGljcywgdW5pdHMudGlsZVRvR2FtZShrU2NyZWVuV2lkdGggLyAyKSwgdW5pdHMudGlsZVRvR2FtZShrU2NyZWVuSGVpZ2h0IC8gMikpO1xuICByZXR1cm4gYmF0ID0gbmV3IEZpcnN0Q2F2ZUJhdChncmFwaGljcywgdW5pdHMudGlsZVRvR2FtZSg3KSwgdW5pdHMudGlsZVRvR2FtZSg4KSk7XG59O1xub3V0JC5zdGFydCA9IHN0YXJ0ID0gZnVuY3Rpb24oKXtcbiAgU0RMLmluaXQoU0RMLklOSVRfRVZFUllUSElORyk7XG4gIHJlYWRvdXQuYWRkUmVhZGVyKCdmcmFtZXRpbWUnLCAnRnJhbWUgdGltZScpO1xuICByZWFkb3V0LmFkZFJlYWRlcignZHJhd3RpbWUnLCAnRHJhdyB0aW1lJyk7XG4gIHJlYWRvdXQuYWRkUmVhZGVyKCd3aWxsc3RvcCcsICdXaWxsIHN0b3AnLCB0cnVlKTtcbiAgcmVhZG91dC5hZGRSZWFkZXIoJ2NvbGxpZGVkJywgJ0NvbGxpc2lvbj8nLCBmYWxzZSk7XG4gIGNyZWF0ZVRlc3RXb3JsZCgpO1xuICBldmVudExvb3AoKTtcbiAgcGxheWVyLnN0YXJ0TW92aW5nTGVmdCgpO1xuICByZXR1cm4gc3RkLmRlbGF5KDUwMDAsIGZ1bmN0aW9uKCl7XG4gICAgaWYgKCFhbnlLZXlzUHJlc3NlZCkge1xuICAgICAgcmV0dXJuIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0ZC5sb2coXCJHYW1lIGJlaW5nIGludGVyYWN0ZWQgd2l0aC4gRG9uJ3Qgc2h1dCBkb3duXCIpO1xuICAgIH1cbiAgfSk7XG59OyIsInZhciBzdGQsIFNETCwgY29uZmlnLCB1bml0cywga1NjcmVlbldpZHRoLCBrU2NyZWVuSGVpZ2h0LCBrVHJhbnNwYXJlbnRDb2xvciwga1NjcmVlblNjYWxlRmFjdG9yLCBzcHJpdGVzaGVldHMsIHNjcmVlbiwgbG9hZEltYWdlLCBibGl0U3VyZmFjZSwgdmlzdWFsaXNlUmVjdCwgY2xlYXIsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcblNETCA9IHJlcXVpcmUoJ1NETCcpO1xuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnVuaXRzID0gcmVxdWlyZSgnLi91bml0cycpO1xua1NjcmVlbldpZHRoID0gY29uZmlnLmtTY3JlZW5XaWR0aCwga1NjcmVlbkhlaWdodCA9IGNvbmZpZy5rU2NyZWVuSGVpZ2h0O1xua1RyYW5zcGFyZW50Q29sb3IgPSBbMCwgMCwgMF07XG5rU2NyZWVuU2NhbGVGYWN0b3IgPSAyO1xuc3ByaXRlc2hlZXRzID0ge307XG5zY3JlZW4gPSBTREwuc2V0VmlkZW9Nb2RlKHVuaXRzLnRpbGVUb1B4KGtTY3JlZW5XaWR0aCksIHVuaXRzLnRpbGVUb1B4KGtTY3JlZW5IZWlnaHQpLCBrU2NyZWVuU2NhbGVGYWN0b3IpO1xub3V0JC5sb2FkSW1hZ2UgPSBsb2FkSW1hZ2UgPSBmdW5jdGlvbihwYXRoLCB1c2VUcmFuc3BhcmVuY3kpe1xuICB1c2VUcmFuc3BhcmVuY3kgPT0gbnVsbCAmJiAodXNlVHJhbnNwYXJlbmN5ID0gZmFsc2UpO1xuICBpZiAoc3ByaXRlc2hlZXRzW3BhdGhdID09IG51bGwpIHtcbiAgICBzcHJpdGVzaGVldHNbcGF0aF0gPSBTREwubG9hZEltYWdlKHBhdGgpO1xuICAgIGlmICh1c2VUcmFuc3BhcmVuY3kpIHtcbiAgICAgIFNETC5zZXRDb2xvcktleShzcHJpdGVzaGVldHNbcGF0aF0sIGtUcmFuc3BhcmVudENvbG9yKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5rRGVidWdNb2RlKSB7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNwcml0ZXNoZWV0c1twYXRoXS5jYW52YXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3ByaXRlc2hlZXRzW3BhdGhdO1xufTtcbm91dCQuYmxpdFN1cmZhY2UgPSBibGl0U3VyZmFjZSA9IGZ1bmN0aW9uKHNvdXJjZSwgc3JjUmVjdCwgZGVzdFJlY3Qpe1xuICByZXR1cm4gU0RMLmJsaXRTdXJmYWNlKHNvdXJjZSwgc3JjUmVjdCwgc2NyZWVuLCBkZXN0UmVjdCk7XG59O1xub3V0JC52aXN1YWxpc2VSZWN0ID0gdmlzdWFsaXNlUmVjdCA9IGZ1bmN0aW9uKHJlY3QsIGZpbGwpe1xuICB2YXIgcGFpbnRSZWN0O1xuICBwYWludFJlY3QgPSBuZXcgU0RMLlJlY3QodW5pdHMuZ2FtZVRvUHgocmVjdC5sZWZ0KSwgdW5pdHMuZ2FtZVRvUHgocmVjdC50b3ApLCB1bml0cy5nYW1lVG9QeChyZWN0LncpLCB1bml0cy5nYW1lVG9QeChyZWN0LmgpKTtcbiAgaWYgKGZpbGwpIHtcbiAgICByZXR1cm4gc2NyZWVuLmRyYXdSZWN0KHBhaW50UmVjdCwgJ3JlZCcpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzY3JlZW4uZHJhd0JveChwYWludFJlY3QsICdyZWQnKTtcbiAgfVxufTtcbm91dCQuY2xlYXIgPSBjbGVhciA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiBzY3JlZW4uY2xlYXIoKTtcbn07IiwidmFyIHN0ZCwgdW5pdHMsIGRpdiwga0hhbGZUaWxlLCB0aWxlVG9QeCwgcHhUb0dhbWUsIHRpbGVUb0dhbWUsIHJlZiQsIFNwcml0ZSwgTnVtYmVyU3ByaXRlLCBWYXJ5aW5nV2lkdGhTcHJpdGUsIGtIZWFsdGhCYXJYLCBrSGVhbHRoQmFyWSwga0hlYWx0aEZpbGxYLCBrSGVhbHRoRmlsbFksIGtIZWFsdGhOdW1YLCBrSGVhbHRoTnVtWSwga01heEZpbGxQeCwga0RhbWFnZVRpbWUsIEhlYWx0aCwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnN0ZCA9IHJlcXVpcmUoJ3N0ZCcpO1xudW5pdHMgPSByZXF1aXJlKCcuL3VuaXRzJyk7XG5kaXYgPSBzdGQuZGl2O1xua0hhbGZUaWxlID0gdW5pdHMua0hhbGZUaWxlLCB0aWxlVG9QeCA9IHVuaXRzLnRpbGVUb1B4LCBweFRvR2FtZSA9IHVuaXRzLnB4VG9HYW1lLCB0aWxlVG9HYW1lID0gdW5pdHMudGlsZVRvR2FtZTtcbnJlZiQgPSByZXF1aXJlKCcuL3Nwcml0ZScpLCBTcHJpdGUgPSByZWYkLlNwcml0ZSwgTnVtYmVyU3ByaXRlID0gcmVmJC5OdW1iZXJTcHJpdGUsIFZhcnlpbmdXaWR0aFNwcml0ZSA9IHJlZiQuVmFyeWluZ1dpZHRoU3ByaXRlO1xua0hlYWx0aEJhclggPSB0aWxlVG9HYW1lKDEpO1xua0hlYWx0aEJhclkgPSB0aWxlVG9HYW1lKDIpO1xua0hlYWx0aEZpbGxYID0gdGlsZVRvR2FtZSgyLjUpO1xua0hlYWx0aEZpbGxZID0gdGlsZVRvR2FtZSgyKTtcbmtIZWFsdGhOdW1YID0gdGlsZVRvR2FtZSgxLjUpO1xua0hlYWx0aE51bVkgPSB0aWxlVG9HYW1lKDIpO1xua01heEZpbGxQeCA9IHRpbGVUb1B4KDIuNSkgLSAxO1xua0RhbWFnZVRpbWUgPSAxNTAwO1xub3V0JC5IZWFsdGggPSBIZWFsdGggPSAoZnVuY3Rpb24oKXtcbiAgSGVhbHRoLmRpc3BsYXlOYW1lID0gJ0hlYWx0aCc7XG4gIHZhciBwcm90b3R5cGUgPSBIZWFsdGgucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IEhlYWx0aDtcbiAgZnVuY3Rpb24gSGVhbHRoKGdyYXBoaWNzLCBtYXhIZWFsdGgpe1xuICAgIHRoaXMubWF4SGVhbHRoID0gbWF4SGVhbHRoICE9IG51bGwgPyBtYXhIZWFsdGggOiA2O1xuICAgIHRoaXMuY3VycmVudEhlYWx0aCA9IHRoaXMubWF4SGVhbHRoO1xuICAgIHRoaXMuZGFtYWdlID0gMDtcbiAgICB0aGlzLmRhbWFnZVRpbWUgPSAwO1xuICAgIHRoaXMuaGVhbHRoQmFyU3ByaXRlID0gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvVGV4dEJveC5ibXAnLCAwLCB0aWxlVG9QeCgyLjUpLCB0aWxlVG9QeCg0KSwgdGlsZVRvUHgoMC41KSk7XG4gICAgdGhpcy5oZWFsdGhGaWxsU3ByaXRlID0gbmV3IFZhcnlpbmdXaWR0aFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvVGV4dEJveC5ibXAnLCAwLCB0aWxlVG9QeCgxLjUpLCBrTWF4RmlsbFB4LCB0aWxlVG9QeCgwLjUpKTtcbiAgICB0aGlzLmRhbWFnZUZpbGxTcHJpdGUgPSBuZXcgVmFyeWluZ1dpZHRoU3ByaXRlKGdyYXBoaWNzLCAnZGF0YS8xNngxNi9UZXh0Qm94LmJtcCcsIDAsIHRpbGVUb1B4KDIuMCksIGtNYXhGaWxsUHgsIHRpbGVUb1B4KDAuNSkpO1xuICB9XG4gIHByb3RvdHlwZS50YWtlRGFtYWdlID0gZnVuY3Rpb24oZGFtYWdlKXtcbiAgICBpZiAodGhpcy5jdXJyZW50SGVhbHRoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGFtYWdlID0gZGFtYWdlO1xuICAgIHRoaXMuZGFtYWdlVGltZSA9IDA7XG4gICAgdGhpcy5oZWFsdGhGaWxsU3ByaXRlLnNldFdpZHRoKHRoaXMuZmlsbE9mZnNldCh0aGlzLmN1cnJlbnRIZWFsdGggLSBkYW1hZ2UpKTtcbiAgICB0aGlzLmRhbWFnZUZpbGxTcHJpdGUuc2V0V2lkdGgodGhpcy5maWxsT2Zmc2V0KGRhbWFnZSkpO1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRIZWFsdGggLSBkYW1hZ2UgPD0gMDtcbiAgfTtcbiAgcHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGVsYXBzZWRUaW1lKXtcbiAgICBpZiAodGhpcy5kYW1hZ2UpIHtcbiAgICAgIHRoaXMuZGFtYWdlVGltZSArPSBlbGFwc2VkVGltZTtcbiAgICAgIGlmICh0aGlzLmRhbWFnZVRpbWUgPj0ga0RhbWFnZVRpbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SGVhbHRoID0gc3RkLm1heCgwLCB0aGlzLmN1cnJlbnRIZWFsdGggLSB0aGlzLmRhbWFnZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRhbWFnZSA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUuZmlsbE9mZnNldCA9IGZ1bmN0aW9uKGhlYWx0aCl7XG4gICAgcmV0dXJuIGtNYXhGaWxsUHggKiAoaGVhbHRoIC8gdGhpcy5tYXhIZWFsdGgpO1xuICB9O1xuICBwcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGdyYXBoaWNzKXtcbiAgICB2YXIgeDtcbiAgICB0aGlzLmhlYWx0aEJhclNwcml0ZS5kcmF3KGdyYXBoaWNzLCBrSGVhbHRoQmFyWCwga0hlYWx0aEJhclkpO1xuICAgIGlmICh0aGlzLmN1cnJlbnRIZWFsdGggIT09IDApIHtcbiAgICAgIHRoaXMuaGVhbHRoRmlsbFNwcml0ZS5kcmF3KGdyYXBoaWNzLCBrSGVhbHRoRmlsbFgsIGtIZWFsdGhGaWxsWSk7XG4gICAgICBpZiAodGhpcy5kYW1hZ2UpIHtcbiAgICAgICAgeCA9IGtIZWFsdGhGaWxsWCArIHB4VG9HYW1lKHRoaXMuZmlsbE9mZnNldCh0aGlzLmN1cnJlbnRIZWFsdGggLSB0aGlzLmRhbWFnZSkpO1xuICAgICAgICB0aGlzLmRhbWFnZUZpbGxTcHJpdGUuZHJhdyhncmFwaGljcywgeCwga0hlYWx0aEZpbGxZKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOdW1iZXJTcHJpdGUuSFVETnVtYmVyKGdyYXBoaWNzLCB0aGlzLmN1cnJlbnRIZWFsdGgsIDIpLmRyYXcoZ3JhcGhpY3MsIGtIZWFsdGhOdW1YLCBrSGVhbHRoTnVtWSk7XG4gIH07XG4gIHJldHVybiBIZWFsdGg7XG59KCkpOyIsInZhciBzdGQsIElucHV0O1xuc3RkID0gcmVxdWlyZSgnc3RkJyk7XG5JbnB1dCA9IChmdW5jdGlvbigpe1xuICBJbnB1dC5kaXNwbGF5TmFtZSA9ICdJbnB1dCc7XG4gIHZhciBwcm90b3R5cGUgPSBJbnB1dC5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gSW5wdXQ7XG4gIGZ1bmN0aW9uIElucHV0KCl7XG4gICAgdGhpcy5oZWxkS2V5cyA9IHt9O1xuICAgIHRoaXMucHJlc3NlZEtleXMgPSB7fTtcbiAgICB0aGlzLnJlbGVhc2VkS2V5cyA9IHt9O1xuICB9XG4gIHByb3RvdHlwZS5iZWdpbk5ld0ZyYW1lID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnByZXNzZWRLZXlzID0ge307XG4gICAgcmV0dXJuIHRoaXMucmVsZWFzZWRLZXlzID0ge307XG4gIH07XG4gIHByb3RvdHlwZS5rZXlEb3duRXZlbnQgPSBmdW5jdGlvbihldmVudCl7XG4gICAgdGhpcy5wcmVzc2VkS2V5c1tldmVudC5rZXldID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5oZWxkS2V5c1tldmVudC5rZXldID0gdHJ1ZTtcbiAgfTtcbiAgcHJvdG90eXBlLmtleVVwRXZlbnQgPSBmdW5jdGlvbihldmVudCl7XG4gICAgdGhpcy5yZWxlYXNlZEtleXNbZXZlbnQua2V5XSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuaGVsZEtleXNbZXZlbnQua2V5XSA9IGZhbHNlO1xuICB9O1xuICBwcm90b3R5cGUud2FzS2V5UHJlc3NlZCA9IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIHRoaXMucHJlc3NlZEtleXNba2V5XTtcbiAgfTtcbiAgcHJvdG90eXBlLndhc0tleVJlbGVhc2VkID0gZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gdGhpcy5yZWxlYXNlZEtleXNba2V5XTtcbiAgfTtcbiAgcHJvdG90eXBlLmlzS2V5SGVsZCA9IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuIHRoaXMuaGVsZEtleXNba2V5XTtcbiAgfTtcbiAgcmV0dXJuIElucHV0O1xufSgpKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IElucHV0OyIsInZhciBzdGQsIHVuaXRzLCBkaXYsIFNwcml0ZSwgRml4ZWRCYWNrZHJvcCwgUmVjdCwgcmVmJCwgQUlSX1RJTEUsIFdBTExfVElMRSwgVGlsZSwgQ29sbGlzaW9uVGlsZSwgTWFwO1xuc3RkID0gcmVxdWlyZSgnc3RkJyk7XG51bml0cyA9IHJlcXVpcmUoJy4vdW5pdHMnKTtcbmRpdiA9IHN0ZC5kaXY7XG5TcHJpdGUgPSByZXF1aXJlKCcuL3Nwcml0ZScpLlNwcml0ZTtcbkZpeGVkQmFja2Ryb3AgPSByZXF1aXJlKCcuL2JhY2tkcm9wJykuRml4ZWRCYWNrZHJvcDtcblJlY3QgPSByZXF1aXJlKCcuL3JlY3RhbmdsZScpLlJlY3RhbmdsZTtcbnJlZiQgPSBzdGRbJ2VudW0nXSwgQUlSX1RJTEUgPSByZWYkWzBdLCBXQUxMX1RJTEUgPSByZWYkWzFdO1xuVGlsZSA9IChmdW5jdGlvbigpe1xuICBUaWxlLmRpc3BsYXlOYW1lID0gJ1RpbGUnO1xuICB2YXIgcHJvdG90eXBlID0gVGlsZS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gVGlsZTtcbiAgZnVuY3Rpb24gVGlsZSh0eXBlLCBzcHJpdGUpe1xuICAgIHRoaXMudHlwZSA9IHR5cGUgIT0gbnVsbCA/IHR5cGUgOiBBSVJfVElMRTtcbiAgICB0aGlzLnNwcml0ZSA9IHNwcml0ZTtcbiAgfVxuICByZXR1cm4gVGlsZTtcbn0oKSk7XG5Db2xsaXNpb25UaWxlID0gKGZ1bmN0aW9uKCl7XG4gIENvbGxpc2lvblRpbGUuZGlzcGxheU5hbWUgPSAnQ29sbGlzaW9uVGlsZSc7XG4gIHZhciBwcm90b3R5cGUgPSBDb2xsaXNpb25UaWxlLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBDb2xsaXNpb25UaWxlO1xuICBmdW5jdGlvbiBDb2xsaXNpb25UaWxlKHJvdywgY29sLCB0eXBlKXtcbiAgICB0aGlzLnJvdyA9IHJvdztcbiAgICB0aGlzLmNvbCA9IGNvbDtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICB9XG4gIHJldHVybiBDb2xsaXNpb25UaWxlO1xufSgpKTtcbm1vZHVsZS5leHBvcnRzID0gTWFwID0gKGZ1bmN0aW9uKCl7XG4gIE1hcC5kaXNwbGF5TmFtZSA9ICdNYXAnO1xuICB2YXIgcHJvdG90eXBlID0gTWFwLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBNYXA7XG4gIGZ1bmN0aW9uIE1hcCgpe1xuICAgIHRoaXMuYmFja2Ryb3AgPSBudWxsO1xuICAgIHRoaXMudGlsZXMgPSBNYXAuY3JlYXRlTWF0cml4KG5ldyBUaWxlLCAyMCwgMTUpO1xuICAgIHRoaXMuYmdUaWxlcyA9IE1hcC5jcmVhdGVNYXRyaXgobnVsbCwgMjAsIDE1KTtcbiAgfVxuICBwcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZWxhcHNlZFRpbWUpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgcm93LCBscmVzdWx0JCwgaiQsIGxlbjEkLCB0aWxlLCByZWYxJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gdGhpcy50aWxlcykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHJvdyA9IHJlZiRbaSRdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgdGlsZSA9IHJvd1tqJF07XG4gICAgICAgIGxyZXN1bHQkLnB1c2goKHJlZjEkID0gdGlsZS5zcHJpdGUpICE9IG51bGwgPyByZWYxJC51cGRhdGUoZWxhcHNlZFRpbWUpIDogdm9pZCA4KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZ3JhcGhpY3Mpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgeSwgcm93LCBscmVzdWx0JCwgaiQsIGxlbjEkLCB4LCB0aWxlLCByZWYxJCwgcmVzdWx0cyQgPSBbXTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gdGhpcy50aWxlcykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IHJlZiRbaSRdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgeCA9IGokO1xuICAgICAgICB0aWxlID0gcm93W2okXTtcbiAgICAgICAgbHJlc3VsdCQucHVzaCgocmVmMSQgPSB0aWxlLnNwcml0ZSkgIT0gbnVsbCA/IHJlZjEkLmRyYXcoZ3JhcGhpY3MsIHVuaXRzLnRpbGVUb0dhbWUoeCksIHVuaXRzLnRpbGVUb0dhbWUoeSkpIDogdm9pZCA4KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS5kcmF3QmFja2dyb3VuZCA9IGZ1bmN0aW9uKGdyYXBoaWNzKXtcbiAgICB2YXIgaSQsIHJlZiQsIGxlbiQsIHksIHJvdywgbHJlc3VsdCQsIGokLCBsZW4xJCwgeCwgc3ByaXRlLCByZXN1bHRzJCA9IFtdO1xuICAgIHRoaXMuYmFja2Ryb3AuZHJhdyhncmFwaGljcyk7XG4gICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHRoaXMuYmdUaWxlcykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgIHkgPSBpJDtcbiAgICAgIHJvdyA9IHJlZiRbaSRdO1xuICAgICAgbHJlc3VsdCQgPSBbXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IHJvdy5sZW5ndGg7IGokIDwgbGVuMSQ7ICsraiQpIHtcbiAgICAgICAgeCA9IGokO1xuICAgICAgICBzcHJpdGUgPSByb3dbaiRdO1xuICAgICAgICBscmVzdWx0JC5wdXNoKHNwcml0ZSAhPSBudWxsID8gc3ByaXRlLmRyYXcoZ3JhcGhpY3MsIHVuaXRzLnRpbGVUb0dhbWUoeCksIHVuaXRzLnRpbGVUb0dhbWUoeSkpIDogdm9pZCA4KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIHByb3RvdHlwZS5nZXRDb2xsaWRpbmdUaWxlcyA9IGZ1bmN0aW9uKHJlY3Qpe1xuICAgIHZhciBmaXJzdFJvdywgbGFzdFJvdywgZmlyc3RDb2wsIGxhc3RDb2wsIGNvbGxpc2lvblRpbGVzLCBpJCwgcm93LCBqJCwgY29sO1xuICAgIGZpcnN0Um93ID0gZGl2KHVuaXRzLmdhbWVUb1B4KHJlY3QudG9wKSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIGxhc3RSb3cgPSBkaXYodW5pdHMuZ2FtZVRvUHgocmVjdC5ib3R0b20pLCB1bml0cy50aWxlVG9QeCgxKSk7XG4gICAgZmlyc3RDb2wgPSBkaXYodW5pdHMuZ2FtZVRvUHgocmVjdC5sZWZ0KSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIGxhc3RDb2wgPSBkaXYodW5pdHMuZ2FtZVRvUHgocmVjdC5yaWdodCksIHVuaXRzLnRpbGVUb1B4KDEpKTtcbiAgICBjb2xsaXNpb25UaWxlcyA9IFtdO1xuICAgIGZvciAoaSQgPSBmaXJzdFJvdzsgaSQgPD0gbGFzdFJvdzsgKytpJCkge1xuICAgICAgcm93ID0gaSQ7XG4gICAgICBmb3IgKGokID0gZmlyc3RDb2w7IGokIDw9IGxhc3RDb2w7ICsraiQpIHtcbiAgICAgICAgY29sID0gaiQ7XG4gICAgICAgIGNvbGxpc2lvblRpbGVzLnB1c2gobmV3IENvbGxpc2lvblRpbGUocm93LCBjb2wsIHRoaXMudGlsZXNbcm93XVtjb2xdLnR5cGUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvbGxpc2lvblRpbGVzO1xuICB9O1xuICBNYXAuY3JlYXRlVGVzdE1hcCA9IGZ1bmN0aW9uKGdyYXBoaWNzKXtcbiAgICB2YXIgbWFwLCBudW1Sb3dzLCBudW1Db2xzLCByb3csIHRpbGUsIGkkLCBjb2wsIGNoYWluVG9wLCBjaGFpbk1pZCwgY2hhaW5CdG07XG4gICAgbWFwID0gbmV3IE1hcDtcbiAgICBtYXAuYmFja2Ryb3AgPSBuZXcgRml4ZWRCYWNrZHJvcCgnZGF0YS8xNngxNi9ia0JsdWUuYm1wJywgZ3JhcGhpY3MpO1xuICAgIG51bVJvd3MgPSAxNTtcbiAgICBudW1Db2xzID0gMjA7XG4gICAgcm93ID0gMTE7XG4gICAgdGlsZSA9IG5ldyBUaWxlKFdBTExfVElMRSwgbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvU3RhZ2UvUHJ0Q2F2ZS5ibXAnLCB1bml0cy50aWxlVG9QeCgxKSwgMCwgdW5pdHMudGlsZVRvUHgoMSksIHVuaXRzLnRpbGVUb1B4KDEpKSk7XG4gICAgZm9yIChpJCA9IDA7IGkkIDw9IG51bUNvbHM7ICsraSQpIHtcbiAgICAgIGNvbCA9IGkkO1xuICAgICAgbWFwLnRpbGVzW3Jvd11bY29sXSA9IHRpbGU7XG4gICAgfVxuICAgIG1hcC50aWxlc1sxMF1bNV0gPSB0aWxlO1xuICAgIG1hcC50aWxlc1s5XVs0XSA9IHRpbGU7XG4gICAgbWFwLnRpbGVzWzhdWzNdID0gdGlsZTtcbiAgICBtYXAudGlsZXNbN11bMl0gPSB0aWxlO1xuICAgIG1hcC50aWxlc1sxMF1bM10gPSB0aWxlO1xuICAgIGNoYWluVG9wID0gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvU3RhZ2UvUHJ0Q2F2ZS5ibXAnLCB1bml0cy50aWxlVG9QeCgxMSksIHVuaXRzLnRpbGVUb1B4KDIpLCB1bml0cy50aWxlVG9QeCgxKSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIGNoYWluTWlkID0gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvU3RhZ2UvUHJ0Q2F2ZS5ibXAnLCB1bml0cy50aWxlVG9QeCgxMiksIHVuaXRzLnRpbGVUb1B4KDIpLCB1bml0cy50aWxlVG9QeCgxKSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIGNoYWluQnRtID0gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvU3RhZ2UvUHJ0Q2F2ZS5ibXAnLCB1bml0cy50aWxlVG9QeCgxMyksIHVuaXRzLnRpbGVUb1B4KDIpLCB1bml0cy50aWxlVG9QeCgxKSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIG1hcC5iZ1RpbGVzWzhdWzJdID0gY2hhaW5Ub3A7XG4gICAgbWFwLmJnVGlsZXNbOV1bMl0gPSBjaGFpbk1pZDtcbiAgICBtYXAuYmdUaWxlc1sxMF1bMl0gPSBjaGFpbkJ0bTtcbiAgICByZXR1cm4gbWFwO1xuICB9O1xuICBNYXAuY3JlYXRlTWF0cml4ID0gZnVuY3Rpb24odmFsdWUsIGNvbHMsIHJvd3Mpe1xuICAgIHZhciBpJCwgeSwgbHJlc3VsdCQsIGokLCB6LCByZXN1bHRzJCA9IFtdO1xuICAgIGZvciAoaSQgPSAwOyBpJCA8PSByb3dzOyArK2kkKSB7XG4gICAgICB5ID0gaSQ7XG4gICAgICBscmVzdWx0JCA9IFtdO1xuICAgICAgZm9yIChqJCA9IDA7IGokIDw9IGNvbHM7ICsraiQpIHtcbiAgICAgICAgeiA9IGokO1xuICAgICAgICBscmVzdWx0JC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdHMkLnB1c2gobHJlc3VsdCQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cyQ7XG4gIH07XG4gIE1hcC5XQUxMX1RJTEUgPSBXQUxMX1RJTEU7XG4gIE1hcC5BSVJfVElMRSA9IEFJUl9USUxFO1xuICByZXR1cm4gTWFwO1xufSgpKTsiLCJ2YXIgc3RkLCB1bml0cywgY29uZmlnLCByZWFkb3V0LCBrSGFsZlRpbGUsIHRpbGVUb0dhbWUsIHRpbGVUb1B4LCBXQUxMX1RJTEUsIFJlY3QsIEhlYWx0aCwgcmVmJCwgU3ByaXRlLCBBbmltYXRlZFNwcml0ZSwgTnVtYmVyU3ByaXRlLCBrQ2hhcmFjdGVyRnJhbWUsIGtXYWxrRnJhbWUsIGtTdGFuZEZyYW1lLCBrSnVtcEZyYW1lLCBrRmFsbEZyYW1lLCBrVXBGcmFtZU9mZnNldCwga0Rvd25GcmFtZSwga0JhY2tGcmFtZSwga1dhbGtGcHMsIGtGcmljdGlvbiwga0dyYXZpdHksIGtXYWxraW5nQWNjZWxlcmF0aW9uLCBrQWlyQWNjZWxlcmF0aW9uLCBrTWF4U3BlZWRYLCBrTWF4U3BlZWRZLCBrSnVtcFNwZWVkLCBrU2hvcnRKdW1wU3BlZWQsIGtKdW1wR3Jhdml0eSwga0ludmluY2libGVUaW1lLCBrSW52aW5jaWJsZUZsYXNoVGltZSwga0NvbGxpc2lvblgsIGtDb2xsaXNpb25ZLCBTVEFORElORywgV0FMS0lORywgSlVNUElORywgRkFMTElORywgSU5URVJBQ1RJTkcsIExFRlQsIFJJR0hULCBVUCwgRE9XTiwgSE9SSVpPTlRBTCwgU3ByaXRlU3RhdGUsIFBsYXllciwgc2xpY2UkID0gW10uc2xpY2UsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcbnVuaXRzID0gcmVxdWlyZSgnLi91bml0cycpO1xuY29uZmlnID0gcmVxdWlyZSgnLi9jb25maWcnKTtcbnJlYWRvdXQgPSByZXF1aXJlKCcuL3JlYWRvdXQnKTtcbmtIYWxmVGlsZSA9IHVuaXRzLmtIYWxmVGlsZSwgdGlsZVRvR2FtZSA9IHVuaXRzLnRpbGVUb0dhbWUsIHRpbGVUb1B4ID0gdW5pdHMudGlsZVRvUHg7XG5XQUxMX1RJTEUgPSByZXF1aXJlKCcuL21hcCcpLldBTExfVElMRTtcblJlY3QgPSByZXF1aXJlKCcuL3JlY3RhbmdsZScpLlJlY3RhbmdsZTtcbkhlYWx0aCA9IHJlcXVpcmUoJy4vaGVhbHRoJykuSGVhbHRoO1xucmVmJCA9IHJlcXVpcmUoJy4vc3ByaXRlJyksIFNwcml0ZSA9IHJlZiQuU3ByaXRlLCBBbmltYXRlZFNwcml0ZSA9IHJlZiQuQW5pbWF0ZWRTcHJpdGUsIE51bWJlclNwcml0ZSA9IHJlZiQuTnVtYmVyU3ByaXRlO1xua0NoYXJhY3RlckZyYW1lID0gMDtcbmtXYWxrRnJhbWUgPSAwO1xua1N0YW5kRnJhbWUgPSAwO1xua0p1bXBGcmFtZSA9IDE7XG5rRmFsbEZyYW1lID0gMjtcbmtVcEZyYW1lT2Zmc2V0ID0gMztcbmtEb3duRnJhbWUgPSA2O1xua0JhY2tGcmFtZSA9IDc7XG5rV2Fsa0ZwcyA9IDE1O1xua0ZyaWN0aW9uID0gMC4wMDA0OTgwNDY4NztcbmtHcmF2aXR5ID0gMC4wMDA3ODEyNTtcbmtXYWxraW5nQWNjZWxlcmF0aW9uID0gMC4wMDA4MzAwNzgxMjtcbmtBaXJBY2NlbGVyYXRpb24gPSAwLjAwMDMxMjU7XG5rTWF4U3BlZWRYID0gMC4xNTg1OTM3NTtcbmtNYXhTcGVlZFkgPSAwLjI5OTgwNDY4NzU7XG5rSnVtcFNwZWVkID0gMC4yNTtcbmtTaG9ydEp1bXBTcGVlZCA9IDAuMjUgLyAxLjU7XG5rSnVtcEdyYXZpdHkgPSAwLjAwMDMxMjU7XG5rSW52aW5jaWJsZVRpbWUgPSAzMDAwO1xua0ludmluY2libGVGbGFzaFRpbWUgPSA1MDtcbmtDb2xsaXNpb25YID0gbmV3IFJlY3QoNiwgMTAsIDIwLCAxMik7XG5rQ29sbGlzaW9uWSA9IG5ldyBSZWN0KDEwLCAyLCAxMiwgMzApO1xucmVmJCA9IFsnUycsICdXJywgJ0onLCAnRicsICdJJ10sIFNUQU5ESU5HID0gcmVmJFswXSwgV0FMS0lORyA9IHJlZiRbMV0sIEpVTVBJTkcgPSByZWYkWzJdLCBGQUxMSU5HID0gcmVmJFszXSwgSU5URVJBQ1RJTkcgPSByZWYkWzRdO1xucmVmJCA9IFsnTCcsICdSJ10sIExFRlQgPSByZWYkWzBdLCBSSUdIVCA9IHJlZiRbMV07XG5yZWYkID0gWydVJywgJ0QnLCAnSCddLCBVUCA9IHJlZiRbMF0sIERPV04gPSByZWYkWzFdLCBIT1JJWk9OVEFMID0gcmVmJFsyXTtcblNwcml0ZVN0YXRlID0gKGZ1bmN0aW9uKCl7XG4gIFNwcml0ZVN0YXRlLmRpc3BsYXlOYW1lID0gJ1Nwcml0ZVN0YXRlJztcbiAgdmFyIHByb3RvdHlwZSA9IFNwcml0ZVN0YXRlLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBTcHJpdGVTdGF0ZTtcbiAgZnVuY3Rpb24gU3ByaXRlU3RhdGUobW90aW9uVHlwZSwgaG9yaXpvbnRhbEZhY2luZywgdmVydGljYWxGYWNpbmcpe1xuICAgIHRoaXMubW90aW9uVHlwZSA9IG1vdGlvblR5cGUgIT0gbnVsbCA/IG1vdGlvblR5cGUgOiBTVEFORElORztcbiAgICB0aGlzLmhvcml6b250YWxGYWNpbmcgPSBob3Jpem9udGFsRmFjaW5nICE9IG51bGwgPyBob3Jpem9udGFsRmFjaW5nIDogTEVGVDtcbiAgICB0aGlzLnZlcnRpY2FsRmFjaW5nID0gdmVydGljYWxGYWNpbmcgIT0gbnVsbCA/IHZlcnRpY2FsRmFjaW5nIDogSE9SSVpPTlRBTDtcbiAgfVxuICBwcm90b3R5cGUua2V5ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5tb3Rpb25UeXBlICsgXCItXCIgKyB0aGlzLmhvcml6b250YWxGYWNpbmcgKyBcIi1cIiArIHRoaXMudmVydGljYWxGYWNpbmc7XG4gIH07XG4gIFNwcml0ZVN0YXRlLmtleSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGFyZ3M7XG4gICAgYXJncyA9IHNsaWNlJC5jYWxsKGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGFyZ3Muam9pbignLScpO1xuICB9O1xuICByZXR1cm4gU3ByaXRlU3RhdGU7XG59KCkpO1xub3V0JC5QbGF5ZXIgPSBQbGF5ZXIgPSAoZnVuY3Rpb24oKXtcbiAgUGxheWVyLmRpc3BsYXlOYW1lID0gJ1BsYXllcic7XG4gIHZhciBwcm90b3R5cGUgPSBQbGF5ZXIucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IFBsYXllcjtcbiAgZnVuY3Rpb24gUGxheWVyKGdyYXBoaWNzLCB4LCB5KXtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy52ZWxvY2l0eVkgPSAwO1xuICAgIHRoaXMudmVsb2NpdHlYID0gMDtcbiAgICB0aGlzLmFjY2VsZXJhdGlvblggPSAwO1xuICAgIHRoaXMuaG9yaXpvbnRhbEZhY2luZyA9IExFRlQ7XG4gICAgdGhpcy52ZXJ0aWNhbEZhY2luZyA9IEhPUklaT05UQUw7XG4gICAgdGhpcy5vbkdyb3VuZCA9IGZhbHNlO1xuICAgIHRoaXMuanVtcEFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuaW50ZXJhY3RpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmludmluY2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmludmluY2libGVUaW1lID0gMDtcbiAgICB0aGlzLmhlYWx0aCA9IG5ldyBIZWFsdGgoZ3JhcGhpY3MpO1xuICAgIHRoaXMuc3ByaXRlcyA9IHRoaXMuaW5pdGlhbGlzZVNwcml0ZXMoZ3JhcGhpY3MpO1xuICAgIGlmIChjb25maWcua0RlYnVnTW9kZSkge1xuICAgICAgcmVhZG91dC5hZGRSZWFkZXIoJ3Nwcml0ZXN0YXRlJywgJ1Nwcml0ZVN0YXRlJyk7XG4gICAgfVxuICB9XG4gIHByb3RvdHlwZS5pbml0aWFsaXNlU3ByaXRlID0gZnVuY3Rpb24oZ3JhcGhpY3MsIG1vdGlvbiwgaGZhY2luZywgdmZhY2luZyl7XG4gICAgdmFyIHRpbGVYLCB0aWxlWSwgc291cmNlWDtcbiAgICB0aWxlWCA9IChmdW5jdGlvbigpe1xuICAgICAgc3dpdGNoIChtb3Rpb24pIHtcbiAgICAgIGNhc2UgV0FMS0lORzpcbiAgICAgICAgcmV0dXJuIGtXYWxrRnJhbWU7XG4gICAgICBjYXNlIFNUQU5ESU5HOlxuICAgICAgICByZXR1cm4ga1N0YW5kRnJhbWU7XG4gICAgICBjYXNlIEpVTVBJTkc6XG4gICAgICAgIHJldHVybiBrSnVtcEZyYW1lO1xuICAgICAgY2FzZSBGQUxMSU5HOlxuICAgICAgICByZXR1cm4ga0ZhbGxGcmFtZTtcbiAgICAgIGNhc2UgSU5URVJBQ1RJTkc6XG4gICAgICAgIHJldHVybiBrQmFja0ZyYW1lO1xuICAgICAgfVxuICAgIH0oKSk7XG4gICAgdGlsZVggKz0gdmZhY2luZyA9PT0gVVAgPyBrVXBGcmFtZU9mZnNldCA6IDA7XG4gICAgdGlsZVkgPSBrQ2hhcmFjdGVyRnJhbWUgKyAoaGZhY2luZyA9PT0gTEVGVCA/IDAgOiAxKTtcbiAgICBpZiAobW90aW9uID09PSBXQUxLSU5HKSB7XG4gICAgICByZXR1cm4gbmV3IEFuaW1hdGVkU3ByaXRlKGdyYXBoaWNzLCAnZGF0YS8xNngxNi9NeUNoYXIuYm1wJywgdW5pdHMudGlsZVRvUHgodGlsZVgpLCB1bml0cy50aWxlVG9QeCh0aWxlWSksIHVuaXRzLnRpbGVUb1B4KDEpLCB1bml0cy50aWxlVG9QeCgxKSwga1dhbGtGcHMsIDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmZhY2luZyA9PT0gRE9XTiAmJiAobW90aW9uID09PSBKVU1QSU5HIHx8IG1vdGlvbiA9PT0gRkFMTElORykpIHtcbiAgICAgICAgc291cmNlWCA9IGtEb3duRnJhbWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvTXlDaGFyLmJtcCcsIHVuaXRzLnRpbGVUb1B4KHRpbGVYKSwgdW5pdHMudGlsZVRvUHgodGlsZVkpLCB1bml0cy50aWxlVG9QeCgxKSwgdW5pdHMudGlsZVRvUHgoMSkpO1xuICAgIH1cbiAgfTtcbiAgcHJvdG90eXBlLmluaXRpYWxpc2VTcHJpdGVzID0gZnVuY3Rpb24oZ3JhcGhpY3MsIHNwcml0ZU1hcCl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCBtb3Rpb24sIGokLCByZWYxJCwgbGVuMSQsIGhmYWNpbmcsIGskLCByZWYyJCwgbGVuMiQsIHZmYWNpbmc7XG4gICAgc3ByaXRlTWFwID09IG51bGwgJiYgKHNwcml0ZU1hcCA9IHt9KTtcbiAgICBmb3IgKGkkID0gMCwgbGVuJCA9IChyZWYkID0gW1NUQU5ESU5HLCBXQUxLSU5HLCBKVU1QSU5HLCBGQUxMSU5HLCBJTlRFUkFDVElOR10pLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICBtb3Rpb24gPSByZWYkW2kkXTtcbiAgICAgIGZvciAoaiQgPSAwLCBsZW4xJCA9IChyZWYxJCA9IFtMRUZULCBSSUdIVF0pLmxlbmd0aDsgaiQgPCBsZW4xJDsgKytqJCkge1xuICAgICAgICBoZmFjaW5nID0gcmVmMSRbaiRdO1xuICAgICAgICBmb3IgKGskID0gMCwgbGVuMiQgPSAocmVmMiQgPSBbVVAsIERPV04sIEhPUklaT05UQUxdKS5sZW5ndGg7IGskIDwgbGVuMiQ7ICsrayQpIHtcbiAgICAgICAgICB2ZmFjaW5nID0gcmVmMiRbayRdO1xuICAgICAgICAgIHNwcml0ZU1hcFtTcHJpdGVTdGF0ZS5rZXkobW90aW9uLCBoZmFjaW5nLCB2ZmFjaW5nKV0gPSB0aGlzLmluaXRpYWxpc2VTcHJpdGUoZ3JhcGhpY3MsIG1vdGlvbiwgaGZhY2luZywgdmZhY2luZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwcml0ZU1hcDtcbiAgfTtcbiAgcHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKGVsYXBzZWRUaW1lLCBtYXApe1xuICAgIHRoaXMuc3ByaXRlc1t0aGlzLmdldFNwcml0ZVN0YXRlKCldLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgaWYgKHRoaXMuaW52aW5jaWJsZSkge1xuICAgICAgdGhpcy5pbnZpbmNpYmxlVGltZSArPSBlbGFwc2VkVGltZTtcbiAgICAgIHRoaXMuaW52aW5jaWJsZSA9IHRoaXMuaW52aW5jaWJsZVRpbWUgPCBrSW52aW5jaWJsZVRpbWU7XG4gICAgfVxuICAgIHRoaXMuaGVhbHRoLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gICAgdGhpcy51cGRhdGVYKGVsYXBzZWRUaW1lLCBtYXApO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVkoZWxhcHNlZFRpbWUsIG1hcCk7XG4gIH07XG4gIHByb3RvdHlwZS51cGRhdGVYID0gZnVuY3Rpb24oZWxhcHNlZFRpbWUsIG1hcCl7XG4gICAgdmFyIGFjY1gsIM6UeDtcbiAgICBhY2NYID0gdGhpcy5vbkdyb3VuZCA/IGtXYWxraW5nQWNjZWxlcmF0aW9uIDoga0FpckFjY2VsZXJhdGlvbjtcbiAgICB0aGlzLnZlbG9jaXR5WCArPSB0aGlzLmFjY2VsZXJhdGlvblggKiBhY2NYICogZWxhcHNlZFRpbWU7XG4gICAgaWYgKHRoaXMuYWNjZWxlcmF0aW9uWCA8IDApIHtcbiAgICAgIHRoaXMudmVsb2NpdHlYID0gc3RkLm1heCh0aGlzLnZlbG9jaXR5WCwgLWtNYXhTcGVlZFgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5hY2NlbGVyYXRpb25YID4gMCkge1xuICAgICAgdGhpcy52ZWxvY2l0eVggPSBzdGQubWluKHRoaXMudmVsb2NpdHlYLCBrTWF4U3BlZWRYKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub25Hcm91bmQpIHtcbiAgICAgIHRoaXMudmVsb2NpdHlYID0gdGhpcy52ZWxvY2l0eVggPiAwXG4gICAgICAgID8gc3RkLm1heCgwLCB0aGlzLnZlbG9jaXR5WCAtIGtGcmljdGlvbiAqIGVsYXBzZWRUaW1lKVxuICAgICAgICA6IHN0ZC5taW4oMCwgdGhpcy52ZWxvY2l0eVggKyBrRnJpY3Rpb24gKiBlbGFwc2VkVGltZSk7XG4gICAgfVxuICAgIM6UeCA9IHRoaXMudmVsb2NpdHlYICogZWxhcHNlZFRpbWU7XG4gICAgaWYgKM6UeCA+IDApIHtcbiAgICAgIHRoaXMub25XYWxsQ29sbGlzaW9uKG1hcCwgdGhpcy5yaWdodENvbGxpc2lvbijOlHgpLCBmdW5jdGlvbih0aWxlKXtcbiAgICAgICAgaWYgKHRpbGUpIHtcbiAgICAgICAgICB0aGlzLnggPSB1bml0cy50aWxlVG9HYW1lKHRpbGUuY29sKSAtIGtDb2xsaXNpb25YLnJpZ2h0O1xuICAgICAgICAgIHJldHVybiB0aGlzLnZlbG9jaXR5WCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMueCArPSDOlHg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMub25XYWxsQ29sbGlzaW9uKG1hcCwgdGhpcy5sZWZ0Q29sbGlzaW9uKDApLCBmdW5jdGlvbih0aWxlKXtcbiAgICAgICAgaWYgKHRpbGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy54ID0gdW5pdHMudGlsZVRvR2FtZSh0aWxlLmNvbCkgKyBrQ29sbGlzaW9uWC5yaWdodDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMub25XYWxsQ29sbGlzaW9uKG1hcCwgdGhpcy5sZWZ0Q29sbGlzaW9uKM6UeCksIGZ1bmN0aW9uKHRpbGUpe1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgIHRoaXMueCA9IHVuaXRzLnRpbGVUb0dhbWUodGlsZS5jb2wpICsga0NvbGxpc2lvblgucmlnaHQ7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmVsb2NpdHlYID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy54ICs9IM6UeDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5vbldhbGxDb2xsaXNpb24obWFwLCB0aGlzLnJpZ2h0Q29sbGlzaW9uKDApLCBmdW5jdGlvbih0aWxlKXtcbiAgICAgICAgaWYgKHRpbGUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy54ID0gdW5pdHMudGlsZVRvR2FtZSh0aWxlLmNvbCkgLSBrQ29sbGlzaW9uWC5yaWdodDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUudXBkYXRlWSA9IGZ1bmN0aW9uKGVsYXBzZWRUaW1lLCBtYXApe1xuICAgIHZhciBncmF2aXR5LCDOlHk7XG4gICAgZ3Jhdml0eSA9IHRoaXMuanVtcEFjdGl2ZSAmJiB0aGlzLnZlbG9jaXR5WSA8IDAgPyBrSnVtcEdyYXZpdHkgOiBrR3Jhdml0eTtcbiAgICB0aGlzLnZlbG9jaXR5WSA9IHN0ZC5taW4odGhpcy52ZWxvY2l0eVkgKyBncmF2aXR5ICogZWxhcHNlZFRpbWUsIGtNYXhTcGVlZFkpO1xuICAgIM6UeSA9IHRoaXMudmVsb2NpdHlZICogZWxhcHNlZFRpbWU7XG4gICAgaWYgKM6UeSA+IDApIHtcbiAgICAgIHRoaXMub25XYWxsQ29sbGlzaW9uKG1hcCwgdGhpcy5ib3R0b21Db2xsaXNpb24ozpR5KSwgZnVuY3Rpb24odGlsZSl7XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgdGhpcy55ID0gdW5pdHMudGlsZVRvR2FtZSh0aWxlLnJvdykgLSBrQ29sbGlzaW9uWS5ib3R0b207XG4gICAgICAgICAgdGhpcy52ZWxvY2l0eVkgPSAwO1xuICAgICAgICAgIHJldHVybiB0aGlzLm9uR3JvdW5kID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnkgKz0gzpR5O1xuICAgICAgICAgIHJldHVybiB0aGlzLm9uR3JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMub25XYWxsQ29sbGlzaW9uKG1hcCwgdGhpcy50b3BDb2xsaXNpb24oMCksIGZ1bmN0aW9uKHRpbGUpe1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnkgPSB1bml0cy50aWxlVG9HYW1lKHRpbGUucm93KSArIGtDb2xsaXNpb25ZLmg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9uV2FsbENvbGxpc2lvbihtYXAsIHRoaXMudG9wQ29sbGlzaW9uKM6UeSksIGZ1bmN0aW9uKHRpbGUpe1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgIHRoaXMueSA9IHVuaXRzLnRpbGVUb0dhbWUodGlsZS5yb3cpICsga0NvbGxpc2lvblkuaDtcbiAgICAgICAgICByZXR1cm4gdGhpcy52ZWxvY2l0eVkgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMueSArPSDOlHk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub25Hcm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5vbldhbGxDb2xsaXNpb24obWFwLCB0aGlzLmJvdHRvbUNvbGxpc2lvbigwKSwgZnVuY3Rpb24odGlsZSl7XG4gICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgdGhpcy55ID0gdW5pdHMudGlsZVRvR2FtZSh0aWxlLnJvdykgLSBrQ29sbGlzaW9uWS5ib3R0b207XG4gICAgICAgICAgcmV0dXJuIHRoaXMub25Hcm91bmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHByb3RvdHlwZS50YWtlRGFtYWdlID0gZnVuY3Rpb24oZGFtYWdlKXtcbiAgICBpZiAoIXRoaXMuaW52aW5jaWJsZSkge1xuICAgICAgdGhpcy5oZWFsdGgudGFrZURhbWFnZSgyKTtcbiAgICAgIHRoaXMudmVsb2NpdHlZID0gc3RkLm1pbigta1Nob3J0SnVtcFNwZWVkLCB0aGlzLnZlbG9jaXR5WSk7XG4gICAgICB0aGlzLmludmluY2libGUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuaW52aW5jaWJsZVRpbWUgPSAwO1xuICAgIH1cbiAgfTtcbiAgcHJvdG90eXBlLnNwcml0ZUlzVmlzaWJsZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICEodGhpcy5pbnZpbmNpYmxlICYmIHN0ZC5kaXYodGhpcy5pbnZpbmNpYmxlVGltZSwga0ludmluY2libGVGbGFzaFRpbWUpICUgMiA9PT0gMCk7XG4gIH07XG4gIHByb3RvdHlwZS5kcmF3SHVkID0gZnVuY3Rpb24oZ3JhcGhpY3Mpe1xuICAgIGlmICghdGhpcy5zcHJpdGVJc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oZWFsdGguZHJhdyhncmFwaGljcyk7XG4gIH07XG4gIHByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oZ3JhcGhpY3Mpe1xuICAgIGlmICghdGhpcy5zcHJpdGVJc1Zpc2libGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zcHJpdGVzW3RoaXMuZ2V0U3ByaXRlU3RhdGUoKV0uZHJhdyhncmFwaGljcywgdGhpcy54LCB0aGlzLnkpO1xuICB9O1xuICBwcm90b3R5cGUuZ2V0U3ByaXRlU3RhdGUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBtb3Rpb25UeXBlLCBrZXk7XG4gICAgbW90aW9uVHlwZSA9IHRoaXMuaW50ZXJhY3RpbmdcbiAgICAgID8gSU5URVJBQ1RJTkdcbiAgICAgIDogdGhpcy5vbkdyb3VuZFxuICAgICAgICA/IHRoaXMuYWNjZWxlcmF0aW9uWCA9PT0gMCA/IFNUQU5ESU5HIDogV0FMS0lOR1xuICAgICAgICA6IHRoaXMudmVsb2NpdHlZIDwgMCA/IEpVTVBJTkcgOiBGQUxMSU5HO1xuICAgIGtleSA9IFNwcml0ZVN0YXRlLmtleShtb3Rpb25UeXBlLCB0aGlzLmhvcml6b250YWxGYWNpbmcsIHRoaXMudmVydGljYWxGYWNpbmcpO1xuICAgIHJlYWRvdXQudXBkYXRlKCdzcHJpdGVzdGF0ZScsIGtleSk7XG4gICAgcmV0dXJuIGtleTtcbiAgfTtcbiAgcHJvdG90eXBlLmxlZnRDb2xsaXNpb24gPSBmdW5jdGlvbijOlCl7XG4gICAgcmV0dXJuIG5ldyBSZWN0KHRoaXMueCArIGtDb2xsaXNpb25YLmxlZnQgKyDOlCwgdGhpcy55ICsga0NvbGxpc2lvblgudG9wLCBrQ29sbGlzaW9uWC53IC8gMiAtIM6ULCBrQ29sbGlzaW9uWC5oKTtcbiAgfTtcbiAgcHJvdG90eXBlLnJpZ2h0Q29sbGlzaW9uID0gZnVuY3Rpb24ozpQpe1xuICAgIHJldHVybiBuZXcgUmVjdCh0aGlzLnggKyBrQ29sbGlzaW9uWC5sZWZ0ICsga0NvbGxpc2lvblgudyAvIDIsIHRoaXMueSArIGtDb2xsaXNpb25YLnRvcCwga0NvbGxpc2lvblgudyAvIDIgKyDOlCwga0NvbGxpc2lvblguaCk7XG4gIH07XG4gIHByb3RvdHlwZS50b3BDb2xsaXNpb24gPSBmdW5jdGlvbijOlCl7XG4gICAgcmV0dXJuIG5ldyBSZWN0KHRoaXMueCArIGtDb2xsaXNpb25ZLmxlZnQsIHRoaXMueSArIGtDb2xsaXNpb25ZLnRvcCArIM6ULCBrQ29sbGlzaW9uWS53LCBrQ29sbGlzaW9uWS5oIC8gMiAtIM6UKTtcbiAgfTtcbiAgcHJvdG90eXBlLmJvdHRvbUNvbGxpc2lvbiA9IGZ1bmN0aW9uKM6UKXtcbiAgICByZXR1cm4gbmV3IFJlY3QodGhpcy54ICsga0NvbGxpc2lvblkubGVmdCwgdGhpcy55ICsga0NvbGxpc2lvblkudG9wICsga0NvbGxpc2lvblkuaCAvIDIgKyDOlCwga0NvbGxpc2lvblkudywga0NvbGxpc2lvblkuaCAvIDIgKyDOlCk7XG4gIH07XG4gIHByb3RvdHlwZS5kYW1hZ2VDb2xsaXNpb24gPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgUmVjdCh0aGlzLnggKyBrQ29sbGlzaW9uWC5sZWZ0LCB0aGlzLnkgKyBrQ29sbGlzaW9uWS50b3AsIGtDb2xsaXNpb25YLncsIGtDb2xsaXNpb25ZLmgpO1xuICB9O1xuICBwcm90b3R5cGUub25XYWxsQ29sbGlzaW9uID0gZnVuY3Rpb24obWFwLCByZWN0LCDOuyl7XG4gICAgdmFyIGkkLCByZWYkLCBsZW4kLCB0aWxlO1xuICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSBtYXAuZ2V0Q29sbGlkaW5nVGlsZXMocmVjdCkpLmxlbmd0aDsgaSQgPCBsZW4kOyArK2kkKSB7XG4gICAgICB0aWxlID0gcmVmJFtpJF07XG4gICAgICBpZiAodGlsZS50eXBlID09PSBXQUxMX1RJTEUpIHtcbiAgICAgICAgcmV0dXJuIM67LmNhbGwodGhpcywgdGlsZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiDOuy5jYWxsKHRoaXMpO1xuICB9O1xuICBwcm90b3R5cGUuc3RhcnRNb3ZpbmdMZWZ0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmhvcml6b250YWxGYWNpbmcgPSBMRUZUO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uWCA9IC0xO1xuICAgIHJldHVybiB0aGlzLmludGVyYWN0aW5nID0gZmFsc2U7XG4gIH07XG4gIHByb3RvdHlwZS5zdGFydE1vdmluZ1JpZ2h0ID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmhvcml6b250YWxGYWNpbmcgPSBSSUdIVDtcbiAgICB0aGlzLmFjY2VsZXJhdGlvblggPSAxO1xuICAgIHJldHVybiB0aGlzLmludGVyYWN0aW5nID0gZmFsc2U7XG4gIH07XG4gIHByb3RvdHlwZS5zdG9wTW92aW5nID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5hY2NlbGVyYXRpb25YID0gMDtcbiAgfTtcbiAgcHJvdG90eXBlLnN0YXJ0SnVtcCA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5qdW1wQWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyYWN0aW5nID0gZmFsc2U7XG4gICAgaWYgKHRoaXMub25Hcm91bmQpIHtcbiAgICAgIHJldHVybiB0aGlzLnZlbG9jaXR5WSA9IC1rSnVtcFNwZWVkO1xuICAgIH1cbiAgfTtcbiAgcHJvdG90eXBlLnN0b3BKdW1wID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5qdW1wQWN0aXZlID0gZmFsc2U7XG4gIH07XG4gIHByb3RvdHlwZS5sb29rVXAgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMudmVydGljYWxGYWNpbmcgPSBVUDtcbiAgICByZXR1cm4gdGhpcy5pbnRlcmFjdGluZyA9IGZhbHNlO1xuICB9O1xuICBwcm90b3R5cGUubG9va0Rvd24gPSBmdW5jdGlvbigpe1xuICAgIGlmICh0aGlzLnZlcnRpY2FsRmFjaW5nID09PSBET1dOKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudmVydGljYWxGYWNpbmcgPSBET1dOO1xuICAgIHJldHVybiB0aGlzLmludGVyYWN0aW5nID0gdGhpcy5vbkdyb3VuZDtcbiAgfTtcbiAgcHJvdG90eXBlLmxvb2tIb3Jpem9udGFsID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbEZhY2luZyA9IEhPUklaT05UQUw7XG4gIH07XG4gIHJldHVybiBQbGF5ZXI7XG59KCkpOyIsInZhciBlbG0sIGFwcGx5U3R5bGVzLCBSZWFkZXIsIGhvc3QsIHJlYWRlcnMsIGluc3RhbGwsIGFkZFJlYWRlciwgdXBkYXRlLCByZW1vdmVSZWFkZXIsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5lbG0gPSBiaW5kJChkb2N1bWVudCwgJ2NyZWF0ZUVsZW1lbnQnKTtcbmFwcGx5U3R5bGVzID0gZnVuY3Rpb24oZWwsIHN0eWxlcyl7XG4gIHZhciBrLCB2LCByZXN1bHRzJCA9IFtdO1xuICBmb3IgKGsgaW4gc3R5bGVzKSB7XG4gICAgdiA9IHN0eWxlc1trXTtcbiAgICByZXN1bHRzJC5wdXNoKGVsLnN0eWxlW2tdID0gdik7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufTtcblJlYWRlciA9IChmdW5jdGlvbigpe1xuICBSZWFkZXIuZGlzcGxheU5hbWUgPSAnUmVhZGVyJztcbiAgdmFyIHByb3RvdHlwZSA9IFJlYWRlci5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gUmVhZGVyO1xuICBmdW5jdGlvbiBSZWFkZXIobmFtZSwgbGFiZWxUZXh0LCB2YWx1ZSl7XG4gICAgdmFyIHRoYXQ7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxhYmVsVGV4dCA9IGxhYmVsVGV4dDtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5kb20gPSBlbG0oJ3RyJyk7XG4gICAgdGhpcy5sYWJlbCA9IGVsbSgndGQnKTtcbiAgICB0aGlzLm91dHB1dCA9IGVsbSgndGQnKTtcbiAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZCh0aGlzLmxhYmVsKTtcbiAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZCh0aGlzLm91dHB1dCk7XG4gICAgdGhpcy5sYWJlbC5pbm5lckhUTUwgPSB0aGlzLmxhYmVsVGV4dDtcbiAgICBpZiAodGhhdCA9IHRoaXMudmFsdWUpIHtcbiAgICAgIHRoaXMub3V0cHV0LmlubmVySFRNTCA9IHRoYXQ7XG4gICAgfVxuICB9XG4gIHByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLm91dHB1dC5pbm5lckhUTUwgPSB0aGlzLnZhbHVlO1xuICB9O1xuICBwcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuZG9tLnN0eWxlcy5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuICBwcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuZG9tLnN0eWxlcy5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcbiAgcHJvdG90eXBlLmluc3RhbGwgPSBmdW5jdGlvbihob3N0KXtcbiAgICByZXR1cm4gaG9zdC5hcHBlbmRDaGlsZCh0aGlzLmRvbSk7XG4gIH07XG4gIHByb3RvdHlwZVsnZGVsZXRlJ10gPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmRvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZG9tKTtcbiAgfTtcbiAgcmV0dXJuIFJlYWRlcjtcbn0oKSk7XG5ob3N0ID0gZWxtKCd0YWJsZScpO1xucmVhZGVycyA9IHt9O1xuYXBwbHlTdHlsZXMoaG9zdCwge1xuICBmb250RmFtaWx5OiAnbW9ub3NwYWNlJyxcbiAgd2lkdGg6ICcxMDAlJyxcbiAgcGFkZGluZ0xlZnQ6ICcxMHB4JyxcbiAgY29sb3I6ICdsaWdodGdyZXknLFxuICBib3JkZXJXaWR0aDogXCIzcHggMXB4XCJcbn0pO1xub3V0JC5pbnN0YWxsID0gaW5zdGFsbCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGhvc3QpO1xufTtcbm91dCQuYWRkUmVhZGVyID0gYWRkUmVhZGVyID0gZnVuY3Rpb24obmFtZSwgbGFiZWwsIHZhbHVlKXtcbiAgcmVhZGVyc1tuYW1lXSA9IG5ldyBSZWFkZXIobmFtZSwgbGFiZWwsIHZhbHVlKTtcbiAgcmV0dXJuIHJlYWRlcnNbbmFtZV0uaW5zdGFsbChob3N0KTtcbn07XG5vdXQkLnVwZGF0ZSA9IHVwZGF0ZSA9IGZ1bmN0aW9uKHJlYWRlck5hbWUsIHZhbHVlKXtcbiAgdmFyIHJlZiQ7XG4gIHJldHVybiAocmVmJCA9IHJlYWRlcnNbcmVhZGVyTmFtZV0pICE9IG51bGwgPyByZWYkLnVwZGF0ZSh2YWx1ZSkgOiB2b2lkIDg7XG59O1xub3V0JC5yZW1vdmVSZWFkZXIgPSByZW1vdmVSZWFkZXIgPSBmdW5jdGlvbihuYW1lKXtcbiAgdmFyIHJlZiQ7XG4gIHJlYWRlcnNbbmFtZV1bJ2RlbGV0ZSddKCk7XG4gIHJldHVybiByZWYkID0gcmVhZGVyc1tuYW1lXSwgZGVsZXRlIHJlYWRlcnNbbmFtZV0sIHJlZiQ7XG59O1xuZnVuY3Rpb24gYmluZCQob2JqLCBrZXksIHRhcmdldCl7XG4gIHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gKHRhcmdldCB8fCBvYmopW2tleV0uYXBwbHkob2JqLCBhcmd1bWVudHMpIH07XG59IiwidmFyIFJlY3RhbmdsZSwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbm91dCQuUmVjdGFuZ2xlID0gUmVjdGFuZ2xlID0gKGZ1bmN0aW9uKCl7XG4gIFJlY3RhbmdsZS5kaXNwbGF5TmFtZSA9ICdSZWN0YW5nbGUnO1xuICB2YXIgcHJvdG90eXBlID0gUmVjdGFuZ2xlLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBSZWN0YW5nbGU7XG4gIGZ1bmN0aW9uIFJlY3RhbmdsZSh4LCB5LCB3LCBoLCBtKXtcbiAgICBtID09IG51bGwgJiYgKG0gPSAxKTtcbiAgICB0aGlzLnggPSB4ICogbTtcbiAgICB0aGlzLnkgPSB5ICogbTtcbiAgICB0aGlzLncgPSB3ICogbTtcbiAgICB0aGlzLmggPSBoICogbTtcbiAgICB0aGlzLnRvcCA9IHRoaXMueTtcbiAgICB0aGlzLmxlZnQgPSB0aGlzLng7XG4gICAgdGhpcy5yaWdodCA9IHRoaXMueCArIHRoaXMudztcbiAgICB0aGlzLmJvdHRvbSA9IHRoaXMueSArIHRoaXMuaDtcbiAgfVxuICBwcm90b3R5cGUuY29sbGlkZXNXaXRoID0gZnVuY3Rpb24ob3RoZXIpe1xuICAgIHJldHVybiB0aGlzLnJpZ2h0ID49IG90aGVyLmxlZnQgJiYgdGhpcy5sZWZ0IDw9IG90aGVyLnJpZ2h0ICYmIHRoaXMudG9wIDw9IG90aGVyLmJvdHRvbSAmJiB0aGlzLmJvdHRvbSA+PSBvdGhlci50b3A7XG4gIH07XG4gIHJldHVybiBSZWN0YW5nbGU7XG59KCkpOyIsInZhciByYWYsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5yYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5pbXBvcnQkKG91dCQsIHtcbiAgZGVsYXk6IGZ1bmN0aW9uKHRpbWUsIM67KXtcbiAgICByZXR1cm4gcmFmKM67KTtcbiAgfVxufSk7XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciBzdGQsIHF1ZXVlLCBvdXQkID0gdHlwZW9mIGV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcgJiYgZXhwb3J0cyB8fCB0aGlzO1xuc3RkID0gcmVxdWlyZSgnc3RkJyk7XG5xdWV1ZSA9IFtdO1xuaW1wb3J0JChvdXQkLCB7XG4gIHB1c2hFdmVudDogZnVuY3Rpb24oZXZlbnQpe1xuICAgIHJldHVybiBxdWV1ZS5wdXNoKGV2ZW50KTtcbiAgfSxcbiAgcG9sbEV2ZW50OiBmdW5jdGlvbigpe1xuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBxdWV1ZS5zaGlmdCgpO1xuICAgIH1cbiAgfVxufSk7XG5mdW5jdGlvbiBpbXBvcnQkKG9iaiwgc3JjKXtcbiAgdmFyIG93biA9IHt9Lmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSBpZiAob3duLmNhbGwoc3JjLCBrZXkpKSBvYmpba2V5XSA9IHNyY1trZXldO1xuICByZXR1cm4gb2JqO1xufSIsInZhciBzdGQsIGRlbGF5LCB0aW1lciwgc2NyZWVuLCBrZXlib2FyZCwgZXZlbnRRdWV1ZSwgUmVjdCwgU3VyZmFjZSwgcmVmJCwgSU5JVF9FVkVSWVRISU5HLCBGVUxMU0NSRUVOLCBpbml0LCBLRVksIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcbmRlbGF5ID0gcmVxdWlyZSgnLi9kZWxheScpO1xudGltZXIgPSByZXF1aXJlKCcuL3RpbWVyJyk7XG5zY3JlZW4gPSByZXF1aXJlKCcuL3NjcmVlbicpO1xua2V5Ym9hcmQgPSByZXF1aXJlKCcuL2tleWJvYXJkJyk7XG5ldmVudFF1ZXVlID0gcmVxdWlyZSgnLi9ldmVudC1xdWV1ZScpO1xub3V0JC5SZWN0ID0gUmVjdCA9IHJlcXVpcmUoJy4vcmVjdCcpO1xub3V0JC5TdXJmYWNlID0gU3VyZmFjZSA9IHJlcXVpcmUoJy4vc3VyZmFjZScpO1xucmVmJCA9IHN0ZFsnZW51bSddLCBJTklUX0VWRVJZVEhJTkcgPSByZWYkWzBdLCBGVUxMU0NSRUVOID0gcmVmJFsxXTtcbm91dCQuaW5pdCA9IGluaXQgPSBmdW5jdGlvbihtb2RlKXtcbiAgc3RkLmxvZyhcIlNETDo6SW5pdCAtIHdpdGggbW9kZTpcIiwgbW9kZSk7XG4gIHRpbWVyLmluaXQoKTtcbiAgcmV0dXJuIGtleWJvYXJkLmluaXQoKTtcbn07XG5vdXQkLklOSVRfRVZFUllUSElORyA9IElOSVRfRVZFUllUSElORztcbm91dCQuRlVMTFNDUkVFTiA9IEZVTExTQ1JFRU47XG5vdXQkLktFWURPV04gPSBrZXlib2FyZC5LRVlET1dOO1xub3V0JC5LRVlVUCA9IGtleWJvYXJkLktFWVVQO1xub3V0JC5LRVkgPSBLRVkgPSBrZXlib2FyZC5LRVlDT0RFUztcbm91dCQuZGVsYXkgPSBkZWxheS5kZWxheTtcbm91dCQuZ2V0VGlja3MgPSB0aW1lci5nZXRUaWNrcztcbm91dCQucG9sbEV2ZW50ID0gZXZlbnRRdWV1ZS5wb2xsRXZlbnQ7XG5vdXQkLnNldFZpZGVvTW9kZSA9IHNjcmVlbi5zZXRWaWRlb01vZGU7XG5vdXQkLmJsaXRTdXJmYWNlID0gU3VyZmFjZS5ibGl0U3VyZmFjZTtcbm91dCQuc2V0Q29sb3JLZXkgPSBTdXJmYWNlLnNldENvbG9yS2V5O1xub3V0JC5sb2FkSW1hZ2UgPSBTdXJmYWNlLmxvYWRJbWFnZTsiLCJ2YXIgc3RkLCBxdWV1ZSwgcmVmJCwgS0VZRE9XTiwgS0VZVVAsIEtFWUNPREVTLCBtb25pdG9yS2V5cywgaW5pdCwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnN0ZCA9IHJlcXVpcmUoJ3N0ZCcpO1xucXVldWUgPSByZXF1aXJlKCcuL2V2ZW50LXF1ZXVlJyk7XG5yZWYkID0gc3RkWydlbnVtJ10sIEtFWURPV04gPSByZWYkWzBdLCBLRVlVUCA9IHJlZiRbMV07XG5vdXQkLktFWUNPREVTID0gS0VZQ09ERVMgPSB7XG4gIEVTQ0FQRTogMjcsXG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDAsXG4gIEE6IDY1LFxuICBROiA4MSxcbiAgUzogODMsXG4gIFc6IDg3LFxuICBYOiA4OCxcbiAgWjogOTBcbn07XG5tb25pdG9yS2V5cyA9IGZ1bmN0aW9uKCl7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldmVudCl7XG4gICAgdmFyIHdoaWNoO1xuICAgIHdoaWNoID0gZXZlbnQud2hpY2g7XG4gICAgcXVldWUucHVzaEV2ZW50KHtcbiAgICAgIHR5cGU6IEtFWURPV04sXG4gICAgICBrZXk6IHdoaWNoXG4gICAgfSk7XG4gICAgcmV0dXJuIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIH0pO1xuICByZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbihldmVudCl7XG4gICAgdmFyIHdoaWNoO1xuICAgIHdoaWNoID0gZXZlbnQud2hpY2g7XG4gICAgcXVldWUucHVzaEV2ZW50KHtcbiAgICAgIHR5cGU6IEtFWVVQLFxuICAgICAga2V5OiB3aGljaFxuICAgIH0pO1xuICAgIHJldHVybiBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9KTtcbn07XG5vdXQkLmluaXQgPSBpbml0ID0gZnVuY3Rpb24oKXtcbiAgc3RkLmxvZyhcIlNETDo6S2V5Ym9hcmQgLSBNb25pdG9yaW5nIGtleSBpbnB1dFwiKTtcbiAgcmV0dXJuIG1vbml0b3JLZXlzKCk7XG59O1xub3V0JC5LRVlET1dOID0gS0VZRE9XTjtcbm91dCQuS0VZVVAgPSBLRVlVUDsiLCJ2YXIgUmVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVjdCA9IChmdW5jdGlvbigpe1xuICBSZWN0LmRpc3BsYXlOYW1lID0gJ1JlY3QnO1xuICB2YXIgcHJvdG90eXBlID0gUmVjdC5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gUmVjdDtcbiAgZnVuY3Rpb24gUmVjdCh4LCB5LCB3LCBoKXtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy53ID0gdztcbiAgICB0aGlzLmggPSBoO1xuICB9XG4gIHJldHVybiBSZWN0O1xufSgpKTsiLCJ2YXIgc3RkLCBTdXJmYWNlLCBhcHBseVNjYWxlU3R5bGVzLCBjcmVhdGVOZXdTY3JlZW4sIHNldFZpZGVvTW9kZSwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnN0ZCA9IHJlcXVpcmUoJ3N0ZCcpO1xuU3VyZmFjZSA9IHJlcXVpcmUoJy4vc3VyZmFjZScpO1xuYXBwbHlTY2FsZVN0eWxlcyA9IGZ1bmN0aW9uKGNhbnZhcywgc2NhbGVGYWN0b3Ipe1xuICBpZiAoc2NhbGVGYWN0b3IgIT09IDApIHtcbiAgICByZXR1cm4gY2FudmFzLnN0eWxlLndpZHRoID0gY2FudmFzLndpZHRoICogc2NhbGVGYWN0b3IgKyAncHgnO1xuICB9XG59O1xuY3JlYXRlTmV3U2NyZWVuID0gZnVuY3Rpb24odywgaCwgc2NhbGVGYWN0b3Ipe1xuICB2YXIgc2NyZWVuO1xuICBzY3JlZW4gPSBuZXcgU3VyZmFjZShudWxsLCB3LCBoKTtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JlZW4uY2FudmFzKTtcbiAgYXBwbHlTY2FsZVN0eWxlcyhzY3JlZW4uY2FudmFzLCBzY2FsZUZhY3Rvcik7XG4gIHJldHVybiBzY3JlZW47XG59O1xub3V0JC5zZXRWaWRlb01vZGUgPSBzZXRWaWRlb01vZGUgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBzY2FsZUZhY3Rvcil7XG4gIHNjYWxlRmFjdG9yID09IG51bGwgJiYgKHNjYWxlRmFjdG9yID0gMSk7XG4gIHJldHVybiBjcmVhdGVOZXdTY3JlZW4od2lkdGgsIGhlaWdodCwgc2NhbGVGYWN0b3IpO1xufTsiLCJ2YXIgc3RkLCBSZWN0LCBtYWtlVHJhbnNwYXJlbnQsIFN1cmZhY2U7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcblJlY3QgPSByZXF1aXJlKCcuL3JlY3QnKTtcbm1ha2VUcmFuc3BhcmVudCA9IGZ1bmN0aW9uKGRhdGEsIGNvbG9yKXtcbiAgdmFyIGNhbnZhcywgY29udGV4dCwgcGl4ZWxzLCBpJCwgdG8kLCBpO1xuICBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgY2FudmFzLndpZHRoID0gZGF0YS53aWR0aDtcbiAgY2FudmFzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIGNvbnRleHQuZHJhd0ltYWdlKGRhdGEsIDAsIDApO1xuICBwaXhlbHMgPSBjb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICBmb3IgKGkkID0gMCwgdG8kID0gcGl4ZWxzLmRhdGEubGVuZ3RoOyBpJCA8PSB0byQ7IGkkICs9IDQpIHtcbiAgICBpID0gaSQ7XG4gICAgaWYgKHBpeGVscy5kYXRhW2kgKyAwXSA9PT0gY29sb3JbMF0gJiYgcGl4ZWxzLmRhdGFbaSArIDFdID09PSBjb2xvclsxXSAmJiBwaXhlbHMuZGF0YVtpICsgMl0gPT09IGNvbG9yWzJdKSB7XG4gICAgICBwaXhlbHMuZGF0YVtpICsgM10gPSAwO1xuICAgIH1cbiAgfVxuICBjb250ZXh0LnB1dEltYWdlRGF0YShwaXhlbHMsIDAsIDApO1xuICByZXR1cm4gY2FudmFzO1xufTtcbm1vZHVsZS5leHBvcnRzID0gU3VyZmFjZSA9IChmdW5jdGlvbigpe1xuICBTdXJmYWNlLmRpc3BsYXlOYW1lID0gJ1N1cmZhY2UnO1xuICB2YXIgcHJvdG90eXBlID0gU3VyZmFjZS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gU3VyZmFjZTtcbiAgZnVuY3Rpb24gU3VyZmFjZShzcmMsIHdpZHRoLCBoZWlnaHQpe1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICB0aGlzLnJlYWR5ID0gZmFsc2U7XG4gICAgdGhpcy5jb2xvcktleSA9IG51bGw7XG4gICAgdGhpcy5yZXNldENhbnZhc1NpemUoKTtcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAncmVkJztcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgaWYgKHR5cGVvZiBzcmMgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmxvYWRJbWFnZURhdGEoc3JjKTtcbiAgICB9IGVsc2UgaWYgKHNyYyAhPSBudWxsKSB7XG4gICAgICB0aGlzLnNhdmVJbWFnZURhdGEoc3JjKTtcbiAgICB9IGVsc2Uge31cbiAgfVxuICBwcm90b3R5cGUucmVzZXRDYW52YXNTaXplID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICB9O1xuICBwcm90b3R5cGUuaW5oZXJpdFNpemVGcm9tSW1hZ2UgPSBmdW5jdGlvbihkYXRhKXtcbiAgICBpZiAodGhpcy53aWR0aCA9PSBudWxsICYmIHRoaXMuaGVpZ2h0ID09IG51bGwpIHtcbiAgICAgIHRoaXMud2lkdGggPSBkYXRhLm5hdHVyYWxXaWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gZGF0YS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgcmV0dXJuIHRoaXMucmVzZXRDYW52YXNTaXplKCk7XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUubG9hZEltYWdlRGF0YSA9IGZ1bmN0aW9uKHBhdGgpe1xuICAgIHZhciBkYXRhLCB0aGlzJCA9IHRoaXM7XG4gICAgZGF0YSA9IG5ldyBJbWFnZTtcbiAgICBkYXRhLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XG4gICAgICB0aGlzJC5pbmhlcml0U2l6ZUZyb21JbWFnZShkYXRhKTtcbiAgICAgIHJldHVybiB0aGlzJC5zYXZlSW1hZ2VEYXRhKGRhdGEpO1xuICAgIH07XG4gICAgZGF0YS5vbmVycm9yID0gZnVuY3Rpb24oKXtcbiAgICAgIHN0ZC5sb2coXCJDYW50IGxvYWQ6XCIsIHBhdGgpO1xuICAgICAgcmV0dXJuIHRoaXMkLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzJC53aWR0aCwgdGhpcyQuaGVpZ2h0KTtcbiAgICB9O1xuICAgIHJldHVybiBkYXRhLnNyYyA9IHBhdGg7XG4gIH07XG4gIHByb3RvdHlwZS5zYXZlSW1hZ2VEYXRhID0gZnVuY3Rpb24oZGF0YSl7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5jb2xvcktleSA/IG1ha2VUcmFuc3BhcmVudChkYXRhLCB0aGlzLmNvbG9yS2V5KSA6IGRhdGE7XG4gICAgdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgdGhpcy5jdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuZGF0YSwgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9O1xuICBwcm90b3R5cGUuc2V0Q29sb3JLZXkgPSBmdW5jdGlvbihjb2xvcil7XG4gICAgdGhpcy5jb2xvcktleSA9IGNvbG9yO1xuICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zYXZlSW1hZ2VEYXRhKHRoaXMuZGF0YSk7XG4gICAgfVxuICB9O1xuICBwcm90b3R5cGUuZHJhd1JlY3QgPSBmdW5jdGlvbihyZWN0LCBjb2xvcil7XG4gICAgY29sb3IgPT0gbnVsbCAmJiAoY29sb3IgPSAnYmxhY2snKTtcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICByZXR1cm4gdGhpcy5jdHguZmlsbFJlY3QocmVjdC54LCByZWN0LnksIHJlY3QudywgcmVjdC5oKTtcbiAgfTtcbiAgcHJvdG90eXBlLmRyYXdCb3ggPSBmdW5jdGlvbihyZWN0LCBjb2xvcil7XG4gICAgY29sb3IgPT0gbnVsbCAmJiAoY29sb3IgPSAnYmxhY2snKTtcbiAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgIHRoaXMuY3R4Lm1vdmVUbygwLjUgKyByZWN0LngsIDAuNSArIHJlY3QueSk7XG4gICAgdGhpcy5jdHgubGluZVRvKDAuNSArIHJlY3QueCwgLTAuNSArIHJlY3QueSArIHJlY3QuaCk7XG4gICAgdGhpcy5jdHgubGluZVRvKC0wLjUgKyByZWN0LnggKyByZWN0LncsIC0wLjUgKyByZWN0LnkgKyByZWN0LmgpO1xuICAgIHRoaXMuY3R4LmxpbmVUbygtMC41ICsgcmVjdC54ICsgcmVjdC53LCAwLjUgKyByZWN0LnkpO1xuICAgIHRoaXMuY3R4LmxpbmVUbygwLjUgKyByZWN0LngsIDAuNSArIHJlY3QueSk7XG4gICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgcmV0dXJuIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xuICB9O1xuICBwcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9O1xuICBTdXJmYWNlLnNldENvbG9yS2V5ID0gZnVuY3Rpb24oc3VyZmFjZSwgY29sb3Ipe1xuICAgIHJldHVybiBzdXJmYWNlLnNldENvbG9yS2V5KGNvbG9yKTtcbiAgfTtcbiAgU3VyZmFjZS5ibGl0U3VyZmFjZSA9IGZ1bmN0aW9uKHNvdXJjZSwgc3JjUmVjdCwgZGVzdCwgZGVzdFJlY3Qpe1xuICAgIGlmIChzcmNSZWN0KSB7XG4gICAgICByZXR1cm4gZGVzdC5jdHguZHJhd0ltYWdlKHNvdXJjZS5jYW52YXMsIHNyY1JlY3QueCwgc3JjUmVjdC55LCBzcmNSZWN0LncsIHNyY1JlY3QuaCwgZGVzdFJlY3QueCwgZGVzdFJlY3QueSwgZGVzdFJlY3QudywgZGVzdFJlY3QuaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZXN0LmN0eC5kcmF3SW1hZ2Uoc291cmNlLmNhbnZhcywgZGVzdFJlY3QueCwgZGVzdFJlY3QueSwgZGVzdFJlY3QudywgZGVzdFJlY3QuaCk7XG4gICAgfVxuICB9O1xuICBTdXJmYWNlLmxvYWRJbWFnZSA9IGZ1bmN0aW9uKHBhdGgpe1xuICAgIHJldHVybiBuZXcgU3VyZmFjZShwYXRoKTtcbiAgfTtcbiAgcmV0dXJuIFN1cmZhY2U7XG59KCkpOyIsInZhciBzdGFydFRpbWUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGFydFRpbWUgPSAwO1xuaW1wb3J0JChvdXQkLCB7XG4gIGluaXQ6IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gIH0sXG4gIGdldFRpY2tzOiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICB9XG59KTtcbmZ1bmN0aW9uIGltcG9ydCQob2JqLCBzcmMpe1xuICB2YXIgb3duID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGlmIChvd24uY2FsbChzcmMsIGtleSkpIG9ialtrZXldID0gc3JjW2tleV07XG4gIHJldHVybiBvYmo7XG59IiwidmFyIFNETCwgc3RkLCB1bml0cywgZGl2LCBrSGFsZlRpbGUsIHRpbGVUb1B4LCBnYW1lVG9QeCwgU3ByaXRlLCBBbmltYXRlZFNwcml0ZSwgTnVtYmVyU3ByaXRlLCBWYXJ5aW5nV2lkdGhTcHJpdGUsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5TREwgPSByZXF1aXJlKCdTREwnKTtcbnN0ZCA9IHJlcXVpcmUoJ3N0ZCcpO1xudW5pdHMgPSByZXF1aXJlKCcuL3VuaXRzJyk7XG5kaXYgPSBzdGQuZGl2O1xua0hhbGZUaWxlID0gdW5pdHMua0hhbGZUaWxlLCB0aWxlVG9QeCA9IHVuaXRzLnRpbGVUb1B4LCBnYW1lVG9QeCA9IHVuaXRzLmdhbWVUb1B4O1xub3V0JC5TcHJpdGUgPSBTcHJpdGUgPSAoZnVuY3Rpb24oKXtcbiAgU3ByaXRlLmRpc3BsYXlOYW1lID0gJ1Nwcml0ZSc7XG4gIHZhciBwcm90b3R5cGUgPSBTcHJpdGUucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IFNwcml0ZTtcbiAgZnVuY3Rpb24gU3ByaXRlKGdyYXBoaWNzLCBwYXRoLCBzb3VyY2VYLCBzb3VyY2VZLCB3aWR0aCwgaGVpZ2h0KXtcbiAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgdGhpcy5zb3VyY2VSZWN0ID0gbmV3IFNETC5SZWN0KHNvdXJjZVgsIHNvdXJjZVksIHdpZHRoLCBoZWlnaHQpO1xuICAgIHRoaXMuc3ByaXRlU2hlZXQgPSBncmFwaGljcy5sb2FkSW1hZ2UocGF0aCwgdHJ1ZSk7XG4gIH1cbiAgcHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7fTtcbiAgcHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihncmFwaGljcywgeCwgeSl7XG4gICAgdmFyIGRlc3RSZWN0O1xuICAgIGRlc3RSZWN0ID0gbmV3IFNETC5SZWN0KHVuaXRzLmdhbWVUb1B4KHgpLCB1bml0cy5nYW1lVG9QeCh5KSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgIHJldHVybiBncmFwaGljcy5ibGl0U3VyZmFjZSh0aGlzLnNwcml0ZVNoZWV0LCB0aGlzLnNvdXJjZVJlY3QsIGRlc3RSZWN0KTtcbiAgfTtcbiAgcmV0dXJuIFNwcml0ZTtcbn0oKSk7XG5vdXQkLkFuaW1hdGVkU3ByaXRlID0gQW5pbWF0ZWRTcHJpdGUgPSAoZnVuY3Rpb24oc3VwZXJjbGFzcyl7XG4gIHZhciBwcm90b3R5cGUgPSBleHRlbmQkKChpbXBvcnQkKEFuaW1hdGVkU3ByaXRlLCBzdXBlcmNsYXNzKS5kaXNwbGF5TmFtZSA9ICdBbmltYXRlZFNwcml0ZScsIEFuaW1hdGVkU3ByaXRlKSwgc3VwZXJjbGFzcykucHJvdG90eXBlLCBjb25zdHJ1Y3RvciA9IEFuaW1hdGVkU3ByaXRlO1xuICBmdW5jdGlvbiBBbmltYXRlZFNwcml0ZShncmFwaGljcywgcGF0aCwgc291cmNlWCwgc291cmNlWSwgd2lkdGgsIGhlaWdodCwgZnBzLCBudW1GcmFtZXMpe1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLmZwcyA9IGZwcztcbiAgICB0aGlzLm51bUZyYW1lcyA9IG51bUZyYW1lcztcbiAgICBBbmltYXRlZFNwcml0ZS5zdXBlcmNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5mcmFtZVRpbWUgPSAxMDAwIC8gdGhpcy5mcHM7XG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSAwO1xuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuICB9XG4gIHByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihlbGFwc2VkVGltZSl7XG4gICAgdGhpcy5lbGFwc2VkVGltZSArPSBlbGFwc2VkVGltZTtcbiAgICBpZiAodGhpcy5lbGFwc2VkVGltZSA+IHRoaXMuZnJhbWVUaW1lKSB7XG4gICAgICB0aGlzLmN1cnJlbnRGcmFtZSArPSAxO1xuICAgICAgdGhpcy5lbGFwc2VkVGltZSA9IDA7XG4gICAgICBpZiAodGhpcy5jdXJyZW50RnJhbWUgPCB0aGlzLm51bUZyYW1lcykge1xuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2VSZWN0LnggKz0gdGhpcy5zb3VyY2VSZWN0Lnc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNvdXJjZVJlY3QueCAtPSB0aGlzLnNvdXJjZVJlY3QudyAqICh0aGlzLm51bUZyYW1lcyAtIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50RnJhbWUgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgcmV0dXJuIEFuaW1hdGVkU3ByaXRlO1xufShTcHJpdGUpKTtcbm91dCQuTnVtYmVyU3ByaXRlID0gTnVtYmVyU3ByaXRlID0gKGZ1bmN0aW9uKCl7XG4gIE51bWJlclNwcml0ZS5kaXNwbGF5TmFtZSA9ICdOdW1iZXJTcHJpdGUnO1xuICB2YXIga0RpZ2l0U3JjWSwga0RpZ2l0U3JjV2lkdGgsIGtEaWdpdFNyY0hlaWdodCwga09wUGx1c1NyY1gsIGtPcE1pbnVzU3JjWCwga09wU3JjWSwga0RpZ2l0U2l6ZSwga1JhZGl4LCByZWYkLCBXSElURSwgUkVELCBQTFVTLCBNSU5VUywgTk9ORSwgcHJvdG90eXBlID0gTnVtYmVyU3ByaXRlLnByb3RvdHlwZSwgY29uc3RydWN0b3IgPSBOdW1iZXJTcHJpdGU7XG4gIGtEaWdpdFNyY1kgPSB0aWxlVG9QeCgzLjUpO1xuICBrRGlnaXRTcmNXaWR0aCA9IHRpbGVUb1B4KDAuNSk7XG4gIGtEaWdpdFNyY0hlaWdodCA9IHRpbGVUb1B4KDAuNSk7XG4gIGtPcFBsdXNTcmNYID0gdGlsZVRvUHgoMik7XG4gIGtPcE1pbnVzU3JjWCA9IHRpbGVUb1B4KDIuNSk7XG4gIGtPcFNyY1kgPSB0aWxlVG9QeCgzKTtcbiAga0RpZ2l0U2l6ZSA9IHVuaXRzLmtIYWxmVGlsZTtcbiAga1JhZGl4ID0gMTA7XG4gIHJlZiQgPSBzdGRbJ2VudW0nXSwgV0hJVEUgPSByZWYkWzBdLCBSRUQgPSByZWYkWzFdO1xuICByZWYkID0gc3RkWydlbnVtJ10sIFBMVVMgPSByZWYkWzBdLCBNSU5VUyA9IHJlZiRbMV0sIE5PTkUgPSByZWYkWzJdO1xuICBmdW5jdGlvbiBOdW1iZXJTcHJpdGUoZ3JhcGhpY3MsIG51bSwgbGVuLCBjb2xvciwgb3Ape1xuICAgIHZhciBzcmNZO1xuICAgIHRoaXMubnVtID0gbnVtO1xuICAgIHRoaXMubGVuID0gbGVuO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLm9wID0gb3A7XG4gICAgdGhpcy5kaWdpdHMgPSBOdW1iZXJTcHJpdGUuc2VwZXJhdGVEaWdpdHModGhpcy5udW0pO1xuICAgIHRoaXMubnVtRGlnaXRzID0gdGhpcy5kaWdpdHMubGVuZ3RoO1xuICAgIHRoaXMucGFkZGluZyA9IHRoaXMubGVuID09PSAwXG4gICAgICA/IDBcbiAgICAgIDoga0RpZ2l0U2l6ZSAqICh0aGlzLmxlbiAtIHRoaXMubnVtRGlnaXRzKTtcbiAgICBzcmNZID0gdGhpcy5jb2xvciA9PT0gV0hJVEVcbiAgICAgID8ga0RpZ2l0U3JjWVxuICAgICAgOiBrRGlnaXRTcmNZICsgZ2FtZVRvUHgoa0hhbGZUaWxlKTtcbiAgICB0aGlzLmdseXBocyA9IHRoaXMuZGlnaXRzLm1hcChmdW5jdGlvbihpdCl7XG4gICAgICByZXR1cm4gbmV3IFNwcml0ZShncmFwaGljcywgJ2RhdGEvMTZ4MTYvVGV4dEJveC5ibXAnLCB0aWxlVG9QeCgwLjUgKiBpdCksIHNyY1ksIGtEaWdpdFNyY1dpZHRoLCBrRGlnaXRTcmNIZWlnaHQpO1xuICAgIH0pO1xuICAgIGlmICh0aGlzLm9wID09PSBQTFVTKSB7XG4gICAgICB0aGlzLmdseXBocy5wdXNoKG5ldyBTcHJpdGUoZ3JhcGhpY3MsICdkYXRhLzE2eDE2L1RleHRCb3guYm1wJywga09wUGx1c1NyY1gsIGtPcFNyY1ksIGtEaWdpdFNyY1dpZHRoLCBrRGlnaXRTcmNIZWlnaHQpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMub3AgPT09IE1JTlVTKSB7XG4gICAgICB0aGlzLmdseXBocy5wdXNoKG5ldyBTcHJpdGUoZ3JhcGhpY3MsICdkYXRhLzE2eDE2L1RleHRCb3guYm1wJywga09wTWludXNTcmNYLCBrT3BTcmNZLCBrRGlnaXRTcmNXaWR0aCwga0RpZ2l0U3JjSGVpZ2h0KSk7XG4gICAgfVxuICAgIHRoaXMud2lkdGggPSBrSGFsZlRpbGUgKiB0aGlzLmdseXBocy5sZW5ndGg7XG4gICAgdGhpcy5oZWlnaHQgPSBrSGFsZlRpbGU7XG4gIH1cbiAgcHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihncmFwaGljcywgeCwgeSwgY2VudGVyZWQpe1xuICAgIHZhciBpJCwgcmVmJCwgbGVuJCwgaSwgZ2x5cGgsIG9mZnNldCwgcmVzdWx0cyQgPSBbXTtcbiAgICBjZW50ZXJlZCA9PSBudWxsICYmIChjZW50ZXJlZCA9IGZhbHNlKTtcbiAgICBpZiAoY2VudGVyZWQpIHtcbiAgICAgIGZvciAoaSQgPSAwLCBsZW4kID0gKHJlZiQgPSB0aGlzLmdseXBocykubGVuZ3RoOyBpJCA8IGxlbiQ7ICsraSQpIHtcbiAgICAgICAgaSA9IGkkO1xuICAgICAgICBnbHlwaCA9IHJlZiRbaSRdO1xuICAgICAgICBvZmZzZXQgPSBrRGlnaXRTaXplICogKHRoaXMuZGlnaXRzLmxlbmd0aCAtIDEgLSBpKTtcbiAgICAgICAgcmVzdWx0cyQucHVzaChnbHlwaC5kcmF3KGdyYXBoaWNzLCB4ICsgdGhpcy5wYWRkaW5nICsgb2Zmc2V0IC0gdGhpcy53aWR0aCAvIDIsIHkgLSB0aGlzLmhlaWdodCAvIDIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzJDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpJCA9IDAsIGxlbiQgPSAocmVmJCA9IHRoaXMuZ2x5cGhzKS5sZW5ndGg7IGkkIDwgbGVuJDsgKytpJCkge1xuICAgICAgICBpID0gaSQ7XG4gICAgICAgIGdseXBoID0gcmVmJFtpJF07XG4gICAgICAgIG9mZnNldCA9IGtEaWdpdFNpemUgKiAodGhpcy5kaWdpdHMubGVuZ3RoIC0gMSAtIGkpO1xuICAgICAgICByZXN1bHRzJC5wdXNoKGdseXBoLmRyYXcoZ3JhcGhpY3MsIHggKyB0aGlzLnBhZGRpbmcgKyBvZmZzZXQsIHkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzJDtcbiAgICB9XG4gIH07XG4gIE51bWJlclNwcml0ZS5zZXBlcmF0ZURpZ2l0cyA9IGZ1bmN0aW9uKG51bSl7XG4gICAgdmFyIGRpZ2l0LCByZXN1bHRzJCA9IFtdO1xuICAgIGlmIChudW0gPT09IDApIHtcbiAgICAgIHJldHVybiBbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChudW0gIT09IDApIHtcbiAgICAgICAgZGlnaXQgPSBudW0gJSBrUmFkaXg7XG4gICAgICAgIG51bSA9IGRpdihudW0sIGtSYWRpeCk7XG4gICAgICAgIHJlc3VsdHMkLnB1c2goZGlnaXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHMkO1xuICAgIH1cbiAgfTtcbiAgTnVtYmVyU3ByaXRlLkhVRE51bWJlciA9IGZ1bmN0aW9uKGdyYXBoaWNzLCBudW0sIGxlbil7XG4gICAgdGhpcy5udW0gPSBudW07XG4gICAgdGhpcy5sZW4gPSBsZW47XG4gICAgcmV0dXJuIG5ldyBOdW1iZXJTcHJpdGUoZ3JhcGhpY3MsIHRoaXMubnVtLCB0aGlzLmxlbiwgV0hJVEUsIE5PTkUpO1xuICB9O1xuICBOdW1iZXJTcHJpdGUuRGFtYWdlTnVtYmVyID0gZnVuY3Rpb24oZ3JhcGhpY3MsIG51bSl7XG4gICAgdGhpcy5udW0gPSBudW07XG4gICAgcmV0dXJuIG5ldyBOdW1iZXJTcHJpdGUoZ3JhcGhpY3MsIHRoaXMubnVtLCAwLCBSRUQsIE1JTlVTKTtcbiAgfTtcbiAgTnVtYmVyU3ByaXRlLkV4cGVyaWVuY2VOdW1iZXIgPSBmdW5jdGlvbihncmFwaGljcywgbnVtKXtcbiAgICB0aGlzLm51bSA9IG51bTtcbiAgICByZXR1cm4gbmV3IE51bWJlclNwcml0ZShncmFwaGljcywgdGhpcy5udW0sIDAsIFdISVRFLCBQTFVTKTtcbiAgfTtcbiAgcmV0dXJuIE51bWJlclNwcml0ZTtcbn0oKSk7XG5vdXQkLlZhcnlpbmdXaWR0aFNwcml0ZSA9IFZhcnlpbmdXaWR0aFNwcml0ZSA9IChmdW5jdGlvbihzdXBlcmNsYXNzKXtcbiAgdmFyIHByb3RvdHlwZSA9IGV4dGVuZCQoKGltcG9ydCQoVmFyeWluZ1dpZHRoU3ByaXRlLCBzdXBlcmNsYXNzKS5kaXNwbGF5TmFtZSA9ICdWYXJ5aW5nV2lkdGhTcHJpdGUnLCBWYXJ5aW5nV2lkdGhTcHJpdGUpLCBzdXBlcmNsYXNzKS5wcm90b3R5cGUsIGNvbnN0cnVjdG9yID0gVmFyeWluZ1dpZHRoU3ByaXRlO1xuICBmdW5jdGlvbiBWYXJ5aW5nV2lkdGhTcHJpdGUoZ3JhcGhpY3MsIHBhdGgsIHNvdXJjZVgsIHNvdXJjZVksIGluaXRpYWxXaWR0aCwgaGVpZ2h0KXtcbiAgICB0aGlzLmluaXRpYWxXaWR0aCA9IGluaXRpYWxXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICBWYXJ5aW5nV2lkdGhTcHJpdGUuc3VwZXJjbGFzcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMud2lkdGggPSB0aGlzLmluaXRpYWxXaWR0aDtcbiAgfVxuICBwcm90b3R5cGUuc2V0V2lkdGggPSBmdW5jdGlvbih3aWR0aCl7XG4gICAgcmV0dXJuIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgfTtcbiAgcmV0dXJuIFZhcnlpbmdXaWR0aFNwcml0ZTtcbn0oU3ByaXRlKSk7XG5mdW5jdGlvbiBleHRlbmQkKHN1Yiwgc3VwKXtcbiAgZnVuY3Rpb24gZnVuKCl7fSBmdW4ucHJvdG90eXBlID0gKHN1Yi5zdXBlcmNsYXNzID0gc3VwKS5wcm90b3R5cGU7XG4gIChzdWIucHJvdG90eXBlID0gbmV3IGZ1bikuY29uc3RydWN0b3IgPSBzdWI7XG4gIGlmICh0eXBlb2Ygc3VwLmV4dGVuZGVkID09ICdmdW5jdGlvbicpIHN1cC5leHRlbmRlZChzdWIpO1xuICByZXR1cm4gc3ViO1xufVxuZnVuY3Rpb24gaW1wb3J0JChvYmosIHNyYyl7XG4gIHZhciBvd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgaWYgKG93bi5jYWxsKHNyYywga2V5KSkgb2JqW2tleV0gPSBzcmNba2V5XTtcbiAgcmV0dXJuIG9iajtcbn0iLCJ2YXIgcmVmJCwgaWQsIG1hcCwgZmlsdGVyLCBhbnksIGRpdiwgbG9nLCBpbmZvLCBvYmpNYXAsIGZsaXAsIGRlbGF5LCByb3VuZCwgZmxvb3IsIGFicywgbWF4LCBtaW4sIHNpbiwgb3V0JCA9IHR5cGVvZiBleHBvcnRzICE9ICd1bmRlZmluZWQnICYmIGV4cG9ydHMgfHwgdGhpcztcbnJlZiQgPSByZXF1aXJlKCdwcmVsdWRlLWxzJyksIGlkID0gcmVmJC5pZCwgbWFwID0gcmVmJC5tYXAsIGZpbHRlciA9IHJlZiQuZmlsdGVyLCBhbnkgPSByZWYkLmFueSwgZGl2ID0gcmVmJC5kaXY7XG5vdXQkLmxvZyA9IGxvZyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBhcmd1bWVudHNbMF07XG59O1xub3V0JC5pbmZvID0gaW5mbyA9IGZ1bmN0aW9uKCl7XG4gIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBhcmd1bWVudHMpO1xuICByZXR1cm4gYXJndW1lbnRzWzBdO1xufTtcbm91dCQub2JqTWFwID0gb2JqTWFwID0gY3VycnkkKGZ1bmN0aW9uKM67LCBvKXtcbiAgdmFyIGssIHYsIHJlc3VsdHMkID0gW107XG4gIGZvciAoayBpbiBvKSB7XG4gICAgdiA9IG9ba107XG4gICAgcmVzdWx0cyQucHVzaCjOuyhrLCB2KSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHMkO1xufSk7XG5vdXQkLmZsaXAgPSBmbGlwID0gZnVuY3Rpb24ozrspe1xuICByZXR1cm4gY3VycnkkKGZ1bmN0aW9uKGEsIGIpe1xuICAgIHJldHVybiDOuyhiLCBhKTtcbiAgfSk7XG59O1xub3V0JC5kZWxheSA9IGRlbGF5ID0gZmxpcChzZXRUaW1lb3V0KTtcbm91dCQucm91bmQgPSByb3VuZCA9IE1hdGgucm91bmQ7XG5vdXQkLmZsb29yID0gZmxvb3IgPSBNYXRoLmZsb29yO1xub3V0JC5hYnMgPSBhYnMgPSBNYXRoLmFicztcbm91dCQubWF4ID0gbWF4ID0gTWF0aC5tYXg7XG5vdXQkLm1pbiA9IG1pbiA9IE1hdGgubWluO1xub3V0JC5zaW4gPSBzaW4gPSBNYXRoLnNpbjtcbnJlZiQgPSBvdXQkO1xucmVmJC5pZCA9IGlkO1xucmVmJC5hbnkgPSBhbnk7XG5yZWYkLm1hcCA9IG1hcDtcbnJlZiQuZmlsdGVyID0gZmlsdGVyO1xucmVmJC5kaXYgPSBkaXY7XG5yZWYkWydlbnVtJ10gPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTAsIDExLCAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMTksIDIwXTtcbmZ1bmN0aW9uIGN1cnJ5JChmLCBib3VuZCl7XG4gIHZhciBjb250ZXh0LFxuICBfY3VycnkgPSBmdW5jdGlvbihhcmdzKSB7XG4gICAgcmV0dXJuIGYubGVuZ3RoID4gMSA/IGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgcGFyYW1zID0gYXJncyA/IGFyZ3MuY29uY2F0KCkgOiBbXTtcbiAgICAgIGNvbnRleHQgPSBib3VuZCA/IGNvbnRleHQgfHwgdGhpcyA6IHRoaXM7XG4gICAgICByZXR1cm4gcGFyYW1zLnB1c2guYXBwbHkocGFyYW1zLCBhcmd1bWVudHMpIDxcbiAgICAgICAgICBmLmxlbmd0aCAmJiBhcmd1bWVudHMubGVuZ3RoID9cbiAgICAgICAgX2N1cnJ5LmNhbGwoY29udGV4dCwgcGFyYW1zKSA6IGYuYXBwbHkoY29udGV4dCwgcGFyYW1zKTtcbiAgICB9IDogZjtcbiAgfTtcbiAgcmV0dXJuIF9jdXJyeSgpO1xufSIsInZhciBzdGQsIGNvbmZpZywga1BpLCBrR2FtZVVuaXRzUGVyVGlsZSwga1BpeGVsU2NhbGVGYWN0b3IsIEdhbWUsIFBpeGVsLCBUaWxlLCBEZWdyZWVzLCBGUFMsIE1TLCBWZWxvY2l0eSwgQWNjZWxlcmF0aW9uLCBIUCwgZ2FtZVRvUHgsIGdhbWVUb1RpbGUsIHRpbGVUb0dhbWUsIHRpbGVUb1B4LCBkZWdUb1JhZCwgcHhUb0dhbWUsIGtPbmVUaWxlLCBrSGFsZlRpbGUsIGtUaWxlUHgsIG91dCQgPSB0eXBlb2YgZXhwb3J0cyAhPSAndW5kZWZpbmVkJyAmJiBleHBvcnRzIHx8IHRoaXM7XG5zdGQgPSByZXF1aXJlKCdzdGQnKTtcbmNvbmZpZyA9IHJlcXVpcmUoJy4vY29uZmlnJyk7XG5rUGkgPSBNYXRoLlBJO1xua0dhbWVVbml0c1BlclRpbGUgPSAzMjtcbmtQaXhlbFNjYWxlRmFjdG9yID0ga0dhbWVVbml0c1BlclRpbGUgLyBjb25maWcua0dyYXBoaWNzUXVhbGl0eTtcbm91dCQuR2FtZSA9IEdhbWUgPSBzdGQuaWQ7XG5vdXQkLlBpeGVsID0gUGl4ZWwgPSBzdGQuZmxvb3I7XG5vdXQkLlRpbGUgPSBUaWxlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHN0ZC5hYnMoc3RkLmZsb29yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xufTtcbm91dCQuRGVncmVlcyA9IERlZ3JlZXMgPSBzdGQuaWQ7XG5vdXQkLkZQUyA9IEZQUyA9IHN0ZC5pZDtcbm91dCQuTVMgPSBNUyA9IHN0ZC5pZDtcbm91dCQuVmVsb2NpdHkgPSBWZWxvY2l0eSA9IHN0ZC5pZDtcbm91dCQuQWNjZWxlcmF0aW9uID0gQWNjZWxlcmF0aW9uID0gc3RkLmlkO1xub3V0JC5IUCA9IEhQID0gc3RkLmZsb29yO1xub3V0JC5nYW1lVG9QeCA9IGdhbWVUb1B4ID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIFBpeGVsKChmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0IC8ga1BpeGVsU2NhbGVGYWN0b3I7XG4gIH0pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xufTtcbm91dCQuZ2FtZVRvVGlsZSA9IGdhbWVUb1RpbGUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gVGlsZSgoZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdCAvIGtHYW1lVW5pdHNQZXJUaWxlO1xuICB9KS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbn07XG5vdXQkLnRpbGVUb0dhbWUgPSB0aWxlVG9HYW1lID0gKGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICoga0dhbWVVbml0c1BlclRpbGU7XG59KTtcbm91dCQudGlsZVRvUHggPSB0aWxlVG9QeCA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiBnYW1lVG9QeCh0aWxlVG9HYW1lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xufTtcbm91dCQuZGVnVG9SYWQgPSBkZWdUb1JhZCA9IChmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAqIGtQaSAvIDE4MDtcbn0pO1xub3V0JC5weFRvR2FtZSA9IHB4VG9HYW1lID0gKGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0ICoga1BpeGVsU2NhbGVGYWN0b3I7XG59KTtcbm91dCQua09uZVRpbGUgPSBrT25lVGlsZSA9IHRpbGVUb0dhbWUoMSk7XG5vdXQkLmtIYWxmVGlsZSA9IGtIYWxmVGlsZSA9IHRpbGVUb0dhbWUoMC41KTtcbm91dCQua1RpbGVQeCA9IGtUaWxlUHggPSB0aWxlVG9QeCgxKTsiXX0=
