(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var readout, Game;
readout = require('./readout');
Game = require('./game');
readout.install();
Game.start();
},{"./game":18,"./readout":35}],2:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var apply, curry, flip, fix, over;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(function(){
    return not$(p.apply(this, arguments));
  }, xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function not$(x){ return !x; }
},{}],4:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],5:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, results$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    results$[key] = values[i];
  }
  return results$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
    results$[k] = f(x);
  }
  return results$;
});
compact = function(object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (x) {
      results$[k] = x;
    }
  }
  return results$;
};
filter = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
reject = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (!f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],7:[function(require,module,exports){
// Generated by LiveScript 1.2.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.1';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":2,"./List.js":3,"./Num.js":4,"./Obj.js":5,"./Str.js":6}],8:[function(require,module,exports){
var std, kGravity, kTerminalSpeed, ZeroAccelerator, ConstantAccelerator, BidirectionalAccelerator, FrictionAccelerator, kZero, kGravityAcc, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
out$.kGravity = kGravity = 0.00078125;
out$.kTerminalSpeed = kTerminalSpeed = 0.2998046875;
out$.ZeroAccelerator = ZeroAccelerator = (function(){
  ZeroAccelerator.displayName = 'ZeroAccelerator';
  var prototype = ZeroAccelerator.prototype, constructor = ZeroAccelerator;
  function ZeroAccelerator(){}
  prototype.updateVelocity = function(){};
  return ZeroAccelerator;
}());
out$.ConstantAccelerator = ConstantAccelerator = (function(){
  ConstantAccelerator.displayName = 'ConstantAccelerator';
  var prototype = ConstantAccelerator.prototype, constructor = ConstantAccelerator;
  function ConstantAccelerator(acc, maxVel){
    this.acc = acc;
    this.maxVel = maxVel;
    this.updateVelocity = this.acc < 0
      ? function(kinematics, elapsedTime){
        return kinematics.velocity = std.max(kinematics.velocity + this.acc * elapsedTime, this.maxVel);
      }
      : function(kinematics, elapsedTime){
        return kinematics.velocity = std.min(kinematics.velocity + this.acc * elapsedTime, this.maxVel);
      };
  }
  return ConstantAccelerator;
}());
out$.BidirectionalAccelerator = BidirectionalAccelerator = (function(){
  BidirectionalAccelerator.displayName = 'BidirectionalAccelerator';
  var prototype = BidirectionalAccelerator.prototype, constructor = BidirectionalAccelerator;
  function BidirectionalAccelerator(acc, maxVel){
    this.acc = acc;
    this.maxVel = maxVel;
    this.positive = new ConstantAccelerator(this.acc, this.maxVel);
    this.negative = new ConstantAccelerator(-this.acc, -this.maxVel);
  }
  return BidirectionalAccelerator;
}());
out$.FrictionAccelerator = FrictionAccelerator = (function(){
  FrictionAccelerator.displayName = 'FrictionAccelerator';
  var prototype = FrictionAccelerator.prototype, constructor = FrictionAccelerator;
  function FrictionAccelerator(friction){
    this.friction = friction;
  }
  prototype.updateVelocity = function(kinematics, elapsedTime){
    return kinematics.velocity = kinematics.velocity > 0
      ? std.max(0, kinematics.velocity - this.friction * elapsedTime)
      : std.min(0, kinematics.velocity + this.friction * elapsedTime);
  };
  return FrictionAccelerator;
}());
out$.kZero = kZero = new ZeroAccelerator;
out$.kGravityAcc = kGravityAcc = new ConstantAccelerator(kGravity, kTerminalSpeed);
},{"std":48}],9:[function(require,module,exports){
var std, units, kHalfTile, tpx, tileToGame, gameToPx, WALL_TILE, Sprite, ref$, SpriteState, State, Projectile, StarParticle, WallParticle, Rect, kArmsSpritePath, kSpriteWidth, kSpriteHeight, kUpOffset, kDownOffset, kHorizontalOffset, kRightOffset, kLeftOffset, UP, DOWN, LEFT, RIGHT, PolarStarProjectile, PolarStar, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
kHalfTile = units.kHalfTile, tpx = units.tileToPx, tileToGame = units.tileToGame, gameToPx = units.gameToPx;
WALL_TILE = require('./map').WALL_TILE;
Sprite = require('./sprite').Sprite;
ref$ = require('./spritestate'), SpriteState = ref$.SpriteState, State = ref$.State;
Projectile = require('./projectile').Projectile;
StarParticle = require('./star-particle').StarParticle;
WallParticle = require('./wall-particle').WallParticle;
Rect = require('./rectangle').Rectangle;
kArmsSpritePath = 'Arms';
kSpriteWidth = 1.5;
kSpriteHeight = 1.0;
kUpOffset = 2;
kDownOffset = 4;
kHorizontalOffset = 0;
kRightOffset = 1;
kLeftOffset = 0;
ref$ = std['enum'], UP = ref$[0], DOWN = ref$[1], LEFT = ref$[2], RIGHT = ref$[3];
PolarStarProjectile = (function(superclass){
  var kLifespans, kSpeeds, kCollisionWidths, kCollisionHeights, kDamages, prototype = extend$((import$(PolarStarProjectile, superclass).displayName = 'PolarStarProjectile', PolarStarProjectile), superclass).prototype, constructor = PolarStarProjectile;
  kLifespans = [tileToGame(3.5), tileToGame(5), tileToGame(7)];
  kSpeeds = [0.6, 0.6, 0.6];
  kCollisionWidths = [32, 32, 32];
  kCollisionHeights = [4, 8, 16];
  kDamages = [1, 2, 4];
  function PolarStarProjectile(sprite, state, x, y, gunLevel){
    this.sprite = sprite;
    this.gunLevel = gunLevel;
    PolarStarProjectile.superclass.call(this, kDamages[this.gunLevel - 1]);
    this.offset = 0;
    this.lifespan = kLifespans[this.gunLevel - 1];
    this.alive = true;
    std.log('SFX: Pew!');
    if (state.HORIZONTAL) {
      this.width = kCollisionWidths[this.gunLevel - 1];
      this.height = kCollisionHeights[this.gunLevel - 1];
      this.vertical = false;
    } else {
      this.width = kCollisionHeights[this.gunLevel - 1];
      this.height = kCollisionWidths[this.gunLevel - 1];
      this.vertical = true;
    }
    this.mode = (function(){
      switch (true) {
      case state.UP:
        return UP;
      case state.DOWN:
        return DOWN;
      case state.LEFT:
        return LEFT;
      case state.RIGHT:
        return RIGHT;
      }
    }());
    Object.defineProperties(this, {
      x: {
        get: !state.HORIZONTAL
          ? function(){
            return x;
          }
          : state.LEFT
            ? function(){
              return x - this.offset;
            }
            : state.RIGHT ? function(){
              return x + this.offset;
            } : void 8
      },
      y: {
        get: state.HORIZONTAL
          ? function(){
            return y;
          }
          : state.UP
            ? function(){
              return y - this.offset;
            }
            : state.DOWN ? function(){
              return y + this.offset;
            } : void 8
      }
    });
  }
  prototype.collisionRectangle = function(){
    return new Rect(this.x + kHalfTile - this.width / 2, this.y + kHalfTile - this.height / 2, this.width, this.height);
  };
  prototype.update = function(elapsedTime, map, ptools){
    var i$, ref$, len$, tile, tileRect, particleX, particleY;
    this.offset += kSpeeds[this.gunLevel - 1] * elapsedTime;
    for (i$ = 0, len$ = (ref$ = map.getCollidingTiles(this.collisionRectangle())).length; i$ < len$; ++i$) {
      tile = ref$[i$];
      if (tile.type === WALL_TILE) {
        tileRect = new Rect(tileToGame(tile.col), tileToGame(tile.row), tileToGame(1), tileToGame(1));
        particleX = this.x;
        particleY = this.y;
        switch (this.mode) {
        case UP:
          particleY = tileRect.bottom - kHalfTile;
          break;
        case DOWN:
          particleY = tileRect.top - kHalfTile;
          break;
        case LEFT:
          particleX = tileRect.right - kHalfTile;
          break;
        case RIGHT:
          particleX = tileRect.left - kHalfTile;
        }
        ptools.frontSystem.addNewParticle(new WallParticle(ptools.graphics, particleX, particleY));
        return false;
      }
    }
    if (!this.alive) {
      return false;
    } else if (this.offset >= this.lifespan) {
      ptools.frontSystem.addNewParticle(new StarParticle(ptools.graphics, this.x, this.y));
      return false;
    } else {
      return true;
    }
  };
  prototype.draw = function(graphics){
    this.sprite.draw(graphics, this.x, this.y);
    return graphics.visualiseRect(this.collisionRectangle());
  };
  prototype.collideWithEnemy = function(){
    return this.alive = false;
  };
  return PolarStarProjectile;
}(Projectile));
out$.PolarStar = PolarStar = (function(){
  PolarStar.displayName = 'PolarStar';
  var kExperiences, kPolarStarIndex, kProjectileSrcYs, kProjectileSrcXs, kNozzleHorizY, kNozzleHorizLeftX, kNozzleHorizRightX, kNozzleUpY, kNozzleUpLeftX, kNozzleUpRightX, kNozzleDownY, kNozzleDownLeftX, kNozzleDownRightX, prototype = PolarStar.prototype, constructor = PolarStar;
  kExperiences = [0, 10, 30, 40];
  kPolarStarIndex = 2;
  kProjectileSrcYs = [2, 2, 3];
  kProjectileSrcXs = [8, 10, 8];
  kNozzleHorizY = 23;
  kNozzleHorizLeftX = 10;
  kNozzleHorizRightX = 38;
  kNozzleUpY = 4;
  kNozzleUpLeftX = 27;
  kNozzleUpRightX = 21;
  kNozzleDownY = 28;
  kNozzleDownLeftX = 29;
  kNozzleDownRightX = 19;
  function PolarStar(graphics){
    var res$, i$, to$, lvl;
    this.projectileA = null;
    this.projectileB = null;
    this.sprites = this.initialiseSprites(graphics);
    this.currentExperience = 0;
    res$ = [];
    for (i$ = 0, to$ = units.kMaxGunLevel; i$ <= to$; ++i$) {
      lvl = i$;
      res$.push(new Sprite(graphics, 'bullet', tpx(kProjectileSrcXs[lvl]), tpx(kProjectileSrcYs[lvl]), tpx(1), tpx(1)));
    }
    this.hpSprites = res$;
    res$ = [];
    for (i$ = 0, to$ = units.kMaxGunLevel; i$ <= to$; ++i$) {
      lvl = i$;
      res$.push(new Sprite(graphics, 'bullet', tpx(kProjectileSrcXs[lvl] + 1), tpx(kProjectileSrcYs[lvl]), tpx(1), tpx(1)));
    }
    this.vpSprites = res$;
  }
  prototype.collectExperience = function(experience){
    return this.currentExperience = std.min(kExperiences[units.kMaxGunLevel], this.currentExperience + experience);
  };
  prototype.currentLevel = function(){
    var i$, ref$, level, exp;
    for (i$ = (ref$ = kExperiences).length - 1; i$ >= 0; --i$) {
      level = i$;
      exp = ref$[i$];
      if (this.currentExperience >= kExperiences[level - 1]) {
        return level;
      }
    }
    return 1;
  };
  prototype.initialiseSprites = function(graphics){
    return SpriteState.generateWith(function(state){
      var tileY;
      tileY = state.LEFT ? kLeftOffset : kRightOffset;
      switch (true) {
      case state.HORIZONTAL:
        tileY += kHorizontalOffset;
        break;
      case state.UP:
        tileY += kUpOffset;
        break;
      case state.DOWN:
        tileY += kDownOffset;
      }
      return new Sprite(graphics, kArmsSpritePath, tpx(kPolarStarIndex * kSpriteWidth), tpx(tileY), tpx(kSpriteWidth), tpx(kSpriteHeight));
    });
  };
  prototype.startFire = function(state, playerX, playerY){
    var bulletX, bulletY, sprite;
    if (this.projectileA && this.projectileB) {
      return;
    }
    bulletX = this.gunX(state, playerX) - kHalfTile;
    bulletY = this.gunY(state, playerY) - kHalfTile;
    switch (true) {
    case state.HORIZONTAL:
      bulletY += kNozzleHorizY;
      bulletX += state.LEFT ? kNozzleHorizLeftX : kNozzleHorizRightX;
      break;
    case state.UP:
      bulletY += kNozzleUpY;
      bulletX += state.LEFT ? kNozzleUpLeftX : kNozzleUpRightX;
      break;
    case state.DOWN:
      bulletY += kNozzleDownY;
      bulletX += state.LEFT ? kNozzleDownLeftX : kNozzleDownRightX;
    }
    sprite = state.HORIZONTAL
      ? this.hpSprites[this.currentLevel() - 1]
      : this.vpSprites[this.currentLevel() - 1];
    if (!this.projectileA) {
      return this.projectileA = new PolarStarProjectile(sprite, state, bulletX, bulletY, this.currentLevel());
    } else if (!this.projectileB) {
      return this.projectileB = new PolarStarProjectile(sprite, state, bulletX, bulletY, this.currentLevel());
    }
  };
  prototype.stopFire = function(){};
  prototype.gunX = function(state, playerX){
    if (state.LEFT) {
      return playerX - kHalfTile;
    } else {
      return playerX;
    }
  };
  prototype.gunY = function(state, playerY){
    if (state.UP) {
      playerY -= kHalfTile / 2;
    }
    if (state.DOWN) {
      playerY += kHalfTile / 2;
    }
    return playerY + this.gunBob(state);
  };
  prototype.gunBob = function(state){
    if (state.WALKING && (state.STRIDE_LEFT || state.STRIDE_RIGHT)) {
      return -2;
    } else {
      return 0;
    }
  };
  prototype.getProjectiles = function(){
    var projectiles, that;
    projectiles = [];
    if (that = this.projectileA) {
      projectiles.push(that);
    }
    if (that = this.projectileB) {
      projectiles.push(that);
    }
    return projectiles;
  };
  prototype.updateProjectiles = function(elapsedTime, map, ptools){
    var ref$;
    if (!((ref$ = this.projectileA) != null && ref$.update(elapsedTime, map, ptools))) {
      this.projectileA = null;
    }
    if (!((ref$ = this.projectileB) != null && ref$.update(elapsedTime, map, ptools))) {
      return this.projectileB = null;
    }
  };
  prototype.draw = function(graphics, playerX, playerY, state){
    var gunX, gunY, ref$;
    gunX = this.gunX(state, playerX);
    gunY = this.gunY(state, playerY);
    this.sprites[state.key].draw(graphics, gunX, gunY);
    if ((ref$ = this.projectileA) != null) {
      ref$.draw(graphics);
    }
    return (ref$ = this.projectileB) != null ? ref$.draw(graphics) : void 8;
  };
  prototype.drawHud = function(graphics, hud){
    var level;
    level = this.currentLevel();
    return hud.draw(graphics, level, this.currentExperience - kExperiences[level - 1], kExperiences[level] - kExperiences[level - 1]);
  };
  return PolarStar;
}());
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./map":27,"./projectile":34,"./rectangle":36,"./sprite":45,"./spritestate":46,"./star-particle":47,"./units":50,"./wall-particle":51,"std":48}],10:[function(require,module,exports){
var std, SDL, units, config, kScreenWidth, kScreenHeight, kBackgroundSize, FixedBackdrop, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
units = require('./units');
config = require('./config');
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight;
kBackgroundSize = 4;
out$.FixedBackdrop = FixedBackdrop = (function(){
  FixedBackdrop.displayName = 'FixedBackdrop';
  var prototype = FixedBackdrop.prototype, constructor = FixedBackdrop;
  function FixedBackdrop(path, graphics){
    this.surface = graphics.loadImage(path);
  }
  prototype.draw = function(graphics){
    var i$, step$, to$, x, lresult$, j$, step1$, to1$, y, destRect, results$ = [];
    for (i$ = 0, to$ = units.tileToPx(kScreenWidth + kBackgroundSize), step$ = units.tileToPx(kBackgroundSize); step$ < 0 ? i$ >= to$ : i$ <= to$; i$ += step$) {
      x = i$;
      lresult$ = [];
      for (j$ = 0, to1$ = units.tileToPx(kScreenHeight + kBackgroundSize), step1$ = units.tileToPx(kBackgroundSize); step1$ < 0 ? j$ >= to1$ : j$ <= to1$; j$ += step1$) {
        y = j$;
        destRect = new SDL.Rect(x, y, units.tileToPx(kBackgroundSize), units.tileToPx(kBackgroundSize));
        lresult$.push(graphics.blitSurface(this.surface, null, destRect));
      }
      results$.push(lresult$);
    }
    return results$;
  };
  return FixedBackdrop;
}());
},{"./config":12,"./units":50,"SDL":39,"std":48}],11:[function(require,module,exports){
var std, units, Rect, CollisionRectangle, SimpleCollisionRectangle, CompositeCollisionRectangle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
Rect = require('./rectangle').Rectangle;
CollisionRectangle = (function(){
  CollisionRectangle.displayName = 'CollisionRectangle';
  var prototype = CollisionRectangle.prototype, constructor = CollisionRectangle;
  Object.defineProperty(prototype, 'boundingBox', {
    get: function(){},
    configurable: true,
    enumerable: true
  });
  prototype.topCollision = function(x, y, Δ){};
  prototype.leftCollision = function(x, y, Δ){};
  prototype.rightCollision = function(x, y, Δ){};
  prototype.bottomCollision = function(x, y, Δ){};
  function CollisionRectangle(){}
  return CollisionRectangle;
}());
out$.SimpleCollisionRectangle = SimpleCollisionRectangle = (function(superclass){
  var kExtraOffset, prototype = extend$((import$(SimpleCollisionRectangle, superclass).displayName = 'SimpleCollisionRectangle', SimpleCollisionRectangle), superclass).prototype, constructor = SimpleCollisionRectangle;
  kExtraOffset = 0.001;
  function SimpleCollisionRectangle(rect){
    this.rect = rect;
  }
  prototype.collidesWith = function(rect){
    return this.rect.collidesWith(rect);
  };
  prototype.leftCollision = function(x, y, Δ){
    return new Rect(x + this.rect.left + Δ, y + this.rect.top, this.rect.w - Δ, this.rect.h);
  };
  prototype.rightCollision = function(x, y, Δ){
    return new Rect(x + this.rect.left, y + this.rect.top, this.rect.w + Δ, this.rect.h);
  };
  prototype.topCollision = function(x, y, Δ){
    return new Rect(x + this.rect.left, y + this.rect.top + Δ, this.rect.w, this.rect.h - Δ);
  };
  prototype.bottomCollision = function(x, y, Δ){
    return new Rect(x + this.rect.left, y + this.rect.top, this.rect.w, this.rect.h + Δ);
  };
  Object.defineProperty(prototype, 'boundingBox', {
    get: function(){
      return new Rect(this.rect.left - kExtraOffset, this.rect.top - kExtraOffset, this.rect.w + 2 * kExtraOffset, this.rect.h + 2 * kExtraOffset);
    },
    configurable: true,
    enumerable: true
  });
  return SimpleCollisionRectangle;
}(CollisionRectangle));
out$.CompositeCollisionRectangle = CompositeCollisionRectangle = (function(superclass){
  var prototype = extend$((import$(CompositeCollisionRectangle, superclass).displayName = 'CompositeCollisionRectangle', CompositeCollisionRectangle), superclass).prototype, constructor = CompositeCollisionRectangle;
  function CompositeCollisionRectangle(top, bottom, left, right){
    this.top = top;
    this.bottom = bottom;
    this.left = left;
    this.right = right;
  }
  prototype.leftCollision = function(x, y, Δ){
    return new Rect(x + this.left.left + Δ, y + this.left.top, this.left.w - Δ, this.left.h);
  };
  prototype.rightCollision = function(x, y, Δ){
    return new Rect(x + this.right.left, y + this.right.top, this.right.w + Δ, this.right.h);
  };
  prototype.topCollision = function(x, y, Δ){
    return new Rect(x + this.top.left, y + this.top.top + Δ, this.top.w, this.top.h - Δ);
  };
  prototype.bottomCollision = function(x, y, Δ){
    return new Rect(x + this.bottom.left, y + this.bottom.top, this.bottom.w, this.bottom.h + Δ);
  };
  Object.defineProperty(prototype, 'boundingBox', {
    get: function(){
      return new Rect(this.left.left, this.top.top, this.left.w + this.right.w, this.top.h + this.bottom.h);
    },
    configurable: true,
    enumerable: true
  });
  return CompositeCollisionRectangle;
}(CollisionRectangle));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./rectangle":36,"./units":50,"std":48}],12:[function(require,module,exports){
var kScreenWidth, kScreenHeight, kFps, kMaxFrameTime, kGraphicsQuality, debugFeatures, that, showCollisions, showSpritesheets, showReadout, assetPath, fileExt, findAsset, out$ = typeof exports != 'undefined' && exports || this;
out$.kScreenWidth = kScreenWidth = 20;
out$.kScreenHeight = kScreenHeight = 15;
out$.kFps = kFps = 60;
out$.kMaxFrameTime = kMaxFrameTime = 5 * 1000 / kFps;
out$.kGraphicsQuality = kGraphicsQuality = 32;
out$.debugFeatures = debugFeatures = (that = ENABLE_DEBUG_FEATURES) != null ? that : false;
out$.showCollisions = showCollisions = debugFeatures;
out$.showSpritesheets = showSpritesheets = debugFeatures;
out$.showReadout = showReadout = debugFeatures;
switch (kGraphicsQuality) {
case 16:
  out$.assetPath = assetPath = 'data/16x16/';
  out$.fileExt = fileExt = '.bmp';
  break;
case 32:
  out$.assetPath = assetPath = 'data/32x32/';
  out$.fileExt = fileExt = '.bmp';
}
out$.findAsset = findAsset = function(){
  return (function(it){
    return assetPath + it;
  })((function(it){
    return it + fileExt;
  }).apply(this, arguments));
};
},{}],13:[function(require,module,exports){
var std, units, Timer, NumberSprite, kVelocity, kVanishTime, DamageText, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
Timer = require('./timer').Timer;
NumberSprite = require('./sprite').NumberSprite;
kVelocity = -units.kHalfTile / 250;
kVanishTime = 2000;
out$.DamageText = DamageText = (function(){
  DamageText.displayName = 'DamageText';
  var prototype = DamageText.prototype, constructor = DamageText;
  function DamageText(graphics, centerX, centerY){
    this.centerX = centerX;
    this.centerY = centerY;
    this.timer = new Timer(kVanishTime);
    this.damage = 0;
    this.offsetY = 0;
    this.shouldRise = false;
  }
  prototype.setPosition = function(x, y){
    this.centerX = x;
    return this.centerY = y + this.offsetY;
  };
  prototype.setDamage = function(damage){
    this.shouldRise = this.damage === 0;
    if (this.shouldRise) {
      this.offsetY = 0;
    }
    this.damage += damage;
    return this.timer.reset();
  };
  prototype.update = function(elapsedTime){
    if (this.timer.isExpired) {
      this.damage = 0;
    }
    if (this.shouldRise) {
      this.offsetY = std.max(units.tileToGame(-1), this.offsetY + kVelocity * elapsedTime);
    }
    return this.expired;
  };
  prototype.draw = function(graphics){
    if (this.timer.isActive && this.damage > 0) {
      return new NumberSprite.DamageNumber(graphics, this.damage).drawCentered(graphics, this.centerX, this.centerY);
    }
  };
  Object.defineProperty(prototype, 'expired', {
    get: function(){
      return this.timer.isExpired;
    },
    configurable: true,
    enumerable: true
  });
  return DamageText;
}());
},{"./sprite":45,"./timer":49,"./units":50,"std":48}],14:[function(require,module,exports){
var std, allTexts, owners, reject, DamageTexts, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
allTexts = [];
owners = new WeakMap;
reject = std.flip(std.reject)(allTexts);
out$.DamageTexts = DamageTexts = {
  addDamageable: function(damageable){
    var text;
    text = damageable.getDamageText();
    allTexts.push(text);
    return owners.set(text, damageable);
  },
  update: function(elapsedTime){
    return allTexts = reject(function(text){
      var owner;
      if (!text.expired) {
        owner = owners.get(text);
        text.setPosition(owner.centerX, owner.centerY);
      }
      return text.update(elapsedTime);
    });
  },
  draw: function(graphics){
    var i$, ref$, len$, text, results$ = [];
    for (i$ = 0, len$ = (ref$ = allTexts).length; i$ < len$; ++i$) {
      text = ref$[i$];
      results$.push(text.draw(graphics));
    }
    return results$;
  }
};
},{"std":48}],15:[function(require,module,exports){
var std, InterfaceError, Damageable, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
InterfaceError = std.InterfaceError;
out$.Damageable = Damageable = (function(){
  Damageable.displayName = 'Damageable';
  var prototype = Damageable.prototype, constructor = Damageable;
  prototype.centerX = 0;
  prototype.centerY = 0;
  prototype.getDamageText = function(){
    throw new InterfaceError("Damageable - `get-damage-text` method not implemented");
  };
  function Damageable(){}
  return Damageable;
}());
},{"std":48}],16:[function(require,module,exports){
var std, units, kHalfTile, tpx, PolarVector, AnimatedSprite, kBaseVelocity, DeathCloudParticle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
kHalfTile = units.kHalfTile, tpx = units.tileToPx;
PolarVector = require('./polar').PolarVector;
AnimatedSprite = require('./sprite').AnimatedSprite;
kBaseVelocity = 0.12;
out$.DeathCloudParticle = DeathCloudParticle = (function(){
  DeathCloudParticle.displayName = 'DeathCloudParticle';
  var prototype = DeathCloudParticle.prototype, constructor = DeathCloudParticle;
  function DeathCloudParticle(graphics, centerX, centerY, speed, angle){
    this.centerX = centerX;
    this.centerY = centerY;
    this.speed = speed;
    this.offset = new PolarVector(0, angle);
    this.sprite = new AnimatedSprite(graphics, 'Npc/NpcSym', tpx(1), tpx(0), tpx(1), tpx(1), 18, 7);
  }
  prototype.update = function(elapsedTime){
    this.sprite.update(elapsedTime);
    this.offset.mag += elapsedTime * this.speed;
    return this.sprite.numCompletedLoops === 0;
  };
  prototype.draw = function(graphics){
    return this.sprite.draw(graphics, this.centerX + this.offset.x - kHalfTile, this.centerY + this.offset.y - kHalfTile);
  };
  DeathCloudParticle.createRandomDeathClouds = function(ptools, centerX, centerY, num){
    var i$, ix, randomAngle, randomSpeed, results$ = [];
    for (i$ = 0; i$ < num; ++i$) {
      ix = i$;
      randomAngle = std.rand(0, std.tau);
      randomSpeed = kBaseVelocity * std.rand(0, 2);
      results$.push(ptools.entitySystem.addNewParticle(new DeathCloudParticle(ptools.graphics, centerX, centerY, randomSpeed, randomAngle)));
    }
    return results$;
  };
  return DeathCloudParticle;
}());
},{"./polar":33,"./sprite":45,"./units":50,"std":48}],17:[function(require,module,exports){
var std, units, config, tpx, tileToGame, kHalfTile, Damageable, DamageText, DamageTexts, ref$, Sprite, AnimatedSprite, Rect, RIGHT, LEFT, kAngularVelocity, kFlyFps, kNumFlyFrames, kContactDamage, SpriteState, FirstCaveBat, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
config = require('./config');
tpx = units.tileToPx, tileToGame = units.tileToGame, kHalfTile = units.kHalfTile;
Damageable = require('./damageable').Damageable;
DamageText = require('./damage-text').DamageText;
DamageTexts = require('./damage-texts').DamageTexts;
ref$ = require('./sprite'), Sprite = ref$.Sprite, AnimatedSprite = ref$.AnimatedSprite;
Rect = require('./rectangle').Rectangle;
RIGHT = "R";
LEFT = "L";
kAngularVelocity = 120 / 1000;
kFlyFps = 15;
kNumFlyFrames = 3;
kContactDamage = 1;
SpriteState = function(){
  var args;
  args = slice$.call(arguments);
  return String(args.join('-'));
};
out$.FirstCaveBat = FirstCaveBat = (function(superclass){
  var prototype = extend$((import$(FirstCaveBat, superclass).displayName = 'FirstCaveBat', FirstCaveBat), superclass).prototype, constructor = FirstCaveBat;
  function FirstCaveBat(graphics, x, flightCenterY){
    this.x = x;
    this.flightCenterY = flightCenterY;
    this.y = this.flightCenterY;
    this.flightAngle = 0;
    this.alive = true;
    this.angularVelocity = kAngularVelocity;
    this.sprites = this.initialiseSprites(graphics);
    this.damageText = new DamageText(graphics);
    this.contactDamage = kContactDamage;
    DamageTexts.addDamageable(this);
  }
  Object.defineProperty(prototype, 'spritestate', {
    get: function(){
      return SpriteState(this.horizontalFacing);
    },
    configurable: true,
    enumerable: true
  });
  prototype.initialiseSprite = function(graphics, facing){
    var facingOffset;
    facingOffset = facing === RIGHT ? 1 : 0;
    return new AnimatedSprite(graphics, 'Npc/NpcCemet', tpx(2), tpx(2 + facingOffset), tpx(1), tpx(1), kFlyFps, kNumFlyFrames);
  };
  prototype.initialiseSprites = function(graphics, spriteMap){
    var i$, ref$, len$, facing;
    spriteMap == null && (spriteMap = {});
    for (i$ = 0, len$ = (ref$ = [LEFT, RIGHT]).length; i$ < len$; ++i$) {
      facing = ref$[i$];
      spriteMap[SpriteState(facing)] = this.initialiseSprite(graphics, facing);
    }
    return spriteMap;
  };
  prototype.update = function(elapsedTime, playerX){
    this.horizontalFacing = playerX < this.x ? LEFT : RIGHT;
    this.flightAngle += this.angularVelocity * elapsedTime;
    this.y = this.flightCenterY + units.tileToGame(5) / 2 * std.sin(units.degToRad(this.flightAngle));
    this.sprites[this.spritestate].update(elapsedTime);
    return this.alive;
  };
  prototype.draw = function(graphics){
    if (config.showCollisions) {
      graphics.visualiseRect(this.collisionRectangle());
    }
    return this.sprites[this.spritestate].draw(graphics, this.x, this.y);
  };
  prototype.damageCollision = function(){
    return new Rect(this.centerX, this.centerY, 1, 1);
  };
  prototype.collisionRectangle = function(){
    return new Rect(this.x, this.y, tileToGame(1), tileToGame(1));
  };
  prototype.takeDamage = function(damage){
    this.damageText.setDamage(damage);
    return this.alive = false;
  };
  Object.defineProperty(prototype, 'centerX', {
    get: function(){
      return this.x + kHalfTile;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'centerY', {
    get: function(){
      return this.y + kHalfTile;
    },
    configurable: true,
    enumerable: true
  });
  prototype.getDamageText = function(){
    return this.damageText;
  };
  return FirstCaveBat;
}(Damageable));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./config":12,"./damage-text":13,"./damage-texts":14,"./damageable":15,"./rectangle":36,"./sprite":45,"./units":50,"std":48}],18:[function(require,module,exports){
var std, SDL, input, units, config, readout, graphics, Map, tileToGame, Timer, Player, Pickups, Rectangle, FirstCaveBat, FixedBackdrop, DamageTexts, ParticleTools, StarParticle, DeathCloudParticle, ref$, PowerDorito, Pickup, kScreenWidth, kScreenHeight, kFps, kMaxFrameTime, kDebugMode, running, player, bat, map, ptools, pickups, timeFactor, lastFrameTime, anyKeysPressed, eventLoop, update, draw, createTestWorld, start, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
input = require('./input');
units = require('./units');
config = require('./config');
readout = require('./readout');
graphics = require('./graphics');
Map = require('./map');
tileToGame = units.tileToGame;
Timer = require('./timer').Timer;
Player = require('./player').Player;
Pickups = require('./pickups').Pickups;
Rectangle = require('./rectangle').Rectangle;
FirstCaveBat = require('./first-cave-bat').FirstCaveBat;
FixedBackdrop = require('./backdrop').FixedBackdrop;
DamageTexts = require('./damage-texts').DamageTexts;
ParticleTools = require('./particle-system').ParticleTools;
StarParticle = require('./star-particle').StarParticle;
DeathCloudParticle = require('./death-cloud-particle').DeathCloudParticle;
ref$ = require('./pickup'), PowerDorito = ref$.PowerDorito, Pickup = ref$.Pickup;
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight, kFps = config.kFps, kMaxFrameTime = config.kMaxFrameTime, kDebugMode = config.kDebugMode;
running = true;
player = null;
bat = null;
map = null;
ptools = null;
pickups = null;
timeFactor = 1;
lastFrameTime = 0;
anyKeysPressed = false;
eventLoop = function(){
  var startTime, event, Δt, elapsedTime;
  startTime = SDL.getTicks();
  input.beginNewFrame();
  while (event = SDL.pollEvent()) {
    anyKeysPressed = true;
    readout.update('willstop', false);
    switch (event.type) {
    case SDL.KEYDOWN:
      input.keyDownEvent(event);
      break;
    case SDL.KEYUP:
      input.keyUpEvent(event);
      break;
    default:
      throw new Error({
        message: "Unknown event type: " + event
      });
    }
  }
  if (input.wasKeyPressed(SDL.KEY.ESCAPE)) {
    running = false;
  }
  if (input.isKeyHeld(SDL.KEY.LEFT) && input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.stopMoving();
  } else if (input.isKeyHeld(SDL.KEY.LEFT)) {
    player.startMovingLeft();
  } else if (input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.startMovingRight();
  } else {
    player.stopMoving();
  }
  if (input.wasKeyPressed(SDL.KEY.Z)) {
    player.startJump();
  } else if (input.wasKeyReleased(SDL.KEY.Z)) {
    player.stopJump();
  }
  if (input.wasKeyPressed(SDL.KEY.X)) {
    player.startFire();
  } else if (input.wasKeyReleased(SDL.KEY.X)) {
    player.stopFire();
  }
  if (input.isKeyHeld(SDL.KEY.UP) && input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookHorizontal();
  } else if (input.isKeyHeld(SDL.KEY.UP)) {
    player.lookUp();
  } else if (input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookDown();
  } else {
    player.lookHorizontal();
  }
  if (input.wasKeyPressed(SDL.KEY.ONE)) {
    timeFactor = 1;
  }
  if (input.wasKeyPressed(SDL.KEY.TWO)) {
    timeFactor = 2;
  }
  if (input.wasKeyPressed(SDL.KEY.THREE)) {
    timeFactor = 3;
  }
  if (input.wasKeyPressed(SDL.KEY.FOUR)) {
    timeFactor = 4;
  }
  Δt = std.min(SDL.getTicks() - lastFrameTime, kMaxFrameTime);
  update(Δt / timeFactor);
  draw();
  if (running) {
    lastFrameTime = SDL.getTicks();
    elapsedTime = lastFrameTime - startTime;
    readout.update('frametime', std.floor(1000 / Δt));
    readout.update('drawtime', elapsedTime);
    return SDL.delay(1000 / kFps - elapsedTime, eventLoop);
  } else {
    return std.log('Game stopped.');
  }
};
update = function(elapsedTime){
  var i$, ref$, len$, projectile;
  Timer.updateAll(elapsedTime);
  player.update(elapsedTime, map);
  if (bat && !(bat != null && bat.update(elapsedTime, player.x))) {
    pickups.add(new PowerDorito(graphics, bat.centerX, bat.centerY, Pickup.SMALL));
    DeathCloudParticle.createRandomDeathClouds(ptools, bat.centerX, bat.centerY, 3);
    bat = null;
  }
  for (i$ = 0, len$ = (ref$ = player.getProjectiles()).length; i$ < len$; ++i$) {
    projectile = ref$[i$];
    if (bat != null && bat.collisionRectangle().collidesWith(projectile.collisionRectangle())) {
      projectile.collideWithEnemy();
      bat.takeDamage(projectile.contactDamage);
    }
  }
  pickups.handleCollisions(player);
  if (bat != null && bat.damageCollision().collidesWith(player.damageCollision())) {
    player.takeDamage(bat.contactDamage);
  }
  DamageTexts.update(elapsedTime);
  pickups.update(elapsedTime, map);
  return ptools.update(elapsedTime);
};
draw = function(){
  graphics.clear();
  map.drawBackground(graphics);
  if (bat != null) {
    bat.draw(graphics);
  }
  ptools.entitySystem.draw(graphics);
  pickups.draw(graphics);
  player.draw(graphics);
  map.draw(graphics);
  ptools.frontSystem.draw(graphics);
  DamageTexts.draw(graphics);
  return player.drawHud(graphics);
};
createTestWorld = function(){
  map = Map.createTestMap(graphics);
  ptools = new ParticleTools(graphics);
  player = new Player(graphics, units.tileToGame(kScreenWidth / 2), units.tileToGame(10), ptools);
  bat = new FirstCaveBat(graphics, units.tileToGame(7), units.tileToGame(8));
  return pickups = new Pickups;
};
out$.start = start = function(){
  SDL.init(SDL.INIT_EVERYTHING);
  readout.addReader('frametime', 'Frame time');
  readout.addReader('drawtime', 'Draw time');
  readout.addReader('willstop', 'Will stop', true);
  createTestWorld();
  eventLoop();
  return std.delay(5000, function(){
    if (!anyKeysPressed) {
      return running = false;
    } else {
      return std.log("Game being interacted with. Don't shut down");
    }
  });
};
},{"./backdrop":10,"./config":12,"./damage-texts":14,"./death-cloud-particle":16,"./first-cave-bat":17,"./graphics":19,"./input":24,"./map":27,"./particle-system":28,"./pickup":30,"./pickups":31,"./player":32,"./readout":35,"./rectangle":36,"./star-particle":47,"./timer":49,"./units":50,"SDL":39,"std":48}],19:[function(require,module,exports){
var std, SDL, config, units, kScreenWidth, kScreenHeight, kTransparentColor, kScreenScaleFactor, spritesheets, screen, loadImage, blitSurface, clear, visualiseRect, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
config = require('./config');
units = require('./units');
kScreenWidth = config.kScreenWidth, kScreenHeight = config.kScreenHeight;
kTransparentColor = [0, 0, 0];
kScreenScaleFactor = config.kGraphicsQuality === 16 ? 2 : 1;
spritesheets = {};
screen = SDL.setVideoMode(units.tileToPx(kScreenWidth), units.tileToPx(kScreenHeight), kScreenScaleFactor);
out$.loadImage = loadImage = function(filename, useTransparency){
  useTransparency == null && (useTransparency = false);
  if (spritesheets[filename] == null) {
    spritesheets[filename] = SDL.loadImage(config.findAsset(filename));
    if (useTransparency) {
      SDL.setColorKey(spritesheets[filename], kTransparentColor);
    }
    if (config.showSpritesheets) {
      document.body.appendChild(spritesheets[filename].canvas);
    }
  }
  return spritesheets[filename];
};
out$.blitSurface = blitSurface = function(source, srcRect, destRect){
  return SDL.blitSurface(source, srcRect, screen, destRect);
};
out$.clear = clear = bind$(screen, 'clear');
out$.visualiseRect = visualiseRect = function(rect, fill){
  var paintRect;
  paintRect = new SDL.Rect(units.gameToPx(rect.left), units.gameToPx(rect.top), units.gameToPx(rect.w), units.gameToPx(rect.h));
  if (fill) {
    return screen.drawRect(paintRect, 'red');
  } else {
    return screen.drawBox(paintRect, 'red');
  }
};
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{"./config":12,"./units":50,"SDL":39,"std":48}],20:[function(require,module,exports){
var std, units, div, tileToGame, tpx, gameToPx, kHalfTile, Timer, ref$, Sprite, NumberSprite, VaryingWidthSprite, kDrawY, kLvDrawX, kBarDrawX, kLvlNumDrawX, kFlashTime, kFlashPeriod, kSpriteName, kBarSrcWidth, kBarSrcHeight, kBarSrcX, kBarSrcY, kFlashSrcX, kFlashSrcY, kMaxSrcX, kMaxSrcY, kFillSrcX, kFillSrcY, kLvlSrcX, kLvlSrcY, kLvlSrcWidth, kLvlSrcHeight, GunExperienceHUD, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
div = std.div;
tileToGame = units.tileToGame, tpx = units.tileToPx, gameToPx = units.gameToPx, kHalfTile = units.kHalfTile;
Timer = require('./timer').Timer;
ref$ = require('./sprite'), Sprite = ref$.Sprite, NumberSprite = ref$.NumberSprite, VaryingWidthSprite = ref$.VaryingWidthSprite;
kDrawY = tileToGame(1.5);
kLvDrawX = tileToGame(1.0);
kBarDrawX = tileToGame(2.5);
kLvlNumDrawX = tileToGame(2.0);
kFlashTime = 800;
kFlashPeriod = 40;
kSpriteName = 'TextBox';
kBarSrcWidth = 2.5;
kBarSrcHeight = 0.5;
kBarSrcX = 0.0;
kBarSrcY = 4.5;
kFlashSrcX = 2.5;
kFlashSrcY = 5.0;
kMaxSrcX = 2.5;
kMaxSrcY = 4.5;
kFillSrcX = 0.0;
kFillSrcY = 5.0;
kLvlSrcX = tileToGame(5);
kLvlSrcY = 160;
kLvlSrcWidth = tileToGame(1);
kLvlSrcHeight = tileToGame(0.5);
out$.GunExperienceHUD = GunExperienceHUD = (function(){
  GunExperienceHUD.displayName = 'GunExperienceHUD';
  var prototype = GunExperienceHUD.prototype, constructor = GunExperienceHUD;
  function GunExperienceHUD(graphics, levelXp, maxXp){
    this.xpBarSprite = new Sprite(graphics, kSpriteName, tpx(kBarSrcX), tpx(kBarSrcY), tpx(kBarSrcWidth), tpx(kBarSrcHeight));
    this.lvSprite = new Sprite(graphics, kSpriteName, gameToPx(kLvlSrcX), gameToPx(kLvlSrcY), gameToPx(kLvlSrcWidth), gameToPx(kLvlSrcHeight));
    this.flashSprite = new Sprite(graphics, kSpriteName, tpx(kFlashSrcX), tpx(kFlashSrcY), tpx(kBarSrcWidth), tpx(kBarSrcHeight));
    this.maxSprite = new Sprite(graphics, kSpriteName, tpx(kMaxSrcX), tpx(kMaxSrcY), tpx(kBarSrcWidth), tpx(kBarSrcHeight));
    this.fillSprite = new VaryingWidthSprite(graphics, kSpriteName, tpx(kFillSrcX), tpx(kFillSrcY), tpx(kBarSrcWidth), tpx(kBarSrcHeight));
    this.flashTimer = new Timer(kFlashTime);
  }
  prototype.activateFlash = function(){
    return this.flashTimer.reset();
  };
  prototype.draw = function(graphics, gunLvl, currentXp, levelXp){
    this.lvSprite.draw(graphics, kLvDrawX, kDrawY);
    this.xpBarSprite.draw(graphics, kBarDrawX, kDrawY);
    NumberSprite.HUDNumber(graphics, gunLvl, 1).draw(graphics, kLvlNumDrawX, kDrawY);
    if (currentXp < levelXp) {
      this.fillSprite.setPercentageWidth(currentXp / levelXp);
      this.fillSprite.draw(graphics, kBarDrawX, kDrawY);
    } else {
      this.maxSprite.draw(graphics, kBarDrawX, kDrawY);
    }
    if (this.flashTimer.isActive && div(this.flashTimer.currentTime, kFlashPeriod) % 2 === 0) {
      return this.flashSprite.draw(graphics, kBarDrawX, kDrawY);
    }
  };
  return GunExperienceHUD;
}());
},{"./sprite":45,"./timer":49,"./units":50,"std":48}],21:[function(require,module,exports){
var std, units, px, Timer, Particle, Sprite, PolarVector, Rectangle, kFlashPeriod, kLifeTime, kSpeed, HeadBumpParticle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
px = units.gameToPx;
Timer = require('./timer').Timer;
Particle = require('./particle').Particle;
Sprite = require('./sprite').Sprite;
PolarVector = require('./polar').PolarVector;
Rectangle = require('./rectangle').Rectangle;
kFlashPeriod = 25;
kLifeTime = 700;
kSpeed = 0.12;
out$.HeadBumpParticle = HeadBumpParticle = (function(superclass){
  var prototype = extend$((import$(HeadBumpParticle, superclass).displayName = 'HeadBumpParticle', HeadBumpParticle), superclass).prototype, constructor = HeadBumpParticle;
  function HeadBumpParticle(graphics, centerX, centerY){
    this.centerX = centerX;
    this.centerY = centerY;
    this.lifeTimer = new Timer(kLifeTime, true);
    this.particleA = new PolarVector(0, std.rand(0, std.tau));
    this.particleB = new PolarVector(0, std.rand(0, std.tau));
    this.maxOffsetA = std.floor(std.rand(4, 20));
    this.maxOffsetB = std.floor(std.rand(4, 20));
    this.sprite = new Sprite(graphics, 'Caret', px(116), px(54), px(6), px(6));
  }
  prototype.update = function(elapsedTime){
    this.particleA.mag = std.min(this.maxOffsetA, this.particleA.mag + elapsedTime * kSpeed);
    this.particleB.mag = std.min(this.maxOffsetB, this.particleB.mag + elapsedTime * kSpeed);
    return this.lifeTimer.active();
  };
  prototype.draw = function(graphics){
    if ((this.lifeTimer.currentTime / kFlashPeriod) % 2 < 1) {
      this.sprite.draw(graphics, this.centerX + this.particleA.x, this.centerY + this.particleA.y);
      return this.sprite.draw(graphics, this.centerX + this.particleB.x, this.centerY + this.particleB.y);
    }
  };
  return HeadBumpParticle;
}(Particle));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./particle":29,"./polar":33,"./rectangle":36,"./sprite":45,"./timer":49,"./units":50,"std":48}],22:[function(require,module,exports){
var std, units, div, kHalfTile, pxToTile, tpx, pxToGame, tileToGame, Timer, ref$, Sprite, NumberSprite, VaryingWidthSprite, kHealthBarX, kHealthBarY, kHealthFillX, kHealthFillY, kHealthNumX, kHealthNumY, kMaxFillPx, kDamageDelay, kSpritePath, kBarSrcX, kBarSrcY, kFillSrcY, kDamageSrcY, kBarSrcWidth, kBarSrcHeight, Health, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
div = std.div;
kHalfTile = units.kHalfTile, pxToTile = units.pxToTile, tpx = units.tileToPx, pxToGame = units.pxToGame, tileToGame = units.tileToGame;
Timer = require('./timer').Timer;
ref$ = require('./sprite'), Sprite = ref$.Sprite, NumberSprite = ref$.NumberSprite, VaryingWidthSprite = ref$.VaryingWidthSprite;
kHealthBarX = tileToGame(1);
kHealthBarY = tileToGame(2);
kHealthFillX = tileToGame(2.5);
kHealthFillY = tileToGame(2);
kHealthNumX = tileToGame(1.5);
kHealthNumY = tileToGame(2);
kMaxFillPx = tpx(2.5) - 1;
kDamageDelay = 1500;
kSpritePath = 'TextBox';
kBarSrcX = 0;
kBarSrcY = 2.5;
kFillSrcY = 1.5;
kDamageSrcY = 2;
kBarSrcWidth = 4;
kBarSrcHeight = 0.5;
out$.Health = Health = (function(){
  Health.displayName = 'Health';
  var prototype = Health.prototype, constructor = Health;
  function Health(graphics, maxHealth){
    this.maxHealth = maxHealth != null ? maxHealth : 6;
    this.currentHealth = this.maxHealth;
    this.damage = 0;
    this.damageTimer = new Timer(kDamageDelay);
    this.healthBarSprite = new Sprite(graphics, kSpritePath, tpx(kBarSrcX), tpx(kBarSrcY), tpx(kBarSrcWidth), tpx(kBarSrcHeight));
    this.healthFillSprite = new VaryingWidthSprite(graphics, kSpritePath, tpx(kBarSrcX), tpx(kFillSrcY), kMaxFillPx, tpx(kBarSrcHeight), kMaxFillPx);
    this.damageFillSprite = new VaryingWidthSprite(graphics, kSpritePath, tpx(kBarSrcX), tpx(kDamageSrcY), kMaxFillPx, tpx(kBarSrcHeight), kMaxFillPx);
  }
  prototype.update = function(elapsedTime){
    if (this.damage > 0 && this.damageTimer.isExpired) {
      this.currentHealth = std.max(0, this.currentHealth - this.damage);
      return this.damage = 0;
    }
  };
  prototype.draw = function(graphics){
    this.healthBarSprite.draw(graphics, kHealthBarX, kHealthBarY);
    if (this.currentHealth !== 0) {
      if (this.damage) {
        this.damageFillSprite.draw(graphics, kHealthFillX, kHealthFillY);
      }
      this.healthFillSprite.draw(graphics, kHealthFillX, kHealthFillY);
    }
    return new NumberSprite.HUDNumber(graphics, this.currentHealth, 2).draw(graphics, kHealthNumX, kHealthNumY);
  };
  prototype.takeDamage = function(damage){
    if (this.currentHealth === 0) {
      return;
    }
    this.damageTimer.reset();
    this.healthFillSprite.setPercentageWidth((this.currentHealth - damage) / this.maxHealth);
    this.damageFillSprite.setPercentageWidth(this.currentHealth / this.maxHealth);
    this.damage = damage;
    return this.currentHealth - damage <= 0;
  };
  return Health;
}());
},{"./sprite":45,"./timer":49,"./units":50,"std":48}],23:[function(require,module,exports){
var std, AnimatedSprite, ImmobileSingleLoopParticle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
AnimatedSprite = require('./sprite').AnimatedSprite;
out$.ImmobileSingleLoopParticle = ImmobileSingleLoopParticle = (function(){
  ImmobileSingleLoopParticle.displayName = 'ImmobileSingleLoopParticle';
  var prototype = ImmobileSingleLoopParticle.prototype, constructor = ImmobileSingleLoopParticle;
  function ImmobileSingleLoopParticle(graphics, x, y, spritePath, srcX, srcY, srcW, srcH, fps, frames){
    this.x = x;
    this.y = y;
    this.sprite = new AnimatedSprite(graphics, spritePath, srcX, srcY, srcW, srcH, fps, frames);
  }
  prototype.update = function(elapsedTime){
    this.sprite.update(elapsedTime);
    return this.sprite.numCompletedLoops === 0;
  };
  prototype.draw = function(graphics){
    return this.sprite.draw(graphics, this.x, this.y);
  };
  return ImmobileSingleLoopParticle;
}());
},{"./sprite":45,"std":48}],24:[function(require,module,exports){
var std, Input;
std = require('std');
Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.heldKeys = {};
    this.pressedKeys = {};
    this.releasedKeys = {};
  }
  prototype.beginNewFrame = function(){
    this.pressedKeys = {};
    return this.releasedKeys = {};
  };
  prototype.keyDownEvent = function(event){
    this.pressedKeys[event.key] = true;
    return this.heldKeys[event.key] = true;
  };
  prototype.keyUpEvent = function(event){
    this.releasedKeys[event.key] = true;
    return this.heldKeys[event.key] = false;
  };
  prototype.wasKeyPressed = function(key){
    return this.pressedKeys[key];
  };
  prototype.wasKeyReleased = function(key){
    return this.releasedKeys[key];
  };
  prototype.isKeyHeld = function(key){
    return this.heldKeys[key];
  };
  return Input;
}());
module.exports = new Input;
},{"std":48}],25:[function(require,module,exports){
var std, units, Kinematics, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
out$.Kinematics = Kinematics = (function(){
  Kinematics.displayName = 'Kinematics';
  var prototype = Kinematics.prototype, constructor = Kinematics;
  function Kinematics(position, velocity){
    this.position = position;
    this.velocity = velocity;
  }
  prototype.delta = function(elapsedTime){
    return this.velocity * elapsedTime;
  };
  return Kinematics;
}());
},{"./units":50,"std":48}],26:[function(require,module,exports){
var std, units, InterfaceError, WALL_TILE, ref$, TOP, BOTTOM, LEFT, RIGHT, Side, topBox, leftBox, rightBox, bottomBox, MapCollidable, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
InterfaceError = std.InterfaceError;
WALL_TILE = require('./map').WALL_TILE;
ref$ = std['enum'], TOP = ref$[0], BOTTOM = ref$[1], LEFT = ref$[2], RIGHT = ref$[3];
out$.Side = Side = {
  TOP: TOP,
  BOTTOM: BOTTOM,
  LEFT: LEFT,
  RIGHT: RIGHT
};
topBox = function(rect, x, y, Δ){
  return rect.topCollision(x.position, y.position, Δ);
};
leftBox = function(rect, x, y, Δ){
  return rect.leftCollision(x.position, y.position, Δ);
};
rightBox = function(rect, x, y, Δ){
  return rect.rightCollision(x.position, y.position, Δ);
};
bottomBox = function(rect, x, y, Δ){
  return rect.bottomCollision(x.position, y.position, Δ);
};
out$.MapCollidable = MapCollidable = (function(){
  MapCollidable.displayName = 'MapCollidable';
  var prototype = MapCollidable.prototype, constructor = MapCollidable;
  function MapCollidable(){}
  prototype.onCollision = function(){
    throw new InterfaceError("MapCollidable - `on-collision` method not implemented");
  };
  prototype.onDelta = function(){
    throw new InterfaceError("MapCollidable - `on-delta` method not implemented");
  };
  prototype.onWallCollision = function(map, rect, λ){
    var i$, ref$, len$, tile;
    for (i$ = 0, len$ = (ref$ = map.getCollidingTiles(rect)).length; i$ < len$; ++i$) {
      tile = ref$[i$];
      if (tile.type === WALL_TILE) {
        return λ.call(this, tile);
      }
    }
    return λ.call(this);
  };
  prototype.updateX = function(rect, acc, kx, ky, elapsedTime, map){
    var Δx;
    acc.updateVelocity(kx, elapsedTime);
    Δx = kx.velocity * elapsedTime;
    if (Δx > 0) {
      this.onWallCollision(map, rightBox(rect, kx, ky, Δx), function(tile){
        if (tile) {
          kx.position = units.tileToGame(tile.col) - rect.boundingBox.right;
          return this.onCollision(Side.RIGHT, true);
        } else {
          kx.position += Δx;
          return this.onDelta(Side.RIGHT);
        }
      });
      return this.onWallCollision(map, leftBox(rect, kx, ky, 0), function(tile){
        if (tile) {
          kx.position = units.tileToGame(tile.col + 1) - rect.boundingBox.left;
          return this.onCollision(Side.LEFT, false);
        }
      });
    } else {
      this.onWallCollision(map, leftBox(rect, kx, ky, Δx), function(tile){
        if (tile) {
          kx.position = units.tileToGame(tile.col + 1) - rect.boundingBox.left;
          return this.onCollision(Side.LEFT, true);
        } else {
          kx.position += Δx;
          return this.onDelta(Side.LEFT);
        }
      });
      return this.onWallCollision(map, rightBox(rect, kx, ky, 0), function(tile){
        if (tile) {
          kx.position = units.tileToGame(tile.col) - rect.boundingBox.right;
          return this.onCollision(Side.RIGHT, false);
        }
      });
    }
  };
  prototype.updateY = function(rect, acc, kx, ky, elapsedTime, map){
    var Δy;
    acc.updateVelocity(ky, elapsedTime);
    Δy = ky.velocity * elapsedTime;
    if (Δy > 0) {
      this.onWallCollision(map, bottomBox(rect, kx, ky, Δy), function(tile){
        if (tile) {
          ky.position = units.tileToGame(tile.row) - rect.boundingBox.bottom;
          return this.onCollision(Side.BOTTOM, true);
        } else {
          ky.position += Δy;
          return this.onDelta(Side.BOTTOM);
        }
      });
      return this.onWallCollision(map, topBox(rect, kx, ky, 0), function(tile){
        if (tile) {
          ky.position = units.tileToGame(tile.row + 1) + rect.boundingBox.top;
          return this.onCollision(Side.TOP, false);
        }
      });
    } else {
      this.onWallCollision(map, topBox(rect, kx, ky, Δy), function(tile){
        if (tile) {
          ky.position = units.tileToGame(tile.row + 1) + rect.boundingBox.top;
          this.onCollision(Side.TOP, true);
          return ky.position = units.tileToGame(tile.row + 1) + rect.boundingBox.top;
        } else {
          ky.position += Δy;
          return this.onDelta(Side.TOP);
        }
      });
      return this.onWallCollision(map, bottomBox(rect, kx, ky, 0), function(tile){
        if (tile) {
          ky.position = units.tileToGame(tile.row) - rect.boundingBox.bottom;
          return this.onCollision(Side.BOTTOM, false);
        }
      });
    }
  };
  return MapCollidable;
}());
},{"./map":27,"./units":50,"std":48}],27:[function(require,module,exports){
var std, units, div, tpx, gameToPx, tileToGame, Sprite, FixedBackdrop, ref$, AIR_TILE, WALL_TILE, kMapWidth, Tile, CollisionTile, Map;
std = require('std');
units = require('./units');
div = std.div;
tpx = units.tileToPx, gameToPx = units.gameToPx, tileToGame = units.tileToGame;
Sprite = require('./sprite').Sprite;
FixedBackdrop = require('./backdrop').FixedBackdrop;
ref$ = std['enum'], AIR_TILE = ref$[0], WALL_TILE = ref$[1];
kMapWidth = 20;
Tile = (function(){
  Tile.displayName = 'Tile';
  var prototype = Tile.prototype, constructor = Tile;
  function Tile(type, sprite){
    this.type = type != null ? type : AIR_TILE;
    this.sprite = sprite;
  }
  return Tile;
}());
CollisionTile = (function(){
  CollisionTile.displayName = 'CollisionTile';
  var prototype = CollisionTile.prototype, constructor = CollisionTile;
  function CollisionTile(row, col, type){
    this.row = row;
    this.col = col;
    this.type = type;
  }
  return CollisionTile;
}());
module.exports = Map = (function(){
  Map.displayName = 'Map';
  var prototype = Map.prototype, constructor = Map;
  function Map(){
    this.backdrop = null;
    this.tiles = Map.createMatrix(new Tile, kMapWidth, 15);
    this.bgTiles = Map.createMatrix(null, kMapWidth, 15);
  }
  prototype.draw = function(graphics){
    var i$, ref$, len$, y, row, lresult$, j$, len1$, x, tile, ref1$, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.tiles).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        tile = row[j$];
        lresult$.push((ref1$ = tile.sprite) != null ? ref1$.draw(graphics, tileToGame(x), tileToGame(y)) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.drawBackground = function(graphics){
    var i$, ref$, len$, y, row, lresult$, j$, len1$, x, sprite, results$ = [];
    this.backdrop.draw(graphics);
    for (i$ = 0, len$ = (ref$ = this.bgTiles).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        sprite = row[j$];
        lresult$.push(sprite != null ? sprite.draw(graphics, tileToGame(x), tileToGame(y)) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.getCollidingTiles = function(rect){
    var firstRow, lastRow, firstCol, lastCol, collisionTiles, i$, row, j$, col;
    firstRow = div(gameToPx(rect.top), tpx(1));
    lastRow = div(gameToPx(rect.bottom), tpx(1));
    firstCol = div(gameToPx(rect.left), tpx(1));
    lastCol = div(gameToPx(rect.right), tpx(1));
    collisionTiles = [];
    for (i$ = firstRow; i$ <= lastRow; ++i$) {
      row = i$;
      for (j$ = firstCol; j$ <= lastCol; ++j$) {
        col = j$;
        if (row < 0 || col < 0 || col >= kMapWidth) {
          collisionTiles.push(new CollisionTile(row, col, WALL_TILE));
        } else {
          collisionTiles.push(new CollisionTile(row, col, this.tiles[row][col].type));
        }
      }
    }
    return collisionTiles;
  };
  Map.createTestMap = function(graphics){
    var map, bgPath, fgPath, numRows, numCols, row, tile, i$, col, chainTop, chainMid, chainBtm;
    map = new Map;
    bgPath = 'bkBlue';
    fgPath = 'Stage/PrtCave';
    map.backdrop = new FixedBackdrop(bgPath, graphics);
    numRows = 15;
    numCols = 20;
    row = 11;
    tile = new Tile(WALL_TILE, new Sprite(graphics, fgPath, tpx(1), tpx(0), tpx(1), tpx(1)));
    for (i$ = 0; i$ <= numCols; ++i$) {
      col = i$;
      map.tiles[row][col] = tile;
    }
    map.tiles[10][5] = tile;
    map.tiles[9][4] = tile;
    map.tiles[8][3] = tile;
    map.tiles[7][2] = tile;
    map.tiles[10][3] = tile;
    map.tiles[10][0] = tile;
    map.tiles[8][10] = tile;
    chainTop = new Sprite(graphics, fgPath, tpx(11), tpx(2), tpx(1), tpx(1));
    chainMid = new Sprite(graphics, fgPath, tpx(12), tpx(2), tpx(1), tpx(1));
    chainBtm = new Sprite(graphics, fgPath, tpx(13), tpx(2), tpx(1), tpx(1));
    map.bgTiles[8][2] = chainTop;
    map.bgTiles[9][2] = chainMid;
    map.bgTiles[10][2] = chainBtm;
    return map;
  };
  Map.createMatrix = function(value, cols, rows){
    var i$, y, lresult$, j$, z, results$ = [];
    for (i$ = 0; i$ <= rows; ++i$) {
      y = i$;
      lresult$ = [];
      for (j$ = 0; j$ <= cols; ++j$) {
        z = j$;
        lresult$.push(value);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  Map.WALL_TILE = WALL_TILE;
  Map.AIR_TILE = AIR_TILE;
  return Map;
}());
},{"./backdrop":10,"./sprite":45,"./units":50,"std":48}],28:[function(require,module,exports){
var std, units, readout, ParticleTools, ParticleSystem, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
readout = require('./readout');
out$.ParticleTools = ParticleTools = (function(){
  ParticleTools.displayName = 'ParticleTools';
  var prototype = ParticleTools.prototype, constructor = ParticleTools;
  function ParticleTools(graphics){
    this.graphics = graphics;
    readout.addReader('particles', 'Particles', 0);
    this.entitySystem = new ParticleSystem;
    this.frontSystem = new ParticleSystem;
  }
  prototype.update = function(elapsedTime){
    readout.update('particles', this.entitySystem.particles.length + this.frontSystem.particles.length);
    this.entitySystem.update(elapsedTime);
    return this.frontSystem.update(elapsedTime);
  };
  return ParticleTools;
}());
out$.ParticleSystem = ParticleSystem = (function(){
  ParticleSystem.displayName = 'ParticleSystem';
  var prototype = ParticleSystem.prototype, constructor = ParticleSystem;
  function ParticleSystem(){
    this.particles = [];
  }
  prototype.addNewParticle = function(it){
    return this.particles.push(it);
  };
  prototype.update = function(elapsedTime){
    return this.particles = std.filter(function(it){
      return it.update(elapsedTime);
    }, this.particles);
  };
  prototype.draw = function(graphics){
    return this.particles.forEach(function(it){
      return it.draw(graphics);
    });
  };
  return ParticleSystem;
}());
},{"./readout":35,"./units":50,"std":48}],29:[function(require,module,exports){
var InterfaceError, Particle, out$ = typeof exports != 'undefined' && exports || this;
InterfaceError = (function(superclass){
  var prototype = extend$((import$(InterfaceError, superclass).displayName = 'InterfaceError', InterfaceError), superclass).prototype, constructor = InterfaceError;
  function InterfaceError(message){
    this.message = message;
    this.name = 'InterfaceError';
  }
  return InterfaceError;
}(Error));
out$.Particle = Particle = (function(){
  Particle.displayName = 'Particle';
  var prototype = Particle.prototype, constructor = Particle;
  prototype.update = function(elapsedTime){
    throw new InterfaceError("Particle - `update` not implemented");
  };
  prototype.draw = function(graphics){
    throw new InterfaceError("Particle - `draw` not implemented");
  };
  function Particle(){}
  return Particle;
}());
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],30:[function(require,module,exports){
var std, units, kHalfTile, tpx, Timer, Rectangle, Kinematics, AnimatedSprite, ref$, MapCollidable, Side, SimpleCollisionRectangle, FrictionAccelerator, kGravityAcc, HEALTH, MISSILES, EXPERIENCE, SMALL, MEDIUM, LARGE, Pickup, PowerDorito, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units'), kHalfTile = units.kHalfTile, tpx = units.tileToPx;
Timer = require('./timer').Timer;
Rectangle = require('./rectangle').Rectangle;
Kinematics = require('./kinematics').Kinematics;
AnimatedSprite = require('./sprite').AnimatedSprite;
ref$ = require('./map-collidable'), MapCollidable = ref$.MapCollidable, Side = ref$.Side;
SimpleCollisionRectangle = require('./collision-rectangle').SimpleCollisionRectangle;
ref$ = require('./accelerators'), FrictionAccelerator = ref$.FrictionAccelerator, kGravityAcc = ref$.kGravityAcc;
ref$ = std['enum'], HEALTH = ref$[0], MISSILES = ref$[1], EXPERIENCE = ref$[2];
ref$ = std['enum'], SMALL = ref$[0], MEDIUM = ref$[1], LARGE = ref$[2];
out$.Pickup = Pickup = (function(){
  Pickup.displayName = 'Pickup';
  var prototype = Pickup.prototype, constructor = Pickup;
  Pickup.SMALL = SMALL;
  Pickup.MEDIUM = MEDIUM;
  Pickup.LARGE = LARGE;
  function Pickup(type, value){
    this.type = type;
    this.value = value;
    this.collisonRectangle = new Rectangle;
  }
  prototype.draw = function(graphics){};
  prototype.update = function(elapsedTime){};
  return Pickup;
}());
out$.PowerDorito = PowerDorito = (function(superclass){
  var kValues, kSpriteName, kSourceX, kSourceYs, kSourceWidth, kSourceHeight, kFps, kNumFrames, kLifetime, kFlashtime, kFlashPeriod, kBounceSpeed, kFriction, kCollisionRectangles, prototype = extend$((import$(PowerDorito, superclass).displayName = 'PowerDorito', PowerDorito), superclass).prototype, constructor = PowerDorito;
  importAll$(prototype, arguments[1]);
  kValues = [1, 5, 20];
  kSpriteName = 'Npc/NpcSym';
  kSourceX = 0;
  kSourceYs = [1, 2, 3];
  kSourceWidth = 1;
  kSourceHeight = 1;
  kFps = 14;
  kNumFrames = 6;
  kLifetime = 8000;
  kFlashtime = 7000;
  kFlashPeriod = 50;
  kBounceSpeed = 0.225;
  kFriction = new FrictionAccelerator(0.00002);
  kCollisionRectangles = [new SimpleCollisionRectangle(new Rectangle(8, 8, 16, 16)), new SimpleCollisionRectangle(new Rectangle(4, 4, 24, 24)), new SimpleCollisionRectangle(new Rectangle(0, 0, 32, 32))];
  function PowerDorito(graphics, centerX, centerY, size){
    this.centerX = centerX;
    this.centerY = centerY;
    this.size = size != null ? size : SMALL;
    PowerDorito.superclass.call(this, EXPERIENCE, kValues[this.size]);
    this.kinematicsX = new Kinematics(this.centerX - kHalfTile, 0.025 * std.rand(-5, 5));
    this.kinematicsY = new Kinematics(this.centerY - kHalfTile, 0.025 * std.rand(-5, 5));
    this.timer = new Timer(kLifetime, true);
    this.sprite = new AnimatedSprite(graphics, kSpriteName, tpx(kSourceX), tpx(kSourceYs[this.size]), tpx(kSourceWidth), tpx(kSourceHeight), kFps, kNumFrames);
  }
  prototype.draw = function(graphics){
    if (this.timer.currentTime < kFlashtime || std.div(this.timer.currentTime, kFlashPeriod) % 2 === 0) {
      this.sprite.draw(graphics, this.kinematicsX.position, this.kinematicsY.position);
    }
    return graphics.visualiseRect(this.collisionRectangle());
  };
  prototype.update = function(elapsedTime, map){
    this.sprite.update();
    this.updateY(kCollisionRectangles[this.size], kGravityAcc, this.kinematicsX, this.kinematicsY, elapsedTime, map);
    this.updateX(kCollisionRectangles[this.size], kFriction, this.kinematicsX, this.kinematicsY, elapsedTime, map);
    return this.timer.isActive;
  };
  prototype.collisionRectangle = function(){
    var box;
    box = kCollisionRectangles[this.size].boundingBox;
    return new Rectangle(this.kinematicsX.position + box.left, this.kinematicsY.position + box.top, box.w, box.h);
  };
  prototype.onCollision = function(side, isDeltaDirection){
    if (side === Side.TOP) {
      return this.kinematicsY.velocity = 0;
    } else if (side === Side.BOTTOM) {
      return this.kinematicsY.velocity = -kBounceSpeed;
    } else {
      return this.kinematicsX.velocity *= -1;
    }
  };
  prototype.onDelta = function(side){};
  return PowerDorito;
}(Pickup, MapCollidable.prototype));
Pickup.HEALTH = HEALTH;
Pickup.MISSILES = MISSILES;
Pickup.EXPERIENCE = EXPERIENCE;
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
},{"./accelerators":8,"./collision-rectangle":11,"./kinematics":25,"./map-collidable":26,"./rectangle":36,"./sprite":45,"./timer":49,"./units":50,"std":48}],31:[function(require,module,exports){
var std, units, Pickups, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
out$.Pickups = Pickups = (function(){
  Pickups.displayName = 'Pickups';
  var prototype = Pickups.prototype, constructor = Pickups;
  function Pickups(){
    this.pickups = [];
  }
  prototype.update = function(elapsedTime, map){
    return this.pickups = this.pickups.filter(function(it){
      return it.update(elapsedTime, map);
    });
  };
  prototype.add = function(pickup){
    return this.pickups.push(pickup);
  };
  prototype.draw = function(graphics){
    return this.pickups.map(function(it){
      return it.draw(graphics);
    });
  };
  prototype.handleCollisions = function(player){
    return this.pickups = this.pickups.filter(function(it){
      if (player.damageCollision().collidesWith(it.collisionRectangle())) {
        player.collectPickup(it);
        return false;
      }
      return true;
    });
  };
  return Pickups;
}());
},{"./units":50,"std":48}],32:[function(require,module,exports){
var std, units, config, readout, kHalfTile, tileToGame, tpx, Timer, Health, Pickup, Kinematics, Damageable, DamageText, DamageTexts, PolarStar, GunExperienceHUD, MapCollidable, ref$, SpriteState, State, Rect, HeadBumpParticle, CompositeCollisionRectangle, ConstantAccelerator, FrictionAccelerator, BidirectionalAccelerator, kZero, kGravity, kTerminalSpeed, Side, Sprite, AnimatedSprite, NumberSprite, kCharacterFrame, kWalkFrame, kStandFrame, kJumpFrame, kFallFrame, kUpFrameOffset, kDownFrame, kBackFrame, kNumWalkFrames, kWalkFps, kStrideMiddleFrameOffset, kStrideLeftFrameOffset, kStrideRightFrameOffset, kJumpSpeed, kShortJumpSpeed, kMaxSpeedX, kWalkAcc, kAirAcc, kGravityAcc, kFrictionAcc, kJumpGravityAcc, kInvincibleTime, kInvincibleFlashTime, kCollisionX, kCollisionYTop, kCollisionYHeight, kCollisionYTopWidth, kCollisionYBottomWidth, kCollisionYTopLeft, kCollisionYBottomLeft, kCollisionRectangle, WalkingAnimation, Player, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
config = require('./config');
readout = require('./readout');
kHalfTile = units.kHalfTile, tileToGame = units.tileToGame, tpx = units.tileToPx;
Timer = require('./timer').Timer;
Health = require('./health').Health;
Pickup = require('./pickup').Pickup;
Kinematics = require('./kinematics').Kinematics;
Damageable = require('./damageable').Damageable;
DamageText = require('./damage-text').DamageText;
DamageTexts = require('./damage-texts').DamageTexts;
PolarStar = require('./arms').PolarStar;
GunExperienceHUD = require('./gun-xp-hud').GunExperienceHUD;
MapCollidable = require('./map-collidable').MapCollidable;
ref$ = require('./spritestate'), SpriteState = ref$.SpriteState, State = ref$.State;
Rect = require('./rectangle').Rectangle;
HeadBumpParticle = require('./head-bump-particle').HeadBumpParticle;
CompositeCollisionRectangle = require('./collision-rectangle').CompositeCollisionRectangle;
ref$ = require('./accelerators'), ConstantAccelerator = ref$.ConstantAccelerator, FrictionAccelerator = ref$.FrictionAccelerator, BidirectionalAccelerator = ref$.BidirectionalAccelerator, kZero = ref$.kZero, kGravity = ref$.kGravity, kTerminalSpeed = ref$.kTerminalSpeed;
Side = require('./map-collidable').Side;
ref$ = require('./sprite'), Sprite = ref$.Sprite, AnimatedSprite = ref$.AnimatedSprite, NumberSprite = ref$.NumberSprite;
kCharacterFrame = 0;
kWalkFrame = 0;
kStandFrame = 0;
kJumpFrame = 1;
kFallFrame = 2;
kUpFrameOffset = 3;
kDownFrame = 6;
kBackFrame = 7;
kNumWalkFrames = 3;
kWalkFps = 15;
kStrideMiddleFrameOffset = 0;
kStrideLeftFrameOffset = 1;
kStrideRightFrameOffset = 2;
kJumpSpeed = 0.25;
kShortJumpSpeed = kJumpSpeed / 1.5;
kMaxSpeedX = 0.15859375;
kWalkAcc = new BidirectionalAccelerator(0.00083007812, kMaxSpeedX);
kAirAcc = new BidirectionalAccelerator(0.0003125, kMaxSpeedX);
kGravityAcc = new ConstantAccelerator(kGravity, kTerminalSpeed);
kFrictionAcc = new FrictionAccelerator(0.00049804687);
kJumpGravityAcc = new ConstantAccelerator(0.0003125, kTerminalSpeed);
kInvincibleTime = 3000;
kInvincibleFlashTime = 50;
kCollisionX = new Rect(6, 10, 20, 12);
kCollisionYTop = 2;
kCollisionYHeight = 30;
kCollisionYTopWidth = 18;
kCollisionYBottomWidth = 10;
kCollisionYTopLeft = (tileToGame(1) - kCollisionYTopWidth) / 2;
kCollisionYBottomLeft = (tileToGame(1) - kCollisionYBottomWidth) / 2;
kCollisionRectangle = new CompositeCollisionRectangle(new Rect(kCollisionYTopLeft, kCollisionYTop, kCollisionYTopWidth, kCollisionYHeight / 2), new Rect(kCollisionYBottomLeft, kCollisionYTop + kCollisionYHeight / 2, kCollisionYBottomWidth, kCollisionYHeight / 2), new Rect(6, 10, 10, 12), new Rect(16, 10, 10, 12));
WalkingAnimation = (function(){
  WalkingAnimation.displayName = 'WalkingAnimation';
  var prototype = WalkingAnimation.prototype, constructor = WalkingAnimation;
  function WalkingAnimation(numFrames, fps){
    this.numFrames = numFrames;
    this.fps = fps;
    this.frameTimer = new Timer(1000 / this.fps);
    this.forward = true;
    this.index = 0;
  }
  prototype.stride = function(){
    switch (this.index) {
    case 0:
      return State.STRIDE_LEFT;
    case 1:
      return State.STRIDE_MIDDLE;
    case 2:
      return State.STRIDE_RIGHT;
    default:
      return State.STRIDE_LEFT;
    }
  };
  prototype.update = function(){
    if (this.frameTimer.isExpired) {
      this.frameTimer.reset();
      if (this.forward) {
        this.index += 1;
        return this.forward = this.index !== this.numFrames - 1;
      } else {
        this.index -= 1;
        return this.forward = this.index === 0;
      }
    }
  };
  prototype.reset = function(){
    this.frameTimer.reset();
    this.index = 0;
    return this.forward = true;
  };
  return WalkingAnimation;
}());
out$.Player = Player = (function(){
  Player.displayName = 'Player';
  var prototype = Player.prototype, constructor = Player;
  importAll$(prototype, arguments[0]);
  importAll$(prototype, arguments[1]);
  function Player(graphics, x, y, ptools){
    this.ptools = ptools;
    readout.addReader('player-pos', 'Player');
    this.accelerationX = 0;
    this.horizontalFacing = State.LEFT;
    this.intendedVerticalFacing = State.HORIZONTAL;
    this.onGround = false;
    this.jumpActive = false;
    this.interacting = false;
    this.kinematicsX = new Kinematics(x, 0);
    this.kinematicsY = new Kinematics(y, 0);
    this.walkAnimation = new WalkingAnimation(kNumWalkFrames, kWalkFps);
    this.invincibleTimer = new Timer(kInvincibleTime);
    this.health = new Health(graphics);
    this.gunHud = new GunExperienceHUD(graphics);
    this.sprites = this.initialiseSprites(graphics);
    this.damageText = new DamageText(graphics);
    DamageTexts.addDamageable(this);
    this.gun = new PolarStar(graphics);
  }
  prototype.initialiseSprites = function(graphics, spriteMap){
    spriteMap == null && (spriteMap = {});
    return SpriteState.generateWith(function(state){
      var tileX, tileY;
      tileX = (function(){
        switch (true) {
        case state.WALKING:
          return kWalkFrame;
        case state.STANDING:
          return kStandFrame;
        case state.JUMPING:
          return kJumpFrame;
        case state.FALLING:
          return kFallFrame;
        case state.INTERACTING:
          return kBackFrame;
        }
      }());
      if (state.UP) {
        tileX += kUpFrameOffset;
      }
      if (state.DOWN) {
        tileX = kDownFrame;
      }
      tileY = kCharacterFrame + (state.LEFT ? 0 : 1);
      if (state.WALKING) {
        tileX += (function(){
          switch (true) {
          case state.STRIDE_LEFT:
            return kStrideLeftFrameOffset;
          case state.STRIDE_RIGHT:
            return kStrideRightFrameOffset;
          case state.STRIDE_MIDDLE:
            return kStrideMiddleFrameOffset;
          }
        }());
      }
      return new Sprite(graphics, 'MyChar', tpx(tileX), tpx(tileY), tpx(1), tpx(1));
    });
  };
  prototype.update = function(elapsedTime, map){
    var accX, accY;
    this.health.update();
    this.walkAnimation.update(elapsedTime);
    this.gun.updateProjectiles(elapsedTime, map, this.ptools);
    readout.update('player-pos', std.round(this.centerX) + "," + std.round(this.centerY));
    accX = this.onGround
      ? this.accelerationX === 0
        ? kFrictionAcc
        : this.accelerationX < 0
          ? kWalkAcc.negative
          : kWalkAcc.positive
      : this.accelerationX === 0
        ? kZero
        : this.accelerationX < 0
          ? kAirAcc.negative
          : kAirAcc.positive;
    this.updateX(kCollisionRectangle, accX, this.kinematicsX, this.kinematicsY, elapsedTime, map);
    accY = this.jumpActive && this.kinematicsY.velocity < 0 ? kJumpGravityAcc : kGravityAcc;
    return this.updateY(kCollisionRectangle, accY, this.kinematicsX, this.kinematicsY, elapsedTime, map);
  };
  prototype.takeDamage = function(damage){
    damage == null && (damage = 1);
    if (!this.invincibleTimer.isActive) {
      this.health.takeDamage(damage);
      this.kinematicsY.velocity = std.min(-kShortJumpSpeed, this.kinematicsY.velocity);
      this.invincible = true;
      this.invincibleTimer.reset();
      return this.damageText.setDamage(damage);
    }
  };
  prototype.collectPickup = function(pickup){
    std.log('SFX: Ding!');
    std.log(pickup, Pickup.EXPERIENCE);
    if (pickup.type === Pickup.EXPERIENCE) {
      this.gun.collectExperience(pickup.value);
      return this.gunHud.activateFlash();
    }
  };
  prototype.spriteIsVisible = function(){
    var duty;
    duty = std.div(this.invincibleTimer.currentTime, kInvincibleFlashTime) % 2 === 0;
    return !(this.invincibleTimer.isActive && duty);
  };
  prototype.draw = function(graphics){
    var state;
    if (config.showCollisions) {
      graphics.visualiseRect(this.damageCollision());
    }
    if (this.spriteIsVisible()) {
      state = this.getSpriteState();
      this.gun.draw(graphics, this.kinematicsX.position, this.kinematicsY.position, state);
      return this.sprites[state.key].draw(graphics, this.kinematicsX.position, this.kinematicsY.position);
    }
  };
  prototype.drawHud = function(graphics){
    if (!this.spriteIsVisible()) {
      return;
    }
    this.gun.drawHud(graphics, this.gunHud);
    return this.health.draw(graphics);
  };
  prototype.getSpriteState = function(){
    var motionType;
    motionType = this.interacting
      ? State.INTERACTING
      : this.onGround
        ? this.accelerationX === 0
          ? State.STANDING
          : State.WALKING
        : this.kinematicsY.velocity < 0
          ? State.JUMPING
          : State.FALLING;
    return SpriteState.make(this.horizontalFacing, this.verticalFacing(), motionType, this.walkAnimation.stride());
  };
  prototype.onCollision = function(side, isDeltaDirection){
    switch (side) {
    case Side.TOP:
      if (isDeltaDirection) {
        this.kinematicsY.velocity = 0;
      }
      return this.ptools.frontSystem.addNewParticle(new HeadBumpParticle(this.ptools.graphics, this.centerX, this.kinematicsY.position + kCollisionRectangle.boundingBox.top));
    case Side.BOTTOM:
      this.onGround = true;
      if (isDeltaDirection) {
        return this.kinematicsY.velocity = 0;
      }
      break;
    case Side.LEFT:
      if (isDeltaDirection) {
        return this.kinematicsX.velocity = 0;
      }
      break;
    case Side.RIGHT:
      if (isDeltaDirection) {
        return this.kinematicsX.velocity = 0;
      }
    }
  };
  prototype.onDelta = function(side){
    switch (side) {
    case Side.TOP:
      return this.onGround = false;
    case Side.BOTTOM:
      return this.onGround = false;
    case Side.LEFT:
      break;
    case Side.RIGHT:
    }
  };
  prototype.damageCollision = function(){
    return kCollisionRectangle.boundingBox.translate(this.kinematicsX.position, this.kinematicsY.position);
  };
  prototype.startMovingLeft = function(){
    if (this.onGround && this.accelerationX === 0) {
      this.walkAnimation.reset();
    }
    this.horizontalFacing = State.LEFT;
    this.accelerationX = -1;
    return this.interacting = false;
  };
  prototype.startMovingRight = function(){
    if (this.onGround && this.accelerationX === 0) {
      this.walkAnimation.reset();
    }
    this.horizontalFacing = State.RIGHT;
    this.accelerationX = 1;
    return this.interacting = false;
  };
  prototype.stopMoving = function(){
    return this.accelerationX = 0;
  };
  prototype.startJump = function(){
    this.jumpActive = true;
    this.interacting = false;
    if (this.onGround) {
      return this.kinematicsY.velocity = -kJumpSpeed;
    }
  };
  prototype.stopJump = function(){
    return this.jumpActive = false;
  };
  prototype.startFire = function(){
    return this.gun.startFire(this.getSpriteState(), this.kinematicsX.position, this.kinematicsY.position);
  };
  prototype.stopFire = function(){
    return this.gun.stopFire();
  };
  prototype.lookUp = function(){
    this.intendedVerticalFacing = State.UP;
    return this.interacting = false;
  };
  prototype.lookDown = function(){
    if (this.intendedVerticalFacing === State.DOWN) {
      return;
    }
    this.intendedVerticalFacing = State.DOWN;
    return this.interacting = this.onGround;
  };
  prototype.lookHorizontal = function(){
    return this.intendedVerticalFacing = State.HORIZONTAL;
  };
  Object.defineProperty(prototype, 'centerX', {
    get: function(){
      return this.kinematicsX.position + kHalfTile;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'centerY', {
    get: function(){
      return this.kinematicsY.position + kHalfTile;
    },
    configurable: true,
    enumerable: true
  });
  prototype.getDamageText = function(){
    return this.damageText;
  };
  prototype.getProjectiles = function(){
    return this.gun.getProjectiles();
  };
  prototype.verticalFacing = function(){
    if (this.onGround && this.intendedVerticalFacing === State.DOWN) {
      return State.HORIZONTAL;
    } else {
      return this.intendedVerticalFacing;
    }
  };
  return Player;
}(Damageable.prototype, MapCollidable.prototype));
function importAll$(obj, src){
  for (var key in src) obj[key] = src[key];
  return obj;
}
},{"./accelerators":8,"./arms":9,"./collision-rectangle":11,"./config":12,"./damage-text":13,"./damage-texts":14,"./damageable":15,"./gun-xp-hud":20,"./head-bump-particle":21,"./health":22,"./kinematics":25,"./map-collidable":26,"./pickup":30,"./readout":35,"./rectangle":36,"./sprite":45,"./spritestate":46,"./timer":49,"./units":50,"std":48}],33:[function(require,module,exports){
var std, PolarVector, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
out$.PolarVector = PolarVector = (function(){
  PolarVector.displayName = 'PolarVector';
  var prototype = PolarVector.prototype, constructor = PolarVector;
  function PolarVector(mag, angle){
    this.mag = mag;
    this.angle = angle;
  }
  Object.defineProperty(prototype, 'x', {
    get: function(){
      return this.mag * std.cos(this.angle);
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'y', {
    get: function(){
      return this.mag * std.sin(this.angle);
    },
    configurable: true,
    enumerable: true
  });
  return PolarVector;
}());
},{"std":48}],34:[function(require,module,exports){
var Projectile, out$ = typeof exports != 'undefined' && exports || this;
out$.Projectile = Projectile = (function(){
  Projectile.displayName = 'Projectile';
  var prototype = Projectile.prototype, constructor = Projectile;
  function Projectile(damage){
    this.contactDamage = damage;
  }
  prototype.collisionRectangle = function(){};
  prototype.collideWithEnemy = function(){};
  return Projectile;
}());
},{}],35:[function(require,module,exports){
var config, elm, applyStyles, Reader, host, readers, install, addReader, update, removeReader, out$ = typeof exports != 'undefined' && exports || this;
config = require('./config');
elm = bind$(document, 'createElement');
applyStyles = function(el, styles){
  var k, v, results$ = [];
  for (k in styles) {
    v = styles[k];
    results$.push(el.style[k] = v);
  }
  return results$;
};
Reader = (function(){
  Reader.displayName = 'Reader';
  var prototype = Reader.prototype, constructor = Reader;
  function Reader(name, labelText, value){
    var that;
    this.name = name;
    this.labelText = labelText;
    this.value = value;
    this.dom = elm('tr');
    this.label = elm('td');
    this.output = elm('td');
    this.dom.appendChild(this.label);
    this.dom.appendChild(this.output);
    this.label.innerHTML = this.labelText;
    if (that = this.value) {
      this.output.innerHTML = that;
    }
  }
  prototype.update = function(value){
    this.value = value;
    return this.output.innerHTML = this.value;
  };
  prototype.hide = function(){
    return this.dom.styles.display = 'none';
  };
  prototype.show = function(){
    return this.dom.styles.display = 'block';
  };
  prototype.install = function(host){
    return host.appendChild(this.dom);
  };
  prototype['delete'] = function(){
    return this.dom.parentNode.removeChild(this.dom);
  };
  return Reader;
}());
host = elm('table');
readers = {};
applyStyles(host, {
  fontFamily: 'monospace',
  width: '100%',
  paddingLeft: '10px',
  color: 'lightgrey',
  borderWidth: "3px 1px"
});
out$.install = install = function(){
  if (config.showReadout) {
    return document.body.appendChild(host);
  }
};
out$.addReader = addReader = function(name, label, value){
  readers[name] = new Reader(name, label, value);
  return readers[name].install(host);
};
out$.update = update = function(readerName, value){
  var ref$;
  return (ref$ = readers[readerName]) != null ? ref$.update(value) : void 8;
};
out$.removeReader = removeReader = function(name){
  var ref$;
  readers[name]['delete']();
  return ref$ = readers[name], delete readers[name], ref$;
};
function bind$(obj, key, target){
  return function(){ return (target || obj)[key].apply(obj, arguments) };
}
},{"./config":12}],36:[function(require,module,exports){
var units, Rectangle, out$ = typeof exports != 'undefined' && exports || this;
units = require('./units');
out$.Rectangle = Rectangle = (function(){
  Rectangle.displayName = 'Rectangle';
  var prototype = Rectangle.prototype, constructor = Rectangle;
  function Rectangle(x, y, w, h, m){
    m == null && (m = 1);
    this.x = x * m;
    this.y = y * m;
    this.w = w * m;
    this.h = h * m;
    this.top = this.y;
    this.left = this.x;
    this.right = this.x + this.w;
    this.bottom = this.y + this.h;
  }
  prototype.collidesWith = function(other){
    return this.right >= other.left && this.left <= other.right && this.top <= other.bottom && this.bottom >= other.top;
  };
  prototype.translate = function(x, y){
    return new Rectangle(this.x + x, this.y + y, this.w, this.h);
  };
  return Rectangle;
}());
},{"./units":50}],37:[function(require,module,exports){
var raf, out$ = typeof exports != 'undefined' && exports || this;
raf = requestAnimationFrame;
import$(out$, {
  delay: function(time, λ){
    return raf(λ);
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],38:[function(require,module,exports){
var std, queue, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = [];
import$(out$, {
  pushEvent: function(event){
    return queue.push(event);
  },
  pollEvent: function(){
    if (queue.length) {
      return queue.shift();
    }
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"std":48}],39:[function(require,module,exports){
var std, delay, timer, screen, keyboard, eventQueue, Rect, Surface, ref$, INIT_EVERYTHING, FULLSCREEN, init, KEY, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
delay = require('./delay');
timer = require('./timer');
screen = require('./screen');
keyboard = require('./keyboard');
eventQueue = require('./event-queue');
out$.Rect = Rect = require('./rect');
out$.Surface = Surface = require('./surface');
ref$ = std['enum'], INIT_EVERYTHING = ref$[0], FULLSCREEN = ref$[1];
out$.init = init = function(mode){
  std.log("SDL::Init - with mode:", mode);
  timer.init();
  return keyboard.init();
};
out$.INIT_EVERYTHING = INIT_EVERYTHING;
out$.FULLSCREEN = FULLSCREEN;
out$.KEYDOWN = keyboard.KEYDOWN;
out$.KEYUP = keyboard.KEYUP;
out$.KEY = KEY = keyboard.KEYCODES;
out$.delay = delay.delay;
out$.getTicks = timer.getTicks;
out$.pollEvent = eventQueue.pollEvent;
out$.setVideoMode = screen.setVideoMode;
out$.blitSurface = Surface.blitSurface;
out$.setColorKey = Surface.setColorKey;
out$.loadImage = Surface.loadImage;
},{"./delay":37,"./event-queue":38,"./keyboard":40,"./rect":41,"./screen":42,"./surface":43,"./timer":44,"std":48}],40:[function(require,module,exports){
var std, queue, ref$, KEYDOWN, KEYUP, KEYCODES, monitorKeys, init, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = require('./event-queue');
ref$ = std['enum'], KEYDOWN = ref$[0], KEYUP = ref$[1];
out$.KEYCODES = KEYCODES = {
  ESCAPE: 27,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  ONE: 49,
  TWO: 50,
  THREE: 51,
  FOUR: 52,
  FIVE: 53,
  SIX: 54,
  SEVEN: 55,
  EIGHT: 56,
  NINE: 57,
  A: 65,
  Q: 81,
  S: 83,
  W: 87,
  X: 88,
  Z: 90
};
monitorKeys = function(){
  document.addEventListener('keydown', function(event){
    var which;
    which = event.which;
    queue.pushEvent({
      type: KEYDOWN,
      key: which
    });
    if (which === KEYCODES.UP || which === KEYCODES.DOWN || which === KEYCODES.LEFT || which === KEYCODES.RIGHT) {
      return event.preventDefault();
    }
  });
  return document.addEventListener('keyup', function(event){
    var which;
    which = event.which;
    queue.pushEvent({
      type: KEYUP,
      key: which
    });
    return event.preventDefault();
  });
};
out$.init = init = function(){
  std.log("SDL::Keyboard - Monitoring key input");
  return monitorKeys();
};
out$.KEYDOWN = KEYDOWN;
out$.KEYUP = KEYUP;
},{"./event-queue":38,"std":48}],41:[function(require,module,exports){
var Rect;
module.exports = Rect = (function(){
  Rect.displayName = 'Rect';
  var prototype = Rect.prototype, constructor = Rect;
  function Rect(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  Rect.clone = function(arg$){
    var x, y, w, h;
    x = arg$.x, y = arg$.y, w = arg$.w, h = arg$.h;
    return new Rect(x, y, w, h);
  };
  return Rect;
}());
},{}],42:[function(require,module,exports){
var std, Surface, applyScaleStyles, createNewScreen, setVideoMode, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
Surface = require('./surface');
applyScaleStyles = function(canvas, scaleFactor){
  if (scaleFactor !== 0) {
    return canvas.style.width = canvas.width * scaleFactor + 'px';
  }
};
createNewScreen = function(w, h, scaleFactor){
  var screen;
  screen = new Surface(null, w, h);
  document.body.appendChild(screen.canvas);
  applyScaleStyles(screen.canvas, scaleFactor);
  return screen;
};
out$.setVideoMode = setVideoMode = function(width, height, scaleFactor){
  scaleFactor == null && (scaleFactor = 1);
  return createNewScreen(width, height, scaleFactor);
};
},{"./surface":43,"std":48}],43:[function(require,module,exports){
var std, Rect, makeTransparent, Surface;
std = require('std');
Rect = require('./rect');
makeTransparent = function(data, color){
  var canvas, context, pixels, i$, to$, i;
  canvas = document.createElement('canvas');
  canvas.width = data.width;
  canvas.height = data.height;
  context = canvas.getContext('2d');
  context.drawImage(data, 0, 0);
  pixels = context.getImageData(0, 0, canvas.width, canvas.height);
  for (i$ = 0, to$ = pixels.data.length; i$ <= to$; i$ += 4) {
    i = i$;
    if (pixels.data[i + 0] === color[0] && pixels.data[i + 1] === color[1] && pixels.data[i + 2] === color[2]) {
      pixels.data[i + 3] = 0;
    }
  }
  context.putImageData(pixels, 0, 0);
  return canvas;
};
module.exports = Surface = (function(){
  Surface.displayName = 'Surface';
  var prototype = Surface.prototype, constructor = Surface;
  function Surface(src, width, height){
    this.width = width;
    this.height = height;
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.ready = false;
    this.colorKey = null;
    this.resetCanvasSize();
    this.ctx.fillStyle = 'red';
    this.ctx.fillRect(0, 0, this.width, this.height);
    if (typeof src === 'string') {
      this.loadImageData(src);
    } else if (src != null) {
      this.saveImageData(src);
    } else {}
  }
  prototype.resetCanvasSize = function(){
    this.canvas.width = this.width;
    return this.canvas.height = this.height;
  };
  prototype.inheritSizeFromImage = function(data){
    if (this.width == null && this.height == null) {
      this.width = data.naturalWidth;
      this.height = data.naturalHeight;
      return this.resetCanvasSize();
    }
  };
  prototype.loadImageData = function(path){
    var data, this$ = this;
    data = new Image;
    data.onload = function(){
      this$.inheritSizeFromImage(data);
      return this$.saveImageData(data);
    };
    data.onerror = function(){
      std.log("Cant load:", path);
      return this$.ctx.fillRect(0, 0, this$.width, this$.height);
    };
    return data.src = path;
  };
  prototype.saveImageData = function(data){
    this.data = this.colorKey ? makeTransparent(data, this.colorKey) : data;
    this.ready = true;
    this.ctx.clearRect(0, 0, this.width, this.height);
    return this.ctx.drawImage(this.data, 0, 0, this.width, this.height);
  };
  prototype.setColorKey = function(color){
    this.colorKey = color;
    if (this.ready) {
      return this.saveImageData(this.data);
    }
  };
  prototype.drawRect = function(rect, color){
    color == null && (color = 'black');
    this.ctx.fillStyle = color;
    return this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h);
  };
  prototype.drawBox = function(rect, color){
    color == null && (color = 'black');
    this.ctx.strokeStyle = color;
    this.ctx.beginPath();
    this.ctx.moveTo(0.5 + rect.x, 0.5 + rect.y);
    this.ctx.lineTo(0.5 + rect.x, -0.5 + rect.y + rect.h);
    this.ctx.lineTo(-0.5 + rect.x + rect.w, -0.5 + rect.y + rect.h);
    this.ctx.lineTo(-0.5 + rect.x + rect.w, 0.5 + rect.y);
    this.ctx.lineTo(0.5 + rect.x, 0.5 + rect.y);
    this.ctx.stroke();
    return this.ctx.closePath();
  };
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.width, this.height);
  };
  Surface.setColorKey = function(surface, color){
    return surface.setColorKey(color);
  };
  Surface.blitSurface = function(source, srcRect, dest, destRect){
    if (srcRect) {
      return dest.ctx.drawImage(source.canvas, srcRect.x, srcRect.y, srcRect.w, srcRect.h, destRect.x, destRect.y, destRect.w, destRect.h);
    } else {
      return dest.ctx.drawImage(source.canvas, destRect.x, destRect.y, destRect.w, destRect.h);
    }
  };
  Surface.loadImage = function(path){
    return new Surface(path);
  };
  return Surface;
}());
},{"./rect":41,"std":48}],44:[function(require,module,exports){
var startTime, out$ = typeof exports != 'undefined' && exports || this;
startTime = 0;
import$(out$, {
  init: function(){
    return startTime = Date.now();
  },
  getTicks: function(){
    return Date.now() - startTime;
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],45:[function(require,module,exports){
var SDL, std, units, div, kHalfTile, tpx, gameToPx, Timer, Rect, Sprite, AnimatedSprite, NumberSprite, VaryingWidthSprite, out$ = typeof exports != 'undefined' && exports || this;
SDL = require('SDL');
std = require('std');
units = require('./units');
div = std.div;
kHalfTile = units.kHalfTile, tpx = units.tileToPx, gameToPx = units.gameToPx;
Timer = require('./timer').Timer;
Rect = require('./rectangle').Rectangle;
out$.Sprite = Sprite = (function(){
  Sprite.displayName = 'Sprite';
  var prototype = Sprite.prototype, constructor = Sprite;
  function Sprite(graphics, path, x, y, w, h){
    this.w = w;
    this.h = h;
    this.sourceRect = new Rect(x, y, this.w, this.h);
    this.spriteSheet = graphics.loadImage(path, true);
  }
  prototype.update = function(){};
  prototype.draw = function(graphics, x, y){
    var destRect;
    destRect = new SDL.Rect(gameToPx(x), gameToPx(y), this.w, this.h);
    return graphics.blitSurface(this.spriteSheet, this.sourceRect, destRect);
  };
  return Sprite;
}());
out$.AnimatedSprite = AnimatedSprite = (function(superclass){
  var prototype = extend$((import$(AnimatedSprite, superclass).displayName = 'AnimatedSprite', AnimatedSprite), superclass).prototype, constructor = AnimatedSprite;
  function AnimatedSprite(graphics, path, srcX, srcY, w, h, fps, numFrames){
    var res$, i$, to$, ridx$;
    this.w = w;
    this.h = h;
    this.fps = fps;
    this.numFrames = numFrames;
    AnimatedSprite.superclass.apply(this, arguments);
    this.frameTimer = new Timer(1000 / this.fps);
    res$ = [];
    for (i$ = 0, to$ = this.numFrames; i$ < to$; ++i$) {
      ridx$ = i$;
      res$.push(ridx$);
    }
    this.keyframes = res$;
    this.currentFrame = 0;
    this.currentKeyframe = this.keyframes[0];
    this.originX = srcX;
    this.numCompletedLoops = 0;
  }
  prototype.draw = function(graphics, x, y, frameOffset){
    var destRect;
    frameOffset == null && (frameOffset = this.currentKeyframe);
    this.sourceRect.x = this.originX + frameOffset * this.sourceRect.w;
    destRect = new SDL.Rect(gameToPx(x), gameToPx(y), this.w, this.h);
    return graphics.blitSurface(this.spriteSheet, this.sourceRect, destRect);
  };
  prototype.update = function(){
    if (this.frameTimer.isExpired) {
      this.frameTimer.reset();
      this.currentFrame += 1;
      if (this.currentFrame >= this.keyframes.length) {
        this.numCompletedLoops += 1;
        this.currentFrame = 0;
      }
      return this.currentKeyframe = this.keyframes[this.currentFrame];
    }
  };
  return AnimatedSprite;
}(Sprite));
out$.NumberSprite = NumberSprite = (function(){
  NumberSprite.displayName = 'NumberSprite';
  var kDigitSrcY, kOpPlusSrcX, kOpMinusSrcX, kOpSrcY, kDigitSize, kRadix, ref$, WHITE, RED, PLUS, MINUS, NONE, prototype = NumberSprite.prototype, constructor = NumberSprite;
  kDigitSrcY = 3.5;
  kOpPlusSrcX = 2;
  kOpMinusSrcX = 2.5;
  kOpSrcY = 3;
  kDigitSize = units.kHalfTile;
  kRadix = 10;
  ref$ = std['enum'], WHITE = ref$[0], RED = ref$[1];
  ref$ = std['enum'], PLUS = ref$[0], MINUS = ref$[1], NONE = ref$[2];
  function NumberSprite(graphics, num, len, color, op){
    var srcY;
    this.num = num;
    this.len = len;
    this.color = color;
    this.op = op;
    this.digits = NumberSprite.seperateDigits(this.num);
    this.numDigits = this.digits.length;
    this.padding = this.len === 0
      ? 0
      : kDigitSize * (this.len - this.numDigits);
    srcY = this.color === WHITE
      ? kDigitSrcY
      : kDigitSrcY + 0.5;
    this.glyphs = this.digits.map(function(it){
      return new Sprite(graphics, 'TextBox', tpx(0.5 * it), tpx(srcY), tpx(0.5), tpx(0.5));
    });
    if (this.op === PLUS) {
      this.glyphs.push(new Sprite(graphics, 'TextBox', tpx(kOpPlusSrcX), tpx(kOpSrcY), tpx(0.5), tpx(0.5)));
    }
    if (this.op === MINUS) {
      this.glyphs.push(new Sprite(graphics, 'TextBox', tpx(kOpMinusSrcX), tpx(kOpSrcY), tpx(0.5), tpx(0.5)));
    }
    this.width = kHalfTile * this.glyphs.length;
    this.height = kHalfTile;
  }
  prototype.draw = function(graphics, x, y){
    var i$, ref$, len$, i, glyph, offset, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.glyphs).length; i$ < len$; ++i$) {
      i = i$;
      glyph = ref$[i$];
      offset = kDigitSize * (this.glyphs.length - 1 - i);
      results$.push(glyph.draw(graphics, x + this.padding + offset, y));
    }
    return results$;
  };
  prototype.drawCentered = function(graphics, x, y){
    return this.draw(graphics, x - this.width / 2, y - this.height / 2);
  };
  NumberSprite.seperateDigits = function(num){
    var digit, results$ = [];
    if (num === 0) {
      return [0];
    } else {
      while (num !== 0) {
        digit = num % kRadix;
        num = div(num, kRadix);
        results$.push(digit);
      }
      return results$;
    }
  };
  NumberSprite.HUDNumber = function(graphics, num, len){
    this.num = num;
    this.len = len;
    return new NumberSprite(graphics, this.num, this.len, WHITE, NONE);
  };
  NumberSprite.DamageNumber = function(graphics, num){
    this.num = num;
    return new NumberSprite(graphics, this.num, 0, RED, MINUS);
  };
  NumberSprite.ExperienceNumber = function(graphics, num){
    this.num = num;
    return new NumberSprite(graphics, this.num, 0, WHITE, PLUS);
  };
  return NumberSprite;
}());
out$.VaryingWidthSprite = VaryingWidthSprite = (function(superclass){
  var prototype = extend$((import$(VaryingWidthSprite, superclass).displayName = 'VaryingWidthSprite', VaryingWidthSprite), superclass).prototype, constructor = VaryingWidthSprite;
  function VaryingWidthSprite(graphics, path, x, y, w, h, maxWidth){
    this.w = w;
    this.h = h;
    this.maxWidth = maxWidth != null
      ? maxWidth
      : this.w;
    VaryingWidthSprite.superclass.apply(this, arguments);
  }
  prototype.setWidth = function(width){
    return this.w = width;
  };
  prototype.setPercentageWidth = function(fraction){
    return this.w = fraction * this.maxWidth;
  };
  return VaryingWidthSprite;
}(Sprite));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./rectangle":36,"./timer":49,"./units":50,"SDL":39,"std":48}],46:[function(require,module,exports){
var std, units, NONE, STANDING, WALKING, JUMPING, FALLING, INTERACTING, LEFT, RIGHT, UP, DOWN, HORIZONTAL, STRIDE_LEFT, STRIDE_RIGHT, STRIDE_MIDDLE, State, motions, hfacings, vfacings, strides, SpriteState, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
NONE = Math.pow(2, 0);
STANDING = Math.pow(2, 1);
WALKING = Math.pow(2, 2);
JUMPING = Math.pow(2, 3);
FALLING = Math.pow(2, 4);
INTERACTING = Math.pow(2, 5);
LEFT = Math.pow(2, 6);
RIGHT = Math.pow(2, 7);
UP = Math.pow(2, 8);
DOWN = Math.pow(2, 9);
HORIZONTAL = Math.pow(2, 10);
STRIDE_LEFT = Math.pow(2, 11);
STRIDE_RIGHT = Math.pow(2, 12);
STRIDE_MIDDLE = Math.pow(2, 13);
out$.State = State = {
  NONE: NONE,
  STANDING: STANDING,
  WALKING: WALKING,
  JUMPING: JUMPING,
  FALLING: FALLING,
  INTERACTING: INTERACTING,
  LEFT: LEFT,
  RIGHT: RIGHT,
  UP: UP,
  DOWN: DOWN,
  HORIZONTAL: HORIZONTAL,
  STRIDE_LEFT: STRIDE_LEFT,
  STRIDE_RIGHT: STRIDE_RIGHT,
  STRIDE_MIDDLE: STRIDE_MIDDLE
};
out$.motions = motions = [STANDING, WALKING, JUMPING, FALLING, INTERACTING];
out$.hfacings = hfacings = [LEFT, RIGHT];
out$.vfacings = vfacings = [UP, DOWN, HORIZONTAL];
out$.strides = strides = [STRIDE_LEFT, STRIDE_RIGHT, STRIDE_MIDDLE];
out$.SpriteState = SpriteState = {
  make: function(hfacing, vfacing, motion, stride){
    motion == null && (motion = NONE);
    stride == null && (stride = NONE);
    return {
      key: hfacing | vfacing | motion | stride,
      UP: vfacing === UP,
      DOWN: vfacing === DOWN,
      LEFT: hfacing === LEFT,
      RIGHT: hfacing === RIGHT,
      WALKING: motion === WALKING,
      JUMPING: motion === JUMPING,
      FALLING: motion === FALLING,
      STANDING: motion === STANDING,
      HORIZONTAL: vfacing === HORIZONTAL,
      INTERACTING: motion === INTERACTING,
      STRIDE_LEFT: stride === STRIDE_LEFT,
      STRIDE_RIGHT: stride === STRIDE_RIGHT,
      STRIDE_MIDDLE: stride === STRIDE_MIDDLE
    };
  },
  generateWith: function(fn){
    var m, h, v, s, ss;
    return std.mash((function(){
      var i$, ref$, len$, j$, ref1$, len1$, k$, ref2$, len2$, l$, ref3$, len3$, results$ = [];
      for (i$ = 0, len$ = (ref$ = motions).length; i$ < len$; ++i$) {
        m = ref$[i$];
        for (j$ = 0, len1$ = (ref1$ = hfacings).length; j$ < len1$; ++j$) {
          h = ref1$[j$];
          for (k$ = 0, len2$ = (ref2$ = vfacings).length; k$ < len2$; ++k$) {
            v = ref2$[k$];
            for (l$ = 0, len3$ = (ref3$ = strides).length; l$ < len3$; ++l$) {
              s = ref3$[l$];
              ss = SpriteState.make(h, v, m, s);
              results$.push([ss.key, fn(ss)]);
            }
          }
        }
      }
      return results$;
    }()));
  }
};
},{"./units":50,"std":48}],47:[function(require,module,exports){
var std, tpx, ImmobileSingleLoopParticle, StarParticle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
tpx = require('./units').tileToPx;
ImmobileSingleLoopParticle = require('./immobile-single-loop-particle').ImmobileSingleLoopParticle;
out$.StarParticle = StarParticle = (function(superclass){
  var prototype = extend$((import$(StarParticle, superclass).displayName = 'StarParticle', StarParticle), superclass).prototype, constructor = StarParticle;
  function StarParticle(graphics, x, y){
    StarParticle.superclass.call(this, graphics, x, y, 'Caret', tpx(0), tpx(3), tpx(1), tpx(1), 18, 4);
  }
  return StarParticle;
}(ImmobileSingleLoopParticle));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./immobile-single-loop-particle":23,"./units":50,"std":48}],48:[function(require,module,exports){
var ref$, id, map, filter, reject, any, div, reverse, log, info, objMap, mash, flip, delay, round, floor, abs, max, min, sin, cos, pi, tau, rand, InterfaceError, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('prelude-ls'), id = ref$.id, map = ref$.map, filter = ref$.filter, reject = ref$.reject, any = ref$.any, div = ref$.div, reverse = ref$.reverse;
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.info = info = function(){
  console.info.apply(console, arguments);
  return arguments[0];
};
out$.objMap = objMap = curry$(function(λ, o){
  var k, v, results$ = [];
  for (k in o) {
    v = o[k];
    results$.push(λ(k, v));
  }
  return results$;
});
out$.mash = mash = function(it){
  var i$, len$, ref$, k, v, results$ = {};
  for (i$ = 0, len$ = it.length; i$ < len$; ++i$) {
    ref$ = it[i$], k = ref$[0], v = ref$[1];
    results$[k] = v;
  }
  return results$;
};
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.round = round = Math.round;
out$.floor = floor = Math.floor;
out$.abs = abs = Math.abs;
out$.max = max = Math.max;
out$.min = min = Math.min;
out$.sin = sin = Math.sin;
out$.cos = cos = Math.cos;
out$.pi = pi = Math.PI;
out$.tau = tau = Math.PI * 2;
out$.rand = rand = function(min, max){
  return min + Math.random() * (max - min);
};
out$.InterfaceError = InterfaceError = (function(superclass){
  var prototype = extend$((import$(InterfaceError, superclass).displayName = 'InterfaceError', InterfaceError), superclass).prototype, constructor = InterfaceError;
  function InterfaceError(message){
    this.message = message;
    this.name = 'InterfaceError';
  }
  return InterfaceError;
}(Error));
ref$ = out$;
ref$.id = id;
ref$.any = any;
ref$.map = map;
ref$.filter = filter;
ref$.reject = reject;
ref$.div = div;
ref$.reverse = reverse;
ref$['enum'] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
ref$.bitmask = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"prelude-ls":7}],49:[function(require,module,exports){
var std, units, Timer, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
out$.Timer = Timer = (function(){
  Timer.displayName = 'Timer';
  var allTimers, prototype = Timer.prototype, constructor = Timer;
  allTimers = [];
  function Timer(expirationTime, startActive){
    this.expirationTime = expirationTime;
    startActive == null && (startActive = false);
    this.currentTime = startActive
      ? 0
      : this.expirationTime;
    allTimers.push(this);
  }
  prototype.update = function(elapsedTime){
    return this.currentTime += elapsedTime;
  };
  prototype.reset = function(){
    return this.currentTime = 0;
  };
  Object.defineProperty(prototype, 'isActive', {
    get: function(){
      return this.currentTime < this.expirationTime;
    },
    configurable: true,
    enumerable: true
  });
  Object.defineProperty(prototype, 'isExpired', {
    get: function(){
      return !this.isActive;
    },
    configurable: true,
    enumerable: true
  });
  prototype.active = function(){
    return this.currentTime < this.expirationTime;
  };
  prototype.expired = function(){
    return !(this.currentTime < this.expirationTime);
  };
  Timer.updateAll = function(elapsedTime){
    return allTimers.map(function(it){
      return it.update(elapsedTime);
    });
  };
  return Timer;
}());
},{"./units":50,"std":48}],50:[function(require,module,exports){
var std, config, kPi, kGameUnitsPerTile, kPixelScaleFactor, Game, Pixel, Tile, Degrees, GunLevel, GunXP, FPS, MS, Velocity, Acceleration, HP, gameToPx, gameToTile, tileToGame, tileToPx, pxToGame, pxToTile, degToRad, kOneTile, kHalfTile, kTilePx, kMaxGunLevel, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
config = require('./config');
kPi = Math.PI;
kGameUnitsPerTile = 32;
kPixelScaleFactor = kGameUnitsPerTile / config.kGraphicsQuality;
out$.Game = Game = std.id;
out$.Pixel = Pixel = std.floor;
out$.Tile = Tile = function(){
  return std.abs(std.floor.apply(this, arguments));
};
out$.Degrees = Degrees = std.id;
out$.GunLevel = GunLevel = std.floor;
out$.GunXP = GunXP = std.floor;
out$.FPS = FPS = std.id;
out$.MS = MS = std.id;
out$.Velocity = Velocity = std.id;
out$.Acceleration = Acceleration = std.id;
out$.HP = HP = std.floor;
out$.gameToPx = gameToPx = function(){
  return Pixel((function(it){
    return it / kPixelScaleFactor;
  }).apply(this, arguments));
};
out$.gameToTile = gameToTile = function(){
  return Tile((function(it){
    return it / kGameUnitsPerTile;
  }).apply(this, arguments));
};
out$.tileToGame = tileToGame = (function(it){
  return it * kGameUnitsPerTile;
});
out$.tileToPx = tileToPx = function(){
  return gameToPx(tileToGame.apply(this, arguments));
};
out$.pxToGame = pxToGame = (function(it){
  return it * kPixelScaleFactor;
});
out$.pxToTile = pxToTile = function(){
  return (function(it){
    return it / kGameUnitsPerTile;
  })(pxToGame.apply(this, arguments));
};
out$.degToRad = degToRad = (function(it){
  return it * kPi / 180;
});
out$.kOneTile = kOneTile = tileToGame(1);
out$.kHalfTile = kHalfTile = tileToGame(0.5);
out$.kTilePx = kTilePx = tileToPx(1);
out$.kMaxGunLevel = kMaxGunLevel = 3;
},{"./config":12,"std":48}],51:[function(require,module,exports){
var std, units, tpx, ImmobileSingleLoopParticle, WallParticle, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
units = require('./units');
tpx = require('./units').tileToPx;
ImmobileSingleLoopParticle = require('./immobile-single-loop-particle').ImmobileSingleLoopParticle;
out$.WallParticle = WallParticle = (function(superclass){
  var prototype = extend$((import$(WallParticle, superclass).displayName = 'WallParticle', WallParticle), superclass).prototype, constructor = WallParticle;
  function WallParticle(graphics, x, y){
    WallParticle.superclass.call(this, graphics, x, y, 'Caret', tpx(11), tpx(0), tpx(1), tpx(1), 18, 4);
  }
  return WallParticle;
}(ImmobileSingleLoopParticle));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./immobile-single-loop-particle":23,"./units":50,"std":48}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
