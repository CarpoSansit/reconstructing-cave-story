(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/index.ls":[function(require,module,exports){
var Game;
Game = require('./game');
Game.start();
},{"./game":"/Users/lakmeer/Projects/cave-story/src/game.ls"}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Func.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var apply, curry, flip, fix, over;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/List.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(function(){
    return not$(p.apply(this, arguments));
  }, xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = 9e9;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function not$(x){ return !x; }
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Num.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Obj.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, results$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    results$[x[0]] = x[1];
  }
  return results$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, results$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    results$[key] = values[i];
  }
  return results$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
    results$[k] = f(x);
  }
  return results$;
});
compact = function(object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (x) {
      results$[k] = x;
    }
  }
  return results$;
};
filter = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
reject = curry$(function(f, object){
  var k, x, results$ = {};
  for (k in object) {
    x = object[k];
if (!f(x)) {
      results$[k] = x;
    }
  }
  return results$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Str.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/index.js":[function(require,module,exports){
// Generated by LiveScript 1.2.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.1';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Func.js","./List.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/List.js","./Num.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Num.js","./Obj.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Obj.js","./Str.js":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/Str.js"}],"/Users/lakmeer/Projects/cave-story/src/animated-sprite.ls":[function(require,module,exports){
var std, Game, Sprite, AnimatedSprite;
std = require('std');
Game = require('./game');
Sprite = require('./sprite');
module.exports = AnimatedSprite = (function(superclass){
  var prototype = extend$((import$(AnimatedSprite, superclass).displayName = 'AnimatedSprite', AnimatedSprite), superclass).prototype, constructor = AnimatedSprite;
  function AnimatedSprite(graphics, path, sourceX, sourceY, width, height, fps, numFrames){
    this.width = width;
    this.height = height;
    this.fps = fps;
    this.numFrames = numFrames;
    AnimatedSprite.superclass.apply(this, arguments);
    this.frameTime = 1000 / this.fps;
    this.currentFrame = 0;
    this.elapsedTime = 0;
  }
  prototype.update = function(elapsedTime){
    this.elapsedTime += elapsedTime;
    if (this.elapsedTime > this.frameTime) {
      this.currentFrame += 1;
      this.elapsedTime = 0;
      if (this.currentFrame < this.numFrames) {
        return this.sourceRect.x += Game.kTileSize;
      } else {
        this.sourceRect.x -= Game.kTileSize * (this.numFrames - 1);
        return this.currentFrame = 0;
      }
    }
  };
  return AnimatedSprite;
}(Sprite));
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"./game":"/Users/lakmeer/Projects/cave-story/src/game.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/game.ls":[function(require,module,exports){
var std, SDL, input, graphics, Player, Map, kDebugMode, kFps, kTileSize, running, player, map, lastFrameTime, anyKeysPressed, eventLoop, update, draw, createTestWorld, start, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
input = require('./input');
graphics = require('./graphics');
Player = require('./player');
Map = require('./map');
out$.kDebugMode = kDebugMode = true;
out$.kFps = kFps = 60;
out$.kTileSize = kTileSize = 32;
std.log("Game - new Game");
running = true;
player = null;
map = null;
lastFrameTime = 0;
anyKeysPressed = false;
eventLoop = function(){
  var startTime, event, elapsedTime;
  startTime = SDL.getTicks();
  input.beginNewFrame();
  while (event = SDL.pollEvent()) {
    anyKeysPressed = true;
    switch (event.type) {
    case SDL.KEYDOWN:
      input.keyDownEvent(event);
      break;
    case SDL.KEYUP:
      input.keyUpEvent(event);
      break;
    default:
      throw new Error({
        message: "Unknown event type: " + event
      });
    }
  }
  if (input.wasKeyPressed(SDL.KEY.ESCAPE)) {
    running = false;
  }
  if (input.isKeyHeld(SDL.KEY.LEFT) && input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.stopMoving();
  } else if (input.isKeyHeld(SDL.KEY.LEFT)) {
    player.startMovingLeft();
  } else if (input.isKeyHeld(SDL.KEY.RIGHT)) {
    player.startMovingRight();
  } else {
    player.stopMoving();
  }
  if (input.wasKeyPressed(SDL.KEY.Z)) {
    player.startJump();
  } else if (input.wasKeyReleased(SDL.KEY.Z)) {
    player.stopJump();
  }
  if (input.isKeyHeld(SDL.KEY.UP) && input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookHorizontal();
  } else if (input.isKeyHeld(SDL.KEY.UP)) {
    player.lookUp();
  } else if (input.isKeyHeld(SDL.KEY.DOWN)) {
    player.lookDown();
  } else {
    player.lookHorizontal();
  }
  update(SDL.getTicks() - lastFrameTime);
  draw();
  if (running) {
    lastFrameTime = SDL.getTicks();
    elapsedTime = lastFrameTime - startTime;
    return SDL.delay(1000 / kFps - elapsedTime, eventLoop);
  } else {
    return std.log('Game stopped.');
  }
};
update = function(elapsedTime){
  player.update(elapsedTime, map);
  return map.update(elapsedTime);
};
draw = function(){
  graphics.clear();
  player.draw(graphics, 320, 240);
  return map.draw(graphics);
};
createTestWorld = function(){
  player = new Player(320, 240);
  return map = Map.createTestMap(graphics);
};
out$.start = start = function(){
  SDL.init(SDL.INIT_EVERYTHING);
  createTestWorld();
  eventLoop();
  return std.delay(5000, function(){
    if (!anyKeysPressed) {
      return running = false;
    } else {
      return std.log("Game being interacted with. Don't shut down");
    }
  });
};
},{"./graphics":"/Users/lakmeer/Projects/cave-story/src/graphics.ls","./input":"/Users/lakmeer/Projects/cave-story/src/input.ls","./map":"/Users/lakmeer/Projects/cave-story/src/map.ls","./player":"/Users/lakmeer/Projects/cave-story/src/player.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/graphics.ls":[function(require,module,exports){
var std, SDL, kScreenWidth, kScreenHeight, screen, spritesheets, loadImage, blitSurface, clear, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
SDL = require('SDL');
kScreenWidth = 640;
kScreenHeight = 480;
screen = SDL.setVideoMode(kScreenWidth, kScreenHeight, SDL.FULLSCREEN);
spritesheets = {};
out$.loadImage = loadImage = function(path){
  if (spritesheets[path] == null) {
    std.log('Graphics::loadImage - no surface for', path, '- creating new surface');
    spritesheets[path] = new SDL.Surface(path);
  } else {
    std.log('Graphics::loadImage - reusing available surface for', path);
  }
  return spritesheets[path];
};
out$.blitSurface = blitSurface = function(source, srcRect, destRect){
  return SDL.blitSurface(source, srcRect, screen, destRect);
};
out$.clear = clear = function(){
  return screen.clear();
};
},{"SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/input.ls":[function(require,module,exports){
var std, Input;
std = require('std');
Input = (function(){
  Input.displayName = 'Input';
  var prototype = Input.prototype, constructor = Input;
  function Input(){
    this.heldKeys = {};
    this.pressedKeys = {};
    this.releasedKeys = {};
  }
  prototype.beginNewFrame = function(){
    this.pressedKeys = {};
    return this.releasedKeys = {};
  };
  prototype.keyDownEvent = function(event){
    this.pressedKeys[event.key] = true;
    return this.heldKeys[event.key] = true;
  };
  prototype.keyUpEvent = function(event){
    this.releasedKeys[event.key] = true;
    return this.heldKeys[event.key] = false;
  };
  prototype.wasKeyPressed = function(key){
    return this.pressedKeys[key];
  };
  prototype.wasKeyReleased = function(key){
    return this.releasedKeys[key];
  };
  prototype.isKeyHeld = function(key){
    return this.heldKeys[key];
  };
  return Input;
}());
module.exports = new Input;
},{"std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/map.ls":[function(require,module,exports){
var std, div, Game, Rect, Sprite, ref$, AIR_TILE, WALL_TILE, Tile, CollisionTile, Map;
std = require('std');
div = std.div;
Game = require('./game');
Rect = require('./rectangle');
Sprite = require('./sprite');
ref$ = std['enum'], AIR_TILE = ref$[0], WALL_TILE = ref$[1];
Tile = (function(){
  Tile.displayName = 'Tile';
  var prototype = Tile.prototype, constructor = Tile;
  function Tile(type, sprite){
    this.type = type != null ? type : AIR_TILE;
    this.sprite = sprite;
  }
  return Tile;
}());
CollisionTile = (function(){
  CollisionTile.displayName = 'CollisionTile';
  var prototype = CollisionTile.prototype, constructor = CollisionTile;
  function CollisionTile(row, col, type){
    this.row = row;
    this.col = col;
    this.type = type;
  }
  return CollisionTile;
}());
module.exports = Map = (function(){
  Map.displayName = 'Map';
  var prototype = Map.prototype, constructor = Map;
  function Map(){
    this.tiles = Map.createMatrix(20, 15);
  }
  prototype.update = function(elapsedTime){
    var i$, ref$, len$, row, lresult$, j$, len1$, tile, ref1$, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.tiles).length; i$ < len$; ++i$) {
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        tile = row[j$];
        lresult$.push((ref1$ = tile.sprite) != null ? ref1$.update(elapsedTime) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.draw = function(graphics){
    var i$, ref$, len$, y, row, lresult$, j$, len1$, x, tile, ref1$, results$ = [];
    for (i$ = 0, len$ = (ref$ = this.tiles).length; i$ < len$; ++i$) {
      y = i$;
      row = ref$[i$];
      lresult$ = [];
      for (j$ = 0, len1$ = row.length; j$ < len1$; ++j$) {
        x = j$;
        tile = row[j$];
        lresult$.push((ref1$ = tile.sprite) != null ? ref1$.draw(graphics, x * Game.kTileSize, y * Game.kTileSize) : void 8);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  prototype.getCollidingTiles = function(rect){
    var firstRow, lastRow, firstCol, lastCol, collisionTiles, i$, row, j$, col;
    firstRow = div(rect.top, Game.kTileSize);
    lastRow = div(rect.bottom, Game.kTileSize);
    firstCol = div(rect.left, Game.kTileSize);
    lastCol = div(rect.right, Game.kTileSize);
    collisionTiles = [];
    for (i$ = firstRow; i$ <= lastRow; ++i$) {
      row = i$;
      for (j$ = firstCol; j$ <= lastCol; ++j$) {
        col = j$;
        collisionTiles.push(new CollisionTile(row, col, this.tiles[row][col].type));
      }
    }
    return collisionTiles;
  };
  Map.createTestMap = function(graphics){
    var map, numRows, numCols, row, tile, i$, col;
    map = new Map;
    numRows = 15;
    numCols = 20;
    row = 11;
    tile = new Tile(WALL_TILE, new Sprite(graphics, 'content/PrtCave.bmp', Game.kTileSize, 0, Game.kTileSize, Game.kTileSize));
    for (i$ = 0; i$ <= numCols; ++i$) {
      col = i$;
      map.tiles[row][col] = tile;
    }
    map.tiles[10][5] = tile;
    map.tiles[9][4] = tile;
    map.tiles[8][3] = tile;
    map.tiles[7][2] = tile;
    map.tiles[10][3] = tile;
    return map;
  };
  Map.createMatrix = function(cols, rows){
    var i$, y, lresult$, j$, z, results$ = [];
    for (i$ = 0; i$ <= rows; ++i$) {
      y = i$;
      lresult$ = [];
      for (j$ = 0; j$ <= cols; ++j$) {
        z = j$;
        lresult$.push(new Tile);
      }
      results$.push(lresult$);
    }
    return results$;
  };
  Map.WALL_TILE = WALL_TILE;
  Map.AIR_TILE = AIR_TILE;
  return Map;
}());
},{"./game":"/Users/lakmeer/Projects/cave-story/src/game.ls","./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/player.ls":[function(require,module,exports){
var std, graphics, Game, Map, Rect, Sprite, AnimatedSprite, kSpriteFrameTime, kCharacterFrame, kWalkFrame, kStandFrame, kJumpFrame, kFallFrame, kUpFrameOffset, kDownFrame, kBackFrame, kFriction, kGravity, kWalkingAcceleration, kAirAcceleration, kMaxSpeedX, kMaxSpeedY, kJumpSpeed, kJumpGravity, kCollisionX, kCollisionY, ref$, STANDING, WALKING, JUMPING, FALLING, INTERACTING, LEFT, RIGHT, UP, DOWN, HORIZONTAL, SpriteState, Player, slice$ = [].slice;
std = require('std');
graphics = require('./graphics');
Game = require('./game');
Map = require('./map');
Rect = require('./rectangle');
Sprite = require('./sprite');
AnimatedSprite = require('./animated-sprite');
kSpriteFrameTime = 15;
kCharacterFrame = 20;
kWalkFrame = 0;
kStandFrame = 0;
kJumpFrame = 1;
kFallFrame = 2;
kUpFrameOffset = 3;
kDownFrame = 6;
kBackFrame = 7;
kFriction = 0.00049804687;
kGravity = 0.0012;
kWalkingAcceleration = 0.0008300712;
kAirAcceleration = 0.0003125;
kMaxSpeedX = 0.15859375;
kMaxSpeedY = 0.2998046875;
kJumpSpeed = 0.25;
kJumpGravity = 0.0003125;
kCollisionX = new Rect(6, 10, 20, 12);
kCollisionY = new Rect(10, 2, 12, 30);
ref$ = std['enum'], STANDING = ref$[0], WALKING = ref$[1], JUMPING = ref$[2], FALLING = ref$[3], INTERACTING = ref$[4];
ref$ = std['enum'], LEFT = ref$[0], RIGHT = ref$[1];
ref$ = std['enum'], UP = ref$[0], DOWN = ref$[1], HORIZONTAL = ref$[2];
SpriteState = (function(){
  SpriteState.displayName = 'SpriteState';
  var prototype = SpriteState.prototype, constructor = SpriteState;
  function SpriteState(motionType, horizontalFacing, verticalFacing){
    this.motionType = motionType != null ? motionType : STANDING;
    this.horizontalFacing = horizontalFacing != null ? horizontalFacing : LEFT;
    this.verticalFacing = verticalFacing != null ? verticalFacing : HORIZONTAL;
  }
  prototype.key = function(){
    return this.motionType + "-" + this.horizontalFacing + "-" + this.verticalFacing;
  };
  SpriteState.key = function(){
    var args;
    args = slice$.call(arguments);
    return args.join('-');
  };
  return SpriteState;
}());
module.exports = Player = (function(){
  Player.displayName = 'Player';
  var prototype = Player.prototype, constructor = Player;
  function Player(x, y){
    this.x = x;
    this.y = y;
    this.velocityY = 0;
    this.velocityX = 0;
    this.accelerationX = 0;
    this.horizontalFacing = LEFT;
    this.verticalFacing = HORIZONTAL;
    this.onGround = false;
    this.jumpActive = false;
    this.spriteState = new SpriteState(STANDING, LEFT);
    this.sprites = this.initialiseSprites();
  }
  prototype.initialiseSprite = function(motion, hfacing, vfacing){
    var sourceX, sourceY;
    sourceX = (function(){
      switch (motion) {
      case WALKING:
        return kWalkFrame * Game.kTileSize;
      case STANDING:
        return kStandFrame * Game.kTileSize;
      case JUMPING:
        return kJumpFrame * Game.kTileSize;
      case FALLING:
        return kFallFrame * Game.kTileSize;
      }
    }());
    sourceX += vfacing === UP ? kUpFrameOffset * Game.kTileSize : 0;
    sourceY = hfacing === LEFT
      ? kCharacterFrame * Game.kTileSize
      : (kCharacterFrame + 1) * Game.kTileSize;
    if (motion === WALKING) {
      return new AnimatedSprite(graphics, 'content/MyChar.bmp', sourceX, sourceY, Game.kTileSize, Game.kTileSize, kSpriteFrameTime, 3);
    } else {
      if (vfacing === DOWN) {
        sourceX = motion === STANDING
          ? kBackFrame * Game.kTileSize
          : kDownFrame * Game.kTileSize;
      }
      return new Sprite(graphics, 'content/MyChar.bmp', sourceX, sourceY, Game.kTileSize, Game.kTileSize);
    }
  };
  prototype.initialiseSprites = function(spriteMap){
    var i$, ref$, len$, motion, j$, ref1$, len1$, hfacing, k$, ref2$, len2$, vfacing;
    spriteMap == null && (spriteMap = {});
    for (i$ = 0, len$ = (ref$ = [STANDING, WALKING, JUMPING, FALLING]).length; i$ < len$; ++i$) {
      motion = ref$[i$];
      for (j$ = 0, len1$ = (ref1$ = [LEFT, RIGHT]).length; j$ < len1$; ++j$) {
        hfacing = ref1$[j$];
        for (k$ = 0, len2$ = (ref2$ = [UP, DOWN, HORIZONTAL]).length; k$ < len2$; ++k$) {
          vfacing = ref2$[k$];
          spriteMap[SpriteState.key(motion, hfacing, vfacing)] = this.initialiseSprite(motion, hfacing, vfacing);
        }
      }
    }
    return spriteMap;
  };
  prototype.update = function(elapsedTime, map){
    this.sprites[this.getSpriteState()].update(elapsedTime);
    this.updateX(elapsedTime, map);
    return this.updateY(elapsedTime, map);
  };
  prototype.updateX = function(elapsedTime, map){
    var accX, Δx;
    accX = this.onGround ? kWalkingAcceleration : kAirAcceleration;
    this.velocityX += this.accelerationX * accX * elapsedTime;
    if (this.accelerationX < 0) {
      this.velocityX = std.max(this.velocityX, -kMaxSpeedX);
    } else if (this.accelerationX > 0) {
      this.velocityX = std.min(this.velocityX, kMaxSpeedX);
    } else if (this.onGround) {
      this.velocityX = this.velocityX > 0
        ? std.max(0, this.velocityX - kFriction * elapsedTime)
        : std.min(0, this.velocityX + kFriction * elapsedTime);
    }
    Δx = std.round(this.velocityX * elapsedTime);
    if (Δx > 0) {
      this.onWallCollision(map, this.rightCollision(Δx), function(tile){
        if (tile) {
          this.x = tile.col * Game.kTileSize - kCollisionX.right;
          return this.velocityX = 0;
        } else {
          return this.x += Δx;
        }
      });
      return this.onWallCollision(map, this.leftCollision(0), function(tile){
        if (tile) {
          return this.x = tile.col * Game.kTileSize + kCollisionX.right;
        }
      });
    } else {
      this.onWallCollision(map, this.leftCollision(Δx), function(tile){
        if (tile) {
          this.x = tile.col * Game.kTileSize + kCollisionX.right;
          return this.velocityX = 0;
        } else {
          return this.x += Δx;
        }
      });
      return this.onWallCollision(map, this.rightCollision(0), function(tile){
        if (tile) {
          return this.x = tile.col * Game.kTileSize - kCollisionX.right;
        }
      });
    }
  };
  prototype.updateY = function(elapsedTime, map){
    var gravity, Δy;
    gravity = this.jumpActive && this.velocityY < 0 ? kJumpGravity : kGravity;
    this.velocityY = std.min(this.velocityY + gravity * elapsedTime, kMaxSpeedY);
    Δy = std.round(this.velocityY * elapsedTime);
    if (Δy > 0) {
      this.onWallCollision(map, this.bottomCollision(Δy), function(tile){
        if (tile) {
          this.y = tile.row * Game.kTileSize - kCollisionY.bottom;
          this.velocityY = 0;
          return this.onGround = true;
        } else {
          this.y += Δy;
          return this.onGround = false;
        }
      });
      return this.onWallCollision(map, this.topCollision(0), function(tile){
        if (tile) {
          return this.y = tile.row * Game.kTileSize + kCollisionY.h;
        }
      });
    } else {
      this.onWallCollision(map, this.topCollision(Δy), function(tile){
        if (tile) {
          this.y = tile.row * Game.kTileSize + kCollisionY.h;
          return this.velocityY = 0;
        } else {
          this.y += Δy;
          return this.onGround = false;
        }
      });
      return this.onWallCollision(map, this.bottomCollision(0), function(tile){
        if (tile) {
          this.y = tile.row * Game.kTileSize - kCollisionY.bottom;
          return this.onGround = true;
        }
      });
    }
  };
  prototype.draw = function(graphics){
    return this.sprites[this.getSpriteState()].draw(graphics, this.x, this.y);
  };
  prototype.getSpriteState = function(){
    var motionType;
    motionType = this.onGround
      ? this.accelerationX === 0 ? STANDING : WALKING
      : this.velocityY < 0 ? JUMPING : FALLING;
    return SpriteState.key(motionType, this.horizontalFacing, this.verticalFacing);
  };
  prototype.leftCollision = function(Δ){
    return new Rect(this.x + kCollisionX.left + Δ, this.y + kCollisionX.top, kCollisionX.w / 2 - Δ, kCollisionX.h);
  };
  prototype.rightCollision = function(Δ){
    return new Rect(this.x + kCollisionX.left + kCollisionX.w / 2, this.y + kCollisionX.top, kCollisionX.w / 2 + Δ, kCollisionX.h);
  };
  prototype.topCollision = function(Δ){
    return new Rect(this.x + kCollisionY.left, this.y + kCollisionY.top + Δ, kCollisionY.w, kCollisionY.h / 2 - Δ);
  };
  prototype.bottomCollision = function(Δ){
    return new Rect(this.x + kCollisionY.left, this.y + kCollisionY.top + kCollisionY.h / 2 + Δ, kCollisionY.w, kCollisionY.h / 2 + Δ);
  };
  prototype.onWallCollision = function(map, rect, λ){
    var i$, ref$, len$, tile;
    for (i$ = 0, len$ = (ref$ = map.getCollidingTiles(rect)).length; i$ < len$; ++i$) {
      tile = ref$[i$];
      if (tile.type === Map.WALL_TILE) {
        return λ.call(this, tile);
      }
    }
    return λ.call(this);
  };
  prototype.startMovingLeft = function(){
    this.horizontalFacing = LEFT;
    return this.accelerationX = -1;
  };
  prototype.startMovingRight = function(){
    this.horizontalFacing = RIGHT;
    return this.accelerationX = 1;
  };
  prototype.stopMoving = function(){
    return this.accelerationX = 0;
  };
  prototype.startJump = function(){
    this.jumpActive = true;
    if (this.onGround) {
      return this.velocityY = -kJumpSpeed;
    }
  };
  prototype.stopJump = function(){
    return this.jumpActive = false;
  };
  prototype.lookUp = function(){
    return this.verticalFacing = UP;
  };
  prototype.lookDown = function(){
    return this.verticalFacing = DOWN;
  };
  prototype.lookHorizontal = function(){
    return this.verticalFacing = HORIZONTAL;
  };
  return Player;
}());
},{"./animated-sprite":"/Users/lakmeer/Projects/cave-story/src/animated-sprite.ls","./game":"/Users/lakmeer/Projects/cave-story/src/game.ls","./graphics":"/Users/lakmeer/Projects/cave-story/src/graphics.ls","./map":"/Users/lakmeer/Projects/cave-story/src/map.ls","./rectangle":"/Users/lakmeer/Projects/cave-story/src/rectangle.ls","./sprite":"/Users/lakmeer/Projects/cave-story/src/sprite.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/rectangle.ls":[function(require,module,exports){
var Rectangle;
module.exports = Rectangle = (function(){
  Rectangle.displayName = 'Rectangle';
  var prototype = Rectangle.prototype, constructor = Rectangle;
  function Rectangle(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.top = this.y;
    this.left = this.x;
    this.right = this.x + this.w;
    this.bottom = this.y + this.h;
  }
  return Rectangle;
}());
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/delay.ls":[function(require,module,exports){
var raf, out$ = typeof exports != 'undefined' && exports || this;
raf = requestAnimationFrame;
import$(out$, {
  delay: function(time, λ){
    return raf(λ);
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls":[function(require,module,exports){
var std, queue, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = [];
import$(out$, {
  pushEvent: function(event){
    return queue.push(event);
  },
  pollEvent: function(){
    if (queue.length) {
      return queue.shift();
    }
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{"std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls":[function(require,module,exports){
var std, delay, timer, screen, keyboard, eventQueue, Rect, Surface, ref$, INIT_EVERYTHING, FULLSCREEN, init, KEY, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
delay = require('./delay');
timer = require('./timer');
screen = require('./screen');
keyboard = require('./keyboard');
eventQueue = require('./event-queue');
out$.Rect = Rect = require('./rect');
out$.Surface = Surface = require('./surface');
ref$ = std['enum'], INIT_EVERYTHING = ref$[0], FULLSCREEN = ref$[1];
out$.init = init = function(mode){
  std.log("SDL::Init - with mode:", mode);
  timer.init();
  return keyboard.init();
};
out$.INIT_EVERYTHING = INIT_EVERYTHING;
out$.FULLSCREEN = FULLSCREEN;
out$.KEYDOWN = keyboard.KEYDOWN;
out$.KEYUP = keyboard.KEYUP;
out$.KEY = KEY = keyboard.KEYCODES;
out$.delay = delay.delay;
out$.getTicks = timer.getTicks;
out$.pollEvent = eventQueue.pollEvent;
out$.setVideoMode = screen.setVideoMode;
out$.blitSurface = Surface.blitSurface;
out$.loadImage = Surface.loadImage;
},{"./delay":"/Users/lakmeer/Projects/cave-story/src/sdl/delay.ls","./event-queue":"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls","./keyboard":"/Users/lakmeer/Projects/cave-story/src/sdl/keyboard.ls","./rect":"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls","./screen":"/Users/lakmeer/Projects/cave-story/src/sdl/screen.ls","./surface":"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls","./timer":"/Users/lakmeer/Projects/cave-story/src/sdl/timer.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/keyboard.ls":[function(require,module,exports){
var std, queue, ref$, KEYDOWN, KEYUP, KEYCODES, monitorKeys, init, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
queue = require('./event-queue');
ref$ = std['enum'], KEYDOWN = ref$[0], KEYUP = ref$[1];
out$.KEYCODES = KEYCODES = {
  ESCAPE: 27,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  A: 65,
  Q: 81,
  S: 83,
  W: 87,
  X: 88,
  Z: 90
};
monitorKeys = function(){
  document.addEventListener('keydown', function(arg$){
    var which;
    which = arg$.which;
    queue.pushEvent({
      type: KEYDOWN,
      key: which
    });
    return event.preventDefault();
  });
  return document.addEventListener('keyup', function(arg$){
    var which;
    which = arg$.which;
    queue.pushEvent({
      type: KEYUP,
      key: which
    });
    return event.preventDefault();
  });
};
out$.init = init = function(){
  std.log("SDL::Keyboard - Monitoring key input");
  return monitorKeys();
};
out$.KEYDOWN = KEYDOWN;
out$.KEYUP = KEYUP;
},{"./event-queue":"/Users/lakmeer/Projects/cave-story/src/sdl/event-queue.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls":[function(require,module,exports){
var Rect;
module.exports = Rect = (function(){
  Rect.displayName = 'Rect';
  var prototype = Rect.prototype, constructor = Rect;
  function Rect(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }
  return Rect;
}());
},{}],"/Users/lakmeer/Projects/cave-story/src/sdl/screen.ls":[function(require,module,exports){
var std, Surface, FULLSCREEN, createNewScreen, setVideoMode, out$ = typeof exports != 'undefined' && exports || this;
std = require('std');
Surface = require('./surface');
FULLSCREEN = std['enum'][0];
createNewScreen = function(w, h, isFullscreen){
  var screen;
  screen = new Surface(null, w, h);
  document.body.appendChild(screen.canvas);
  return screen;
};
out$.setVideoMode = setVideoMode = function(width, height, flags){
  return createNewScreen(width, height, flags === FULLSCREEN);
};
},{"./surface":"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/surface.ls":[function(require,module,exports){
var std, Rect, Surface;
std = require('std');
Rect = require('./rect');
module.exports = Surface = (function(){
  Surface.displayName = 'Surface';
  var prototype = Surface.prototype, constructor = Surface;
  function Surface(src, width, height){
    this.width = width;
    this.height = height;
    this.canvas = document.createElement('canvas');
    this.ctx = this.canvas.getContext('2d');
    this.ready = false;
    this.resetCanvasSize();
    if (typeof src === 'string') {
      this.loadImageData(src);
    } else if (src != null) {
      this.saveImageData(src);
    } else {}
  }
  prototype.resetCanvasSize = function(){
    this.canvas.width = this.width;
    return this.canvas.height = this.height;
  };
  prototype.inheritSizeFromImage = function(data){
    if (this.width == null && this.height == null) {
      this.width = data.naturalWidth;
      this.height = data.naturalHeight;
      return this.resetCanvasSize();
    }
  };
  prototype.loadImageData = function(path){
    var data, this$ = this;
    data = new Image;
    data.onload = function(){
      this$.inheritSizeFromImage(data);
      return this$.saveImageData(data);
    };
    return data.src = path;
  };
  prototype.saveImageData = function(data){
    this.data = data;
    this.ready = true;
    return this.ctx.drawImage(this.data, 0, 0, this.width, this.height);
  };
  prototype.clear = function(){
    return this.ctx.clearRect(0, 0, this.width, this.height);
  };
  Surface.blitSurface = function(source, srcRect, dest, destRect){
    return dest.ctx.drawImage(source.canvas, srcRect.x, srcRect.y, srcRect.w, srcRect.h, destRect.x, destRect.y, destRect.w, destRect.h);
  };
  return Surface;
}());
},{"./rect":"/Users/lakmeer/Projects/cave-story/src/sdl/rect.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/sdl/timer.ls":[function(require,module,exports){
var startTime, out$ = typeof exports != 'undefined' && exports || this;
startTime = 0;
import$(out$, {
  init: function(){
    return startTime = Date.now();
  },
  getTicks: function(){
    return Date.now() - startTime;
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
},{}],"/Users/lakmeer/Projects/cave-story/src/sprite.ls":[function(require,module,exports){
var SDL, std, Game, Sprite;
SDL = require('SDL');
std = require('std');
Game = require('./game');
module.exports = Sprite = (function(){
  Sprite.displayName = 'Sprite';
  var prototype = Sprite.prototype, constructor = Sprite;
  function Sprite(graphics, path, sourceX, sourceY, width, height){
    this.width = width;
    this.height = height;
    this.sourceRect = new SDL.Rect(sourceX, sourceY, width, height);
    this.spriteSheet = graphics.loadImage(path);
    if (Game.kDebugMode) {
      document.body.appendChild(this.spriteSheet.canvas);
    }
  }
  prototype.update = function(){};
  prototype.draw = function(graphics, x, y){
    var destRect;
    destRect = new SDL.Rect(x, y, this.width, this.height);
    return graphics.blitSurface(this.spriteSheet, this.sourceRect, destRect);
  };
  return Sprite;
}());
},{"./game":"/Users/lakmeer/Projects/cave-story/src/game.ls","SDL":"/Users/lakmeer/Projects/cave-story/src/sdl/index.ls","std":"/Users/lakmeer/Projects/cave-story/src/std/index.ls"}],"/Users/lakmeer/Projects/cave-story/src/std/index.ls":[function(require,module,exports){
var ref$, id, map, filter, any, div, log, info, objMap, flip, delay, round, max, min, out$ = typeof exports != 'undefined' && exports || this;
ref$ = require('prelude-ls'), id = ref$.id, map = ref$.map, filter = ref$.filter, any = ref$.any, div = ref$.div;
out$.log = log = function(){
  console.log.apply(console, arguments);
  return arguments[0];
};
out$.info = info = function(){
  console.info.apply(console, arguments);
  return arguments[0];
};
out$.objMap = objMap = curry$(function(λ, o){
  var k, v, results$ = [];
  for (k in o) {
    v = o[k];
    results$.push(λ(k, v));
  }
  return results$;
});
out$.flip = flip = function(λ){
  return curry$(function(a, b){
    return λ(b, a);
  });
};
out$.delay = delay = flip(setTimeout);
out$.round = round = Math.round;
out$.max = max = Math.max;
out$.min = min = Math.min;
ref$ = out$;
ref$.id = id;
ref$.any = any;
ref$.map = map;
ref$.filter = filter;
ref$.div = div;
ref$['enum'] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"prelude-ls":"/Users/lakmeer/Projects/cave-story/node_modules/prelude-ls/lib/index.js"}]},{},["./src/index.ls"])
//# sourceMappingURL=data:application/json;base64,
